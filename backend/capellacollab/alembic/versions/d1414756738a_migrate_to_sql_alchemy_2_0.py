# SPDX-FileCopyrightText: Copyright DB Netz AG and the capella-collab-manager contributors
# SPDX-License-Identifier: Apache-2.0

"""Migrate to sql alchemy 2.0

Revision ID: d1414756738a
Revises: 61d36288afe9
Create Date: 2023-05-23 14:18:35.476683

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d1414756738a"
down_revision = "61d36288afe9"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "backups", "created_by", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "backups", "k8s_cronjob_id", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "backups", "t4c_username", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "backups", "t4c_password", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "backups", "git_model_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "backups", "t4c_model_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "backups", "model_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "git_instances", "name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "git_instances", "url", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "git_instances",
        "type",
        existing_type=postgresql.ENUM(
            "GENERAL", "GITLAB", "GITHUB", "AZUREDEVOPS", name="gittype"
        ),
        nullable=False,
    )

    op.get_bind().execute(
        sa.text("UPDATE git_models SET password='' WHERE password IS NULL")
    )

    op.alter_column(
        "git_models", "name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "git_models", "path", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "git_models", "entrypoint", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "git_models", "revision", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "git_models", "primary", existing_type=sa.BOOLEAN(), nullable=False
    )
    op.alter_column(
        "git_models", "model_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "git_models", "username", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "git_models", "password", existing_type=sa.VARCHAR(), nullable=False
    )

    model_ids = (
        op.get_bind()
        .execute(sa.text("SELECT id FROM models WHERE tool_id IS NULL"))
        .scalars()
        .all()
    )

    for model_id in model_ids:
        op.get_bind().execute(
            sa.text(f"DELETE FROM git_models WHERE model_id={model_id}")
        )
        op.get_bind().execute(
            sa.text(f"DELETE FROM t4c_models WHERE model_id={model_id}")
        )
        op.get_bind().execute(
            sa.text(
                f"DELETE FROM model_restrictions WHERE model_id={model_id}"
            )
        )
        op.get_bind().execute(
            sa.text(f"DELETE FROM models WHERE id={model_id}")
        )

    op.alter_column(
        "models", "tool_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "models", "name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "models", "description", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "models", "project_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "notices", "title", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "notices", "message", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "notices",
        "level",
        existing_type=postgresql.ENUM(
            "PRIMARY",
            "SECONDARY",
            "SUCCESS",
            "DANGER",
            "WARNING",
            "INFO",
            "ALERT",
            name="noticelevel",
        ),
        nullable=False,
    )
    op.alter_column(
        "project_user_association",
        "role",
        existing_type=postgresql.ENUM(
            "USER", "MANAGER", "ADMIN", name="projectuserrole"
        ),
        nullable=False,
    )
    op.alter_column(
        "projects", "name", existing_type=sa.VARCHAR(), nullable=False
    )

    op.get_bind().execute(
        sa.text(
            "DELETE FROM sessions WHERE version_id IS NULL OR tool_id IS NULL"
        )
    )

    op.alter_column(
        "sessions",
        "ports",
        existing_type=postgresql.ARRAY(sa.INTEGER()),
        nullable=False,
    )
    op.alter_column(
        "sessions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "sessions", "host", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "sessions", "mac", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "sessions", "owner_name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "t4c_instances", "license", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "t4c_instances", "host", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "t4c_instances",
        "usage_api",
        existing_type=sa.VARCHAR(),
        nullable=False,
    )
    op.alter_column(
        "t4c_instances", "rest_api", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "t4c_instances", "username", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "t4c_instances", "password", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "t4c_instances",
        "version_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        "t4c_models", "name", existing_type=sa.VARCHAR(), nullable=False
    )

    op.get_bind().execute(
        sa.text("DELETE FROM t4c_models WHERE repository_id IS NULL")
    )

    op.alter_column(
        "t4c_models",
        "repository_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        "t4c_models", "model_id", existing_type=sa.INTEGER(), nullable=False
    )

    op.get_bind().execute(
        sa.text("DELETE FROM model_restrictions WHERE model_id IS NULL")
    )
    op.alter_column(
        "model_restrictions",
        "model_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )

    op.alter_column(
        "tool_integrations",
        "tool_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        "tool_integrations", "t4c", existing_type=sa.BOOLEAN(), nullable=False
    )
    op.alter_column(
        "tool_integrations",
        "pure_variants",
        existing_type=sa.BOOLEAN(),
        nullable=False,
    )
    op.alter_column(
        "tool_integrations",
        "jupyter",
        existing_type=sa.BOOLEAN(),
        nullable=False,
    )
    op.alter_column(
        "tools",
        "docker_image_template",
        existing_type=sa.VARCHAR(),
        nullable=False,
    )
    op.alter_column(
        "types", "name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "user_history_events",
        "user_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        "user_history_events",
        "execution_time",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "user_history_events",
        "event_type",
        existing_type=postgresql.ENUM(
            "CREATED_USER",
            "ADDED_TO_PROJECT",
            "REMOVED_FROM_PROJECT",
            "ASSIGNED_PROJECT_ROLE_USER",
            "ASSIGNED_PROJECT_ROLE_MANAGER",
            "ASSIGNED_PROJECT_PERMISSION_READ_ONLY",
            "ASSIGNED_PROJECT_PERMISSION_READ_WRITE",
            "ASSIGNED_ROLE_ADMIN",
            "ASSIGNED_ROLE_USER",
            name="eventtype",
        ),
        nullable=False,
    )
    op.alter_column(
        "users", "name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "users",
        "role",
        existing_type=postgresql.ENUM("USER", "ADMIN", name="role"),
        nullable=False,
    )
    op.alter_column(
        "versions", "name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "versions",
        "is_recommended",
        existing_type=sa.BOOLEAN(),
        nullable=False,
    )
    op.alter_column(
        "versions", "is_deprecated", existing_type=sa.BOOLEAN(), nullable=False
    )
