# SPDX-FileCopyrightText: Copyright DB InfraGO AG and contributors
# SPDX-License-Identifier: Apache-2.0

[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=3.4", "wheel"]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["version"]

name = "capellacollab-backend"
readme = "README.md"
requires-python = ">=3.12, <3.14"
license = { text = "Apache-2.0" }
authors = [{ name = "DB InfraGO AG" }]
keywords = []
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
]
dependencies = [
  "PyYAML",
  "alembic",
  "appdirs",
  "cachetools",
  "email-validator",
  "fastapi>=0.112.4",
  "kubernetes",
  "psycopg2-binary>2.9.7",
  "pydantic>=2.0.0",
  "python-dateutil",
  "python-multipart",
  "pyjwt[crypto]",
  "oauthlib",
  "sqlalchemy>=2.0.0",
  "uvicorn[standard]",
  "python-slugify[unidecode]",
  "starlette-prometheus",
  "fastapi-pagination>=0.12.27",
  "aiohttp",
  "argon2-cffi",
  "typer",
  "lxml",
  "valkey[libvalkey]",
  "cryptography",
  "croniter",
  "pyinstrument",
  "Jinja2",
]

[project.urls]
Homepage = "https://github.com/DSD-DBS/capella-collab-manager"

[project.optional-dependencies]
dev = [
  "ruff",
  "capellambse",
  "deepdiff",
  "mypy",
  "pytest",
  "testcontainers",
  "httpx",
  "docker",
  "responses",
  "sqlalchemy[mypy]",
  "pytest-cov",
  "aioresponses>=0.7.7",
  "types-lxml",
  "types-croniter",
  "pytest-asyncio",
]

[tool.coverage.run]
source = ["capellacollab"]
branch = true
command_line = "-m pytest"
omit = ["tests/*", "capellacollab/alembic/*"]

[tool.coverage.report]
exclude_also = [
  'if t\.TYPE_CHECKING:',
  'class .*\bt\.Protocol\):',
  '@abc\.abstractmethod',
  '@t\.overload',
]
skip_covered = true

[tool.mypy]
check_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unreachable = true
python_version = "3.12"
exclude = "capellacollab/alembic"

[[tool.mypy.overrides]]
module = ["tests.*"]
allow_incomplete_defs = true
allow_untyped_defs = true

[[tool.mypy.overrides]]
# Untyped third party libraries
module = [
  "kubernetes.*",
  "prometheus_client.*",
  "deepdiff.*",
  "appdirs.*",
  "requests.*",
  "slugify.*",
  "cachetools.*",
  "oauthlib.*",
  "yaml.*",
  "fastapi_pagination.*",
  "aiohttp.*",
  "starlette_prometheus.*",
  "uvicorn.*",
  "alembic.*",
  "jwt.*",
  "argon2.*",
  "websocket.*",
  "testcontainers.*",
  "valkey.*",
  "jinja2.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = """
  --strict-config
  --strict-markers
"""
testpaths = ["tests"]
xfail_strict = true

[tool.ruff]
line-length = 79
target-version = "py312"

[tool.ruff.lint]
extend-select = [
  "ARG",    # flake8-unused-arguments
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "C90",    # mccabe
  "DTZ",    # flake8-datetimez
  "ERA",    # eradicate
  "FA",     # flake8-future-annotations
  "FAST",   # FastAPI
  "FIX",    # flake8-fixme
  "FURB",   # refurb
  "G",      # flake8-logging-format
  "ICN",    # flake8-import-conventions
  "ISC001", # "Implicitly concatenated string literals on one line"
  "ISC003", # "Explicitly concatenated string should be implicitly concatenated"
  "LOG",    # flake8-logging
  "N",      # pep8-naming
  "PIE",    # flake8-pie
  "PL",     # pylint
  "PT",     # flake8-pytest-style
  "RET",    # flake8-return
  "RUF",    # ruff
  "SIM",    # flake8-simplify
  "TC005",  # "Found empty type-checking block"
  "T1",     # flake8-debugger
  "T201",   # disallow print statements
  "UP",     # pyupgrade
  "YTT",    # flake8-2020
  "I",      # isort
]
extend-ignore = [
  "B008",    # do not perform function calls in argument defaults
  "E402",    # Module level import not at top of file
  "PLC0414", # Import alias does not rename original package # used for explicit reexports
  "PLR0904", # Too many public methods
  "PLR0911", # Too many return statements
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments in function definition
  "PLR0914", # Too many local variables
  "PLR0915", # Too many statements
  "PLR0916", # Too many Boolean expressions
  "PLR0917", # Too many positional arguments
  "SIM108",  # Use ternary operator instead of `if`-`else`-block
  "PLR2004", # Magic value used in comparison
  "SIM117",  # Use a single `with` statement
  "RUF012",  # Mutable default values, Ruff doesn't correctly detect pydantic models
  "ERA001",  # Commented-out code
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["ARG"]


[tool.ruff.lint.pycodestyle]
max-line-length = 72

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.setuptools]
platforms = ["any"]
zip-safe = false

[tool.setuptools.package-data]
"*" = ["py.typed", "*.json"]

[tool.setuptools.packages.find]
exclude = ["LICENSES"]

[tool.setuptools_scm]
root = ".."
