# SPDX-FileCopyrightText: Copyright DB InfraGO AG and contributors
# SPDX-License-Identifier: Apache-2.0

[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=3.4", "wheel"]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["version"]

name = "capellacollab-backend"
readme = "README.md"
requires-python = ">=3.11, <3.13"
license = { text = "Apache-2.0" }
authors = [{ name = "DB InfraGO AG" }]
keywords = []
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
]
dependencies = [
  "PyYAML",
  "alembic==1.13.1",
  "appdirs",
  "cachetools",
  "fastapi>=0.101.0",
  "kubernetes",
  "msal",
  "psycopg2-binary>2.9.7",
  "pydantic>=2.0.0",
  "python-dateutil",
  "python-jose",
  "python-multipart",
  "requests_oauthlib",
  "sqlalchemy>=2.0.0",
  "uvicorn[standard]",
  "python-slugify[unidecode]",
  "jsonschema",
  "starlette-prometheus",
  "fastapi-pagination>=0.12.19",
  "aiohttp",
  "argon2-cffi",
  "typer",
]

[project.urls]
Homepage = "https://github.com/DSD-DBS/capella-collab-manager"

[project.optional-dependencies]
dev = [
  "black",
  "capellambse==0.5.47",
  "deepdiff",
  "isort",
  "mypy",
  "pylint",
  "pytest",
  "testcontainers",
  "httpx",
  "docker",
  "responses",
  "sqlalchemy[mypy]",
  "pytest-cov",
  "aioresponses",
]

[project.entry-points."capellacollab.authentication.providers"]
oauth = "capellacollab.core.authentication.provider.oauth"
azure = "capellacollab.core.authentication.provider.azure"

[tool.black]
line-length = 79
target-version = ["py311"]

[tool.coverage.run]
source = ["capellacollab"]
branch = true
command_line = "-m pytest"
omit = ["tests/*", "capellacollab/alembic/*"]

[tool.coverage.report]
exclude_also = [
  'if t\.TYPE_CHECKING:',
  'class .*\bt\.Protocol\):',
  '@abc\.abstractmethod',
  '@t\.overload',
]
skip_covered = true

[tool.isort]
profile = 'black'
line_length = 79

[tool.mypy]
check_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unreachable = true
python_version = "3.11"
exclude = "capellacollab/alembic"

[[tool.mypy.overrides]]
module = ["tests.*"]
allow_incomplete_defs = true
allow_untyped_defs = true

[[tool.mypy.overrides]]
# Untyped third party libraries
module = [
  "kubernetes.*",
  "prometheus_client.*",
  "deepdiff.*",
  "appdirs.*",
  "jsonschema.*",
  "requests.*",
  "jose.*",
  "slugify.*",
  "cachetools.*",
  "requests_oauthlib.*",
  "msal.*",
  "yaml.*",
  "fastapi_pagination.*",
  "aiohttp.*",
  "starlette_prometheus.*",
  "uvicorn.*",
  "alembic.*",
  "jwt.*",
  "argon2.*",
  "websocket.*",
  "testcontainers.*",
]
ignore_missing_imports = true

[tool.pydocstyle]
convention = "numpy"
add-select = [
  "D212", # Multi-line docstring summary should start at the first line
  "D402", # First line should not be the function’s “signature”
  "D417", # Missing argument descriptions in the docstring
]
add-ignore = [
  "D201", # No blank lines allowed before function docstring  # auto-formatting
  "D202", # No blank lines allowed after function docstring  # auto-formatting
  "D203", # 1 blank line required before class docstring  # auto-formatting
  "D204", # 1 blank line required after class docstring  # auto-formatting
  "D211", # No blank lines allowed before class docstring  # auto-formatting
  "D213", # Multi-line docstring summary should start at the second line
]

[tool.pylint]
bad-functions = ["print"]

[tool.pylint.messages_control]
disable = [
  "broad-except",
  "consider-using-f-string",
  "cyclic-import",
  "global-statement",
  "import-outside-toplevel",
  "invalid-name",
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "no-else-break",
  "no-else-continue",
  "no-else-raise",
  "no-else-return",
  "protected-access",
  "redefined-builtin",
  "too-few-public-methods",
  "too-many-ancestors",
  "too-many-arguments",
  "too-many-boolean-expressions",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-statements",
  "raise-missing-from",

  # Auto-formatting
  "bad-indentation",
  "inconsistent-quotes",
  "line-too-long",
  "missing-final-newline",
  "mixed-line-endings",
  "multiple-imports",
  "multiple-statements",
  "trailing-newlines",
  "trailing-whitespace",
  "unexpected-line-ending-format",
  "ungrouped-imports",
  "wrong-import-order",
  "wrong-import-position",

  # Handled by mypy
  "arguments-differ",
  "assignment-from-no-return",
  "import-error",
  "missing-kwoa",
  "no-member",
  "no-value-for-parameter",
  "redundant-keyword-arg",
  "signature-differs",
  "syntax-error",
  "too-many-function-args",
  "unbalanced-tuple-unpacking",
  "undefined-variable",
  "unexpected-keyword-arg",
]
enable = [
  "c-extension-no-member",
  "deprecated-pragma",
  "use-symbolic-message-instead",
  "useless-suppression",
]
extension-pkg-whitelist = "pydantic" # https://github.com/pydantic/pydantic/issues/1961

[tool.pylint.master]
init-import = "yes"
load-plugins = "pylint.extensions.bad_builtin"

[tool.pylint.similarities]
min-similarity-lines = 6

[tool.pytest.ini_options]
addopts = """
  --strict-config
  --strict-markers
"""
testpaths = ["tests"]
xfail_strict = true

[tool.setuptools]
platforms = ["any"]
zip-safe = false

[tool.setuptools.package-data]
"*" = ["py.typed", "*.json"]

[tool.setuptools.packages.find]
exclude = ["LICENSES"]

[tool.setuptools_scm]
root = ".."
