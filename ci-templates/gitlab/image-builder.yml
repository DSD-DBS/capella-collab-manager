# SPDX-FileCopyrightText: Copyright DB Netz AG and the capella-collab-manager contributors
# SPDX-License-Identifier: Apache-2.0

variables:
  PRIVATE_GPG_PATH: /secrets/private.gpg
  FRONTEND:
    value: "1"
    description: "Build the frontend image?"
  BACKEND:
    value: "1"
    description: "Build the backend image?"
  DOCS:
    value: "1"
    description: "Build the docs image?"
  GUACAMOLE:
    value: "1"
    description: "Build the guacamole image?"
  REVISION:
    value: "main"
    description: "Revision of Github repository"
  TARGET:
    value: staging
  DOCKER_BUILD_ARGS: "--no-cache"
  DOCKER_BUILDKIT: "1"

default:
  image: $DOCKER_REGISTRY/base
  tags:
    - docker
  before_script:
    - export DOCKER_TAG=$(echo ${REVISION} | sed 's/[^a-zA-Z0-9.]/-/g')

.decrypt: &decrypt
  - apt-get install -y jq
  - cd ${TARGET}
  - gpg --import ${PRIVATE_GPG_PATH}
  - sops -d secret.docker.json > ../plain.docker.json
  - cd ..
  # Remove _unencrypted suffix from plain.k8s.json
  - |
    python3 <<EOF
    import json
    import pathlib
    import typing as t

    def strip_suffix(data: t.Any):
        if isinstance(data, dict):
            return {key.replace('_unencrypted', ''): strip_suffix(value) for key, value in data.items()}
        elif isinstance(data, list):
            return [strip_suffix(element) for element in data]
        else:
            return data

    path = pathlib.Path("plain.docker.json")
    data = json.loads(path.read_text())
    path.write_text(json.dumps(strip_suffix(data), indent=4))
    EOF
  - DOCKER_REGISTRY=$(cat plain.docker.json | jq -r ".registry")

.github: &github
  - git clone https://github.com/DSD-DBS/capella-collab-manager.git
  - cd capella-collab-manager
  - git checkout $REVISION

.docker: &docker
  - docker info
  - cat ../plain.docker.json | jq -r ".password" | docker login -u $(cat ../plain.docker.json | jq -r ".username") --password-stdin $DOCKER_REGISTRY
  - docker pull $BASE_IMAGE

.push: &push
  - >
    if [ "$REVISION" = "main" ];
    then
      docker image tag $IMAGE:$DOCKER_TAG $IMAGE:latest;
      docker push $IMAGE:latest;
    fi
  - docker push $IMAGE:$DOCKER_TAG

frontend:
  stage: build
  rules:
    - if: '$FRONTEND == "1"'
      when: always
  script:
    - *decrypt
    - BASE_IMAGE=${DOCKER_REGISTRY}/base
    - IMAGE=${DOCKER_REGISTRY}/capella/collab/frontend
    - DOCKER_TAG=$(echo ${REVISION} | sed 's/[^a-zA-Z0-9.]/-/g')
    - *github
    - mv ../favicon.ico frontend/src
    - mv ../environment.prod.ts frontend/src/environments
    - npm i undici
    - node frontend/fetch-version.ts
    - *docker
    - docker build ${DOCKER_BUILD_ARGS} -t ${IMAGE}:${DOCKER_TAG} --build-arg BASE_IMAGE=${BASE_IMAGE} frontend
    - *push

backend:
  stage: build
  rules:
    - if: '$BACKEND == "1"'
      when: always
  script:
    - *decrypt
    - BASE_IMAGE=${DOCKER_REGISTRY}/base
    - IMAGE=${DOCKER_REGISTRY}/capella/collab/backend
    - DOCKER_TAG=$(echo ${REVISION} | sed 's/[^a-zA-Z0-9.]/-/g')
    - *github
    - python backend/generate_git_archival.py
    - *docker
    - docker build ${DOCKER_BUILD_ARGS} -t ${IMAGE}:${DOCKER_TAG} --build-arg BASE_IMAGE=${BASE_IMAGE} backend
    - *push

docs:
  stage: build
  rules:
    - if: '$DOCS == "1"'
      when: always
  script:
    - *decrypt
    - BASE_IMAGE=${DOCKER_REGISTRY}/base
    - IMAGE=${DOCKER_REGISTRY}/capella/collab/docs
    - DOCKER_TAG=$(echo ${REVISION} | sed 's/[^a-zA-Z0-9.]/-/g')
    - *github
    - *docker
    - docker build ${DOCKER_BUILD_ARGS} -t ${IMAGE}:${DOCKER_TAG} --build-arg BASE_IMAGE=${BASE_IMAGE} docs/user
    - *push

guacamole:
  stage: build
  rules:
    - if: '$GUACAMOLE == "1"'
      when: always
  script:
    - *decrypt
    - BASE_IMAGE=guacamole/guacamole
    - IMAGE=${DOCKER_REGISTRY}/capella/collab/guacamole
    - DOCKER_TAG=$(echo ${REVISION} | sed 's/[^a-zA-Z0-9.]/-/g')
    - *github
    - *docker
    - docker build ${DOCKER_BUILD_ARGS} -t ${IMAGE}:${DOCKER_TAG} --build-arg BASE_IMAGE=${BASE_IMAGE} guacamole
    - *push
