# SPDX-FileCopyrightText: Copyright DB Netz AG and the capella-collab-manager contributors
# SPDX-License-Identifier: Apache-2.0

variables:
  PRIVATE_GPG_PATH: /secrets/private.gpg
  FRONTEND:
    value: "1"
    description: "Build the frontend image?"
  BACKEND:
    value: "1"
    description: "Build the backend image?"
  DOCS:
    value: "1"
    description: "Build the docs image?"
  GUACAMOLE:
    value: "1"
    description: "Build the guacamole image?"
  REVISION:
    value: "main"
    description: "Revision of Github repository"
  TARGET:
    value: staging
  FRONTEND_IMAGE_NAME: "capella/collab/frontend"
  BACKEND_IMAGE_NAME: "capella/collab/backend"
  DOCS_IMAGE_NAME: "capella/collab/docs"
  GUACAMOLE_IMAGE_NAME: "capella/collab/guacamole"
  DOCKER_BUILD_ARGS: "--no-cache"
  DOCKER_BUILDKIT: "1"

default:
  image: $DOCKER_REGISTRY/base
  tags:
    - docker

.decrypt: &decrypt
  - apt-get install -y jq
  - gpg --import ${PRIVATE_GPG_PATH}
  - sops -d ${TARGET}/secret.docker.json > plain.docker.json
  - DOCKER_REGISTRY=$(cat plain.docker.json | jq -r ".registry_unencrypted")

.github: &github
  - git clone https://github.com/DSD-DBS/capella-collab-manager.git
  - cd capella-collab-manager
  - git checkout ${REVISION}

.docker: &docker
  - docker info
  - >
    cat ../plain.docker.json | \
      jq -r ".password" | \
      docker login \
        -u $(cat ../plain.docker.json | jq -r ".username_unencrypted") \
        --password-stdin \
        ${DOCKER_REGISTRY}
  - docker pull $BASE_IMAGE

.push: &push
  - >
    if [ "${REVISION}" = "main" ];
    then
      docker image tag ${IMAGE}:${DOCKER_TAG} ${IMAGE}:latest;
      docker push ${IMAGE}:latest;
    fi
  - docker push ${IMAGE}:${DOCKER_TAG}

.prepare: &prepare
  - *decrypt
  - DOCKER_TAG=$(echo ${REVISION} | sed 's/[^a-zA-Z0-9.]/-/g')
  - *github

frontend:
  stage: build
  rules:
    - if: '$FRONTEND == "1"'
      when: always
  script:
    - *prepare
    - IMAGE=${DOCKER_REGISTRY}/${FRONTEND_IMAGE_NAME:?}
    - BASE_IMAGE=${DOCKER_REGISTRY}/base
    - *docker
    - mv ../favicon.ico frontend/src
    - mv ../environment.prod.ts frontend/src/environments
    - npm i undici
    - python frontend/fetch-version.py
    - docker build ${DOCKER_BUILD_ARGS} -t ${IMAGE}:${DOCKER_TAG} --build-arg BASE_IMAGE=${BASE_IMAGE} frontend
    - *push

backend:
  stage: build
  rules:
    - if: '$BACKEND == "1"'
      when: always
  script:
    - *prepare
    - IMAGE=${DOCKER_REGISTRY}/${BACKEND_IMAGE_NAME:?}
    - BASE_IMAGE=${DOCKER_REGISTRY}/base
    - *docker
    - python backend/generate_git_archival.py
    - docker build ${DOCKER_BUILD_ARGS} -t ${IMAGE}:${DOCKER_TAG} --build-arg BASE_IMAGE=${BASE_IMAGE} backend
    - *push

docs:
  stage: build
  rules:
    - if: '$DOCS == "1"'
      when: always
  script:
    - *prepare
    - IMAGE=${DOCKER_REGISTRY}/${DOCS_IMAGE_NAME:?}
    - BASE_IMAGE=${DOCKER_REGISTRY}/base
    - *docker
    - docker build ${DOCKER_BUILD_ARGS} -t ${IMAGE}:${DOCKER_TAG} --build-arg BASE_IMAGE=${BASE_IMAGE} docs/user
    - *push

guacamole:
  stage: build
  rules:
    - if: '$GUACAMOLE == "1"'
      when: always
  script:
    - *prepare
    - IMAGE=${DOCKER_REGISTRY}/${GUACAMOLE_IMAGE_NAME:?}
    - BASE_IMAGE=guacamole/guacamole
    - *docker
    - docker build ${DOCKER_BUILD_ARGS} -t ${IMAGE}:${DOCKER_TAG} --build-arg BASE_IMAGE=${BASE_IMAGE} guacamole
    - *push
