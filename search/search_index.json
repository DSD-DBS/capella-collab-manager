{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the official documentation of the Capella Collaboration Manager.</p> <p>To continue, please select one of the following options:</p> <ul> <li>I am a user of the platform or interested in its features:   User documentation</li> <li>I am a user of the platform interested in automating my tasks or integrating   with other systems: API Documentation</li> <li>I am a system administrator and want to learn how to install and configure   the platform: Administrator documentation</li> <li>I am a developer and want to learn how to extend the platform:   Developer documentation</li> </ul>"},{"location":"release-notes/","title":"Release Notes","text":"<ul> <li>Release notes of the Capella Collaboration Manager are available   here.</li> <li> <p>Session related release notes are available   here.</p> <ul> <li>JupyterLab release notes are available   here.</li> <li>capellambse release notes are available   here.  capellambse context diagrams release notes are available   here.</li> <li>Capella release notes are available   here.  TeamForCapella release notes are available   here.</li> <li>Papyrus release notes are available   here.</li> <li>pure::variants release notes are available   here.</li> </ul> </li> </ul>"},{"location":"admin/","title":"Introduction","text":"<p>Are you interested in the platform and want to integrate it into your environment? We like to know more about the use case so that we can take it into account in future development. Please feel free to contact us: set@deutschebahn.com</p> <p>You can also try out the platform locally. The README provides instructions for this. For production deployments you can learn more here: Production installation</p>"},{"location":"admin/backup-recovery/","title":"Backup & Recovery Concept","text":""},{"location":"admin/backup-recovery/#backup-and-recovery-concept","title":"Backup and Recovery Concept","text":"<p>The backup- and restore concept covers 3 components:</p> <ul> <li>Backend database backups</li> <li>Backups of personal workspaces</li> <li>Backups of project volumes</li> </ul>"},{"location":"admin/backup-recovery/#backend-database-backups","title":"Backend database backups","text":""},{"location":"admin/backup-recovery/#create-backup","title":"Create backup","text":"<p>If the Postgres database is hosted in the Kubernetes cluster, you can create a backup with:</p> <pre><code>kubectl exec -it deployment/${RELEASE_NAME:?}-backend-postgres -- pg_dump -U backend &gt; backend-dump.sql\n</code></pre>"},{"location":"admin/backup-recovery/#restore-backup","title":"Restore backup","text":"<pre><code>cat backend-dump.sql | kubectl exec -i deployment/${RELEASE_NAME:?}-backend-postgres -- psql -U backend\n</code></pre>"},{"location":"admin/backup-recovery/#backup-of-personal-workspaces-and-project-volumes","title":"Backup of personal workspaces and project volumes","text":"<p>It's recommended to store models in Git or TeamForCapella unless you have an automated backup strategy for personal workspaces and project volumes.</p> <p>Personal workspace can be backed up and restored via the CLI. The backups are not created automatically.</p>"},{"location":"admin/backup-recovery/#create-backup_1","title":"Create backup","text":"<p>Install the command line tool as described in the installation instructions. Verify the installation by executing:</p> <pre><code>python -m capellacollab.cli --help\n</code></pre> <p>Make sure that your <code>kubectl</code> configuration points to the correct cluster.</p> <p>Run the following command to get a list of all personal workspaces or project volumes:</p> <pre><code>python -m capellacollab.cli ws volumes\n</code></pre> <p>Find the name of the workspace you want to backup, then run the following command:</p> <pre><code>python -m capellacollab.cli ws backup \"${VOLUME_NAME:?}\"\n</code></pre> <p>This will produce two files, a <code>.tar.gz</code> and a <code>.json</code> side-car file. Make sure to keep both files as the side-car contains important information about the volume.</p>"},{"location":"admin/backup-recovery/#restore-backup_1","title":"Restore backup","text":"<p>Install the command line tool as described in the installation instructions. Verify the installation by executing:</p> <pre><code>python -m capellacollab.cli --help\n</code></pre> <p>Set up kubectl and point it to the correct cluster. Find the name of the workspace you want to backup, then run the following command:</p> <pre><code>python -m capellacollab.cli ws backup \"${VOLUME_NAME:?}\" \"${TARFILE:?}\"--storage-class-name \"${STORAGE_CLASS_NAME:?}\"\n</code></pre>"},{"location":"admin/cli/","title":"Command line tool","text":"<p>The Collaboration Manager repository contains a few tools that may come in handy when you're an administrator of a Collaboration Manager setup.</p> <p>The CLI (Command Line Interface) tool allows you to back up and restore user's workspaces.</p> <p>For the tools to work you'll need access to the Kubernetes cluster the Collaboration manager is running on. In particular the namespace used to spawn sessions.</p>"},{"location":"admin/cli/#installation","title":"Installation","text":"<p>In order to use the CLI tooling, you'll need to have a local copy of the collab-manager application and Python 3.12 installed.</p> <pre><code>git clone https://github.com/DSD-DBS/capella-collab-manager.git\ncd capella-collab-manager/backend\npython -m venv .venv\nsource .venv/bin/activate\npip install .\n</code></pre>"},{"location":"admin/cli/#usage","title":"Usage","text":"<p>Once your environment is set up, you can use the CLI tooling. The tooling is located in a module:</p> <pre><code>python -m capellacollab.cli --help\n</code></pre> <p>This gives you the help information. The CLI tool currently has a subcommand: <code>ws</code>, short for workspace.</p> <pre><code>Usage: python -m capellacollab.cli [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n  --help                          Show this message and exit.\n\nCommands:\n  ws\n</code></pre> <p>You can discover the CLI on your own by printing the help messages of the subcommands</p> <pre><code>python -m capellacollab.cli ws --help\npython -m capellacollab.cli ws backup --help\n</code></pre>"},{"location":"admin/configure-for-your-org/","title":"Configure for your Organization","text":""},{"location":"admin/configure-for-your-org/#configure-for-your-organization","title":"Configure for your Organization","text":"<p>When running the Collaboration Manager in production, you may want to provide information about the team responsible for it.</p> <p>You can set this information from the configuration page in the admin interface. Navigate to Settings, then Configuration, then edit the file to your liking.</p>"},{"location":"admin/configure-for-your-org/#about-your-organization","title":"About your Organization","text":"<p>You can set URLs to your organization's privacy policy and imprint. These are shown in the footer. The provider field should be used for the name of the team responsible for the Collaboration Manager.</p> <pre><code>metadata:\n    privacy_policy_url: https://example.com/privacy\n    imprint_url: https://example.com/imprint\n    provider: Systems Engineering Toolchain team\n    authentication_provider: OAuth2\n    environment: '-'\n</code></pre>"},{"location":"admin/configure-for-your-org/#logo-and-navigation-bar","title":"Logo and Navigation Bar","text":"<p>You can edit the logo, badge, and links in the navigation bar. This can be useful to brand the Collaboration Manager for your organization, remind users which environment they are in, or link to external resources.</p> <pre><code>navbar:\n    external_links:\n        - name: Grafana\n          service: grafana\n          role: administrator\n        - name: Prometheus\n          service: prometheus\n          role: administrator\n        - name: Documentation\n          service: documentation\n          role: user\n    logo_url: null\n    badge:\n        show: true\n        variant: auto\n        text: auto\n</code></pre> <p>In addition to the default service links, you can add your own by using <code>href</code> instead of <code>service</code>.</p> <pre><code>navbar:\n    external_links:\n        - name: Example\n          href: https://example.com\n          role: user\n</code></pre> <p>The <code>role</code> field and can be one of <code>user</code> or <code>administrator</code>. While this will hide the link from users without the appropriate role, it is not a security feature, and you should make sure that the linked service enforces the necessary access controls.</p> <p>To show the logo in the navigation bar, set the <code>logo_url</code> field to the URL of the image you want to use.</p> <p>The badge can be used to show the environment the user is in. The <code>variant</code> field can be set to <code>auto</code> (it will be determined by the environment), <code>success</code>, or <code>warning</code>. The <code>text</code> field will use the environment name if set to <code>auto</code>, or you can specify a custom text. If you don't want to show the badge, set <code>show</code> to <code>false</code>.</p>"},{"location":"admin/configure-for-your-org/#feedback","title":"Feedback","text":"<p>Configure SMTP server for feedback</p> <p>For feedback to be sent, you need to configure an SMTP server in the <code>values.yaml</code> of the Helm chart. Have a look at the <code>alerting.email</code> configuration.</p> <p>Capella Collaboration Manager can prompt users for feedback. This can be useful for learning about any potential issues users may be facing.</p> <p>There are several different types of feedback prompt:</p> <ul> <li>After a session: Prompt the user for feedback after they have manually   terminated a session.</li> <li>On the session card: Show a feedback button on the session card.</li> <li>In the footer: Show a feedback button in the footer.</li> <li>Interval: Prompt the user for feedback after a certain number of hours have   passed since the last prompt.</li> </ul> <pre><code>feedback:\n    enabled: true\n    after_session: true\n    on_footer: true\n    on_session_card: true\n    interval:\n        enabled: true\n        hours_between_prompt: 168\n    recipients: # (1)!\n        - test1@example.com\n        - test2@example.com\n    hint_text: Try to be specific. What happened? What were you doing?\n</code></pre> <p>Prompts that are associated with a session automatically include anonymized metadata about the session.</p> <ol> <li>Feedback will be sent by email to all addresses specified here.</li> </ol>"},{"location":"admin/configure-for-your-org/#beta-testing","title":"Beta-Testing","text":"<p>To test new images, you can enable the beta-testing feature. This will allow you specify a different image tag to use. Users can self-enroll as a beta-tester if you enable self-enrollment. Admins can always enroll themselves and others.</p> <pre><code>beta:\n    enabled: true\n    allow_self_enrollment: true\n</code></pre>"},{"location":"admin/installation/","title":"Installation","text":""},{"location":"admin/installation/#installation-of-the-collaboration-manager","title":"Installation of the Collaboration Manager","text":"<p>This guide will help you set up the Capella Collaboration Manager on a Kubernetes cluster. The setup of the basic installation is straightforward, but we'll also delve into the more complex TeamForCapella support that requires building custom Docker images.</p> <p>During development, we also took into account that the application can be installed in highly restricted environments. An internet connection is not necessarily required.</p>"},{"location":"admin/installation/#step-1-set-up-a-kubernetes-cluster","title":"Step 1: Set up a Kubernetes Cluster","text":"<p>Kubernetes allows us to make operations as simple as possible later on. Updates can be fully automated. In addition, Kubernetes allows us to ensure a secure operation through standardized security hardening.</p> <p>You can use an existing cloud service to create a Kubernetes cluster. We have running production deployments on Microsoft AKS and Amazon EKS. The application is designed in such a way that no cluster scope is necessary. All operations run at the namespace level, so it even runs in shared OpenShift clusters. But also if you simply have a Linux server at your disposal, this is no obstacle.</p> <p>If you already have a running cluster, have <code>kubectl</code> up and running and can reach the cluster, then you can skip this step.</p> <p>We provide instructions for some environments. If you set up the application in a different environment, please document the installation and obstacles that you find and we would be happy to receive a PR to help other users in the future.</p> microK8sk3dOpenShift <p>Info</p> <p>We have tested the instructions with Ubuntu Server 22.04.</p> <ol> <li> <p>Run steps 1-4 of the official microK8s <code>Getting started</code> guide.</p> </li> <li> <p>Enable all required add-ons:     <pre><code>microk8s enable hostpath-storage # For persistent storage\nmicrok8s enable rbac # For role-based access control\nmicrok8s enable ingress # For load balancing\n</code></pre></p> </li> <li>If you don't have any external registry available and TeamForCapella support is required, enable the registry:     <pre><code>microk8s enable registry\nexport DOCKER_REGISTRY=localhost:32000\n</code></pre></li> <li>Copy the <code>kubectl</code> configuration to the host, so that <code>helm</code> can pick it up:     <pre><code>mkdir -p $HOME/.kube\nmicrok8s config &gt; $HOME/.kube/config\nchmod 600 $HOME/.kube/config # Nobody else should be able to read the configuration\n</code></pre></li> <li> <p>Optional, but recommended: Set up a NFS for workspaces and Juypter file-shares.     The default <code>hostpath-storage</code> of microK8S doesn't enforce the specified capacity on PVCs.     This can be exploited by a user uploading so much data to their workspace that     the server goes out of disk storage.</p> <p>Please follow the official instructions: https://microk8s.io/docs/how-to-nfs.</p> <p>Make sure to update the <code>backend.storageClassName</code> in the <code>values.yaml</code> in step 6 to <code>nfs-csi</code>. All new project file-shares and personal workspaces will use the new storage class then.</p> <p>Set the IP address (in the storageclass and in <code>/etc/exports</code>) to the IP range of the microK8S nodes. When running on a single node, use the IP address of the node.</p> <p>User mapping for non-root containers</p> <p>If you want to run the session containers as non-root, you can set the <code>runAsUser</code> value in the <code>podSecurityContext</code> of the values.yaml. In the default configuration, <code>runAsUser</code> is set to <code>1004370000</code>.</p> <p>Unfortunately our setup NFS does not respect the <code>fsGroup</code> option. Therefore, all volumes are mounted with <code>nobody:nogroup</code> per default. This will lead to permission errors and crashing session containers.</p> <p>To fix it, change the <code>/etc/exports</code> file and modify the options for the create file-share to: <pre><code>(rw,sync,no_subtree_check,all_squash,anonuid=&lt;user-id-of-session-containers&gt;,anongid=0)\n</code></pre></p> <p>Replace <code>&lt;user-id-of-session-containers&gt;</code> with the value of the <code>runAsUser</code> value of the Kubernetes Pod security context.</p> <p>Then, apply the new configuration by running <code>sudo exportfs -ra</code>.</p> <p>Also, make sure that the <code>/srv/nfs</code> directory is owned by the user <code>1004370000</code>.</p> </li> </ol> <p>We are constantly working on expanding our documentation. This installation method is currently not documented. If it is relevant, please feel free to contact us at set@deutschebahn.com or open an issue in this repository.</p> <p>We are constantly working on expanding our documentation. This installation method is currently not documented. If it is relevant, please feel free to contact us at set@deutschebahn.com or open an issue in this repository.</p>"},{"location":"admin/installation/#step-2-validate-the-available-resources","title":"Step 2: Validate the Available Resources","text":"<p>The minimum required resources are 3 Kubernetes CPU cores and around 2,5GiB of memory for the management platform. Depending on the load, the instance can scale up and is limited to 10 Kubernetes CPU cores and ~8GiB of memory.</p> <p>The required resources for the sessions can be configured in the admin interface later on. However, for Eclipse based sessions we recommend a minimum of 0.4 Kubernetes CPU cores and 1.6Gi of memory. Those sessions can scale up until it reaches 2 Kubernetes CPU cores and 6Gi of memory.</p>"},{"location":"admin/installation/#step-3-set-up-the-required-namespaces-optional","title":"Step 3: Set up the Required Namespaces (Optional)","text":"<p>The Collaboration Manager requires two different namespaces. For security and overview reasons, they are separated:</p> <ul> <li> <p>Capella Collaboration Manager control namespace: In this namespace, we run   the core application. It has full control over the sessions namespace and   consists of the following services:</p> <ul> <li>Frontend</li> <li>Backend</li> <li>Documentation</li> <li>Guacamole</li> <li>Prometheus</li> <li>Grafana (Loki), can be disabled in the <code>values.yaml</code></li> </ul> </li> <li> <p>Sessions namespace. The namespace is controlled by the control namespace and   you won't need to touch it. In the session namespace, the following services   run:</p> <ul> <li>Storage for persistent workspaces</li> <li>Storage for project volumes</li> <li>Pipeline jobs for TeamForCapella to Git synchronization</li> <li>Session containers (Capella, Papyrus, Jupyter, pure::variants)</li> </ul> </li> </ul> <ol> <li> <p>Create the two required namespaces:</p> <pre><code>kubectl create namespace collab-manager # If you use another name, please update the following commands and use your namespace name.\nkubectl create namespace collab-sessions # If you use another name, please update the `values.yaml` accordingly.\n</code></pre> </li> <li> <p>Set the <code>collab-manager</code> as default namespace in the default context     (optional):</p> <pre><code>kubectl config set-context --current --namespace=collab-manager\n</code></pre> </li> </ol>"},{"location":"admin/installation/#step-4-install-helm","title":"Step 4: Install helm","text":"<p>Follow the official instructions to install Helm: Installing helm</p> <p>Verify that <code>helm</code> is working by executing the command:</p> <pre><code>helm version\n</code></pre>"},{"location":"admin/installation/#step-5-clone-the-github-repository","title":"Step 5: Clone the GitHub Repository","text":"<p>Navigate to a persistent location on your server, e.g. <code>/opt</code>. Then clone the GitHub repository by running:</p> <pre><code>git clone https://github.com/DSD-DBS/capella-collab-manager.git\n</code></pre>"},{"location":"admin/installation/#step-6-configure-the-environment-create-the-valuesyaml","title":"Step 6: Configure the Environment / Create the <code>values.yaml</code>","text":"<p>Copy the <code>values.yaml</code> to a persistent and secure location on your server or deployment environment. The <code>local</code> directory in the Collaboration Manager is gitignored. We recommend to put the custom <code>values.yaml</code> in this directory.</p> <p>Make sure to set restrictive permissions on the <code>values.yaml</code>:</p> <pre><code>chmod 600 values.yaml\n</code></pre> <p>Adjust all values according to your needs.</p> <p>Info</p> <p>You can overwrite individual images by setting the <code>docker.images.*</code> values. This is useful to set Guacamole to a fixed version to avoid restarts during updates, which would lead to session interruptions.</p>"},{"location":"admin/installation/#step-7-install-the-application-in-the-cluster","title":"Step 7: Install the Application in the Cluster","text":"<p>Run the following commands in the root directory of the repository:</p> <pre><code>helm dependency update ./helm\nhelm upgrade --install \\\n    --namespace collab-manager \\\n    --values &lt;path-to-your-custom-values.yaml&gt; \\\n    &lt;release-name&gt; \\\n    ./helm\n</code></pre>"},{"location":"admin/installation/#step-8-initialize-the-guacamole-database","title":"Step 8: Initialize the Guacamole Database","text":"<p>The Guacamole database is not initialized automatically. Run the following command to initialize the PostgreSQL database:</p> <pre><code>kubectl exec --container &lt;release-name&gt;-guacamole-guacamole deployment/&lt;release-name&gt;-guacamole-guacamole -- /opt/guacamole/bin/initdb.sh --postgresql | \\\n    kubectl exec -i deployment/&lt;release-name&gt;-guacamole-postgres -- psql -U guacamole guacamole\n</code></pre> <p>After the initialization, the Guacamole password defaults to <code>guacadmin</code>. We have to change it to a more secure password:</p> <ol> <li>Open http://localhost:8080/guacamole/ and login with <code>guacadmin</code> /    <code>guacadmin</code>.</li> <li>Click on the <code>guacadmin</code> user in the top-right corner of the screen, then    select \"Settings\".</li> <li>Select the tab \"Preferences\"</li> <li>In the \"Change password\" section, enter <code>guacadmin</code> as current password.    Generate a secure password and enter it for \"New password\" and confirm it.    Then, click \"Update password\"</li> <li>Log out and verify that the combination <code>guacadmin</code> / <code>guacadmin</code> no longer    works.</li> <li>Update the key <code>guacamole.password</code> in the <code>values.yaml</code> and repeat step 7.</li> </ol>"},{"location":"admin/installation/#step-9-check-the-application-status","title":"Step 9: Check the Application Status","text":"<p>Run <code>kubectl get pods</code> to see the status of all components. Once all containers are running, verify the installation state by running:</p> <pre><code>curl http://localhost/api/v1/health/general\n</code></pre> <p>It should return the following JSON:</p> <pre><code>{ \"guacamole\": true, \"database\": true, \"operator\": true }\n</code></pre> <p>If a value is false, check the backend logs for more information.</p>"},{"location":"admin/installation/#step-10-add-teamforcapella-support","title":"Step 10: Add TeamForCapella Support","text":"<p>TeamForCapella server required</p> <p>The setup of the TeamForCapella server and license server itself will not be part of this tutorial. To process, you'll need to have a running and reachable TeamForCapella server.</p> <p>Container registry required</p> <p>For the TeamForCapella support, you'll need to build own Docker images. In order to use this in the cluster, an external or internal container registry is required.</p> <ol> <li>Install GNU make &gt;=     3.82</li> <li>Navigate to the root of the capella-collab-manager repository.</li> <li>Clone the capella-dockerimages repository:     <pre><code>git clone https://github.com/DSD-DBS/capella-dockerimages\n</code></pre></li> <li> <p>Prepare the <code>capella/base</code> and <code>t4c/client/base</code> images according to the     Capella Docker images documentation (Only the preparation section is     needed):</p> <ul> <li><code>capella/base</code></li> <li><code>t4c/client/base</code></li> </ul> </li> <li> <p>Set the following environment variables:</p> <pre><code>export PUSH_IMAGES=1 # Auto-push images to the container registry after build\nexport DOCKER_REGISTRY=&lt;your-registry&gt; # Location of your remote or local container registry\nexport CAPELLA_BUILD_TYPE=offline # Don't download Capella during each build\nexport CAPELLA_VERSIONS=\"5.2.0 6.0.0 6.1.0\" # Space separated list of Capella versions to build\nexport CAPELLA_DROPINS=\"\" # Command separated list of dropins\n</code></pre> </li> <li> <p>Then, build the <code>t4c/client/remote</code> images (the one that we'll use in the     Collaboration Manager):</p> <pre><code>make t4c/client/remote\n</code></pre> </li> <li> <p>In the Collaboration Manager UI, change the docker image of the tool to     <code>&lt;registry&gt;/t4c/client/remote:&lt;capella-version&gt;-latest</code></p> </li> </ol>"},{"location":"admin/troubleshooting/","title":"Troubleshooting","text":""},{"location":"admin/troubleshooting/#administrator-troubleshooting","title":"Administrator Troubleshooting","text":""},{"location":"admin/troubleshooting/#cant-resolve-registry","title":"Can't resolve registry","text":"<pre><code>Get \"https://myregistry.localhost:12345/v2/\": dialing myregistry.localhost:12345 with direct connection: resolving host myregistry.localhost: lookup myregistry.localhost: no such host\n</code></pre> <p>If you get this error message, follow these instructions: https://k3d.io/v4.4.8/usage/guides/registries/#pushing-to-your-local-registry-address</p>"},{"location":"admin/uninstallation/","title":"Uninstallation","text":""},{"location":"admin/uninstallation/#uninstallation-of-the-collaboration-manager","title":"Uninstallation of the Collaboration Manager","text":"<p>We're sorry to see you go   If you have any suggestions for us to improve, please share them with us. Either privately via set@deutschebahn.com or via a GitHub issue.</p> <ol> <li> <p>If you want to uninstall the management portal, you can run the following     comment:</p> <pre><code>helm uninstall &lt;release-name&gt; -n &lt;namespace&gt; helm\n</code></pre> <p>or delete the management portal namespace:</p> <pre><code>kubectl delete namespace &lt;namespace&gt;\n</code></pre> </li> <li> <p>The previous command doesn't clean the sessions namespace. Please clean it     manually by running (this does also remove all persistent workspaces!):</p> <pre><code>kubectl -n &lt;sessions-namespace&gt; delete all --all\n</code></pre> <p>or just delete the namespace:</p> <pre><code>kubectl delete namespace &lt;sessions-namespace&gt;\n</code></pre> </li> </ol>"},{"location":"admin/update/","title":"Update","text":""},{"location":"admin/update/#update-the-collaboration-manager","title":"Update the Collaboration Manager","text":""},{"location":"admin/update/#update-the-management-portal","title":"Update the Management Portal","text":""},{"location":"admin/update/#update-to-a-newer-version","title":"Update to a newer version","text":"<ol> <li>Create a backup of the backend database    before updating.</li> <li>Check the    Release Notes    for any breaking changes or special instructions.</li> <li> <p>Either download the helm chart from the GitHub Releases or check-out the    revision of the version you'd like to update to:</p> <pre><code>git checkout ${VERSION:?}\n</code></pre> </li> <li> <p>Upgrade the Helm Chart, either by using the downloaded chart:</p> <pre><code>helm upgrade \\\n    --dependency-update \\\n    -f values.yaml \\\n    ${RELEASE_NAME:?} \\\n    collab-manager-${VERSION:?}$.tgz\n</code></pre> <p>or using the local Git repository:</p> <pre><code>helm upgrade \\\n    --dependency-update \\\n    -f values.yaml \\\n    ${RELEASE_NAME:?} \\\n    ./helm\n</code></pre> </li> <li> <p>Wait until all containers are up &amp; running. If a container can't be started    anymore, check the logs of the container for more information or    roll-back the update.</p> </li> </ol>"},{"location":"admin/update/#roll-back-to-a-previous-version","title":"Roll-back to a previous version","text":"<ol> <li> <p>Find out if there were any database migrations between the current version     and the version you'd like to roll-back to.</p> <p>You can do so with the GitHub Compare feature. Select the current version and the version you'd like to roll-back and check for any changes in the <code>backend/capellacollab/alembic</code> directory.</p> <p>If there are no changes, skip the next steps and run the update as usual.</p> </li> <li> <p>Scale down the backend deployment to 0:</p> <pre><code>kubectl scale deployment ${RELEASE_NAME:?}-backend --replicas=0\n</code></pre> </li> <li> <p>Restore the backup of the backend database to the state it was before the     update as described in the     restore documentation.</p> <p>Danger</p> <p>This will discard any changes made to the database after the update.</p> </li> <li> <p>Run the update as usual and use the version you'd like to roll-back to as     target version.</p> </li> </ol>"},{"location":"admin/update/#update-the-postgres-database","title":"Update the Postgres database","text":"<p>Warning</p> <p>Major PostgreSQL database updates can only be done with downtime. Plan it accordingly and communicate the downtime to your users in advance.</p> <p>If <code>database.backend.deploy</code> is set to <code>True</code> in your <code>values.yaml</code>, follow these instructions:</p> <ol> <li>Create a backup of the backend database.</li> <li>Make sure that the backup contains real data and is not empty.</li> <li>Change the <code>database.backend.internal.postgresVersion</code> to the desired    postgres version in the <code>values.yaml</code>.</li> <li> <p>Scale down the PostgreSQL deployment to 0:</p> <pre><code>kubectl scale deployment ${RELEASE_NAME:?}-backend-postgres --replicas=0\n</code></pre> </li> <li> <p>Delete the persistent volume claim (PVC) of the PostgreSQL instance:</p> <pre><code>kubectl delete pvc ${RELEASE_NAME:?}-volume-backend-postgres\n</code></pre> </li> <li> <p>Run a <code>helm upgrade</code> as described in the    \"Update to a newer version\" section.</p> </li> <li>Restore the database backup as described in the    restore documentation.</li> </ol> <p>If <code>database.backend.deploy</code> is set to <code>False</code> in your <code>values.yaml</code>, follow these instructions:</p> <ol> <li>Create a backup of the backend database.</li> <li>Upgrade the external PostgreSQL instance to the desired version. Please    refer to the    PostgreSQL documentation    for instructions on how to do this.</li> <li>If the PostgreSQL connection string has changed, change the    <code>database.backend.external.uri</code> field in the <code>values.yaml</code> to the new    connection URI. Then, run a <code>helm upgrade</code> as described in the    \"Update to a newer version\" section.</li> </ol>"},{"location":"admin/announcements/create/","title":"Announcements","text":"<p>Announcements can be used to inform users about changes, news or maintenance work. Announcements are displayed to all users, no matter their role.</p> <ol> <li>Navigate to <code>Menu</code> \u2192 <code>Settings</code></li> <li> <p>Fill in all required fields in the <code>Create new announcement</code> form.     </p> <p>What does the announcement level mean?</p> <p>The announcement level specifies the background color of the announcement. You can choose one of the following options: </p> <p> <code>primary</code> <code>secondary</code> <code>success</code> <code>danger</code> <code>warning</code> <code>info</code> </p> <p>Hint</p> <p>The announcement description supports markdown syntax.</p> <p><pre><code>You can use __bold__, *italic*, ~~strikethrough~~, and `code` text.\n</code></pre> Check the Markdown Guide for more information.</p> <p>Additionally, you can use HTML tags in the announcement description.</p> <p>Hint</p> <p>By default, announcements can be dismissed by users. If you want to create an announcement that cannot be dismissed, you can toggle the <code>Dismissible</code> checkbox.</p> </li> <li> <p>The announcement is now created and is displayed to all users:     </p> </li> </ol>"},{"location":"admin/authentication/","title":"Introduction","text":""},{"location":"admin/authentication/#authentication-methods","title":"Authentication Methods","text":"<p>Info</p> <p>If you want to authenticate against the API using a personal access token, please refer to the API documentation.</p> <p>The Capella Collaboration Manager is developed to work together with OpenID Connect (OIDC) compliant identity providers. Since we don't support any other authentication methods, it is required to have an OIDC compliant identity provider to use the Capella Collaboration Manager.</p> <p>The authentication has to be configured in the <code>backend.authentication</code> section of the <code>values.yaml</code>.</p> <p>If no running OpenID Connect server is available in your environment, you can set up Keycloak as an intermediate identity provider. Keycloak is an open-source identity and access management solution that supports many common protocols like OAuth 2.0, SAML 2.0, LDAP, and others.</p> <p>Learn more about how to integrate the Capella Collaboration Manager in Keycloak here.</p>"},{"location":"admin/authentication/keycloak/","title":"Keycloak","text":""},{"location":"admin/authentication/keycloak/#keycloak-as-identity-provider","title":"Keycloak as Identity Provider","text":"<p>This guide will help you set up Keycloak as an identity provider for the Capella Collaboration Manager (CCM). It focuses on setting up the connection between Keycloak and CCM. The setup of the connection between Keycloak and your identity provider is not covered.</p>"},{"location":"admin/authentication/keycloak/#install-keycloak","title":"Install Keycloak","text":"<p>If you don't already have a running Keycloak server, please follow the installation instructions in Keycloak - Getting Started.</p> <p>After this step, you should have access to the Keycloak admin console, which is required for the following steps.</p>"},{"location":"admin/authentication/keycloak/#register-the-ccm-client-in-keycloak","title":"Register the CCM Client in Keycloak","text":"<ol> <li>Below Manage click on Clients and then Create client:  </li> <li> <p>In General settings set the values as follows:</p> Key Value Client type OpenID Connect Client ID capella-collaboration-manager Name Capella Collaboration Manager Description Client used to authenticate users in the Capella Collaboration Manager Allow display in UI Personal preference <p></p> </li> <li> <p>In Capability config modify the default values as follows:</p> <ol> <li>Enable Client Authentication</li> <li>Disable Direct access grants</li> </ol> <p></p> </li> <li> <p>In Login settings set the values as follows:</p> Key Value Example value  (development environment) Root URL +  Home URL +  Web origins <code>{scheme}://{host}:{port}</code>  (URL of the CCM frontend) <code>http://localhost:4200</code> Valid redirect URIs <code>{scheme}://{host}:{port}/oauth2/callback</code> <code>http://localhost:4200/oauth2/callback</code> Valid post logout redirect URIs None - <p></p> </li> <li> <p>Click Save, which should create the client in Keycloak.</p> </li> <li> <p>Make the email claim optional. It is not required for the CCM.</p> <ol> <li>In the Clients tab, open the client details of the newly created client</li> <li>Click on Client scopes</li> <li>For the email scope, change the Assigned Type from Default to     Optional</li> </ol> <p></p> </li> </ol>"},{"location":"admin/authentication/keycloak/#configure-the-ccm-to-use-the-keycloak-client","title":"Configure the CCM to use the Keycloak Client","text":"<p>Update the <code>values.yaml</code> and set the following values for the <code>backend.authentication</code> section:</p> <pre><code>backend:\n  authentication:\n    endpoints:\n      wellKnown: [...]/.well-known/openid-configuration # (1)!\n\n    claimMapping: # (2)!\n      idpIdentifier: sub\n      username: preferred_username\n      email: email\n\n    scopes:\n      - openid\n      - profile\n      - offline_access\n\n    client:\n      id: capella-collaboration-manager # (3)!\n      secret: ... # (4)!\n\n    redirectURI: [...]/oauth2/callback # (5)!\n</code></pre> <ol> <li>To find out the well-known endpoint, click Realm Settings in Keycloak,    scroll down and click OpenID Endpoint Configuration, which should open the    configuration in a new tab. The well-known endpoint is the URL of the opened    page.</li> <li>Make sure that the mentioned claims are available in the identity token. You    can evaluate the claims available in the token via Keycloak: Open the client    details, click on the Client scopes tab and navigate to \"Evaluate\".</li> <li>Set the client.id to the value used when the client was created. If not    changed it should be capella-collaboration-manager.</li> <li>To find out the client secret, open the client details in the Keycloak admin    console. Open the Credentials tab and copy the Client Secret. Keep this    value confidential and generate a new client secret in case it gets leaked.</li> <li>Set the redirectURI to the CCM base url + /oauth2/callback</li> </ol> <p>Then redeploy the application using Helm.</p>"},{"location":"admin/ci-templates/gitlab/image-builder/","title":"Image builder","text":""},{"location":"admin/ci-templates/gitlab/image-builder/#image-builder-gitlab-cicd","title":"Image Builder (Gitlab CI/CD)","text":"<p>The image builder template builds the images and pushes them to any Docker registry.</p> <p>Please add the following section to your <code>.gitlab-ci.yml</code>:</p> <pre><code>include:\n    - remote: https://raw.githubusercontent.com/DSD-DBS/capella-collab-manager/${CAPELLA_COLLABORATION_MANAGER_REVISION}/ci-templates/gitlab/image-builder.yml\n</code></pre> <p>The build images are tagged with the revision they were build with (e.g., when running for main the tag would be <code>:main</code>). All characters matching the regex [^a-za-z0-9.] will be replaced with -.</p> <p>You have to add the following environment variables on repository level. Make sure to enable the \"Expand variable reference\" flag.</p> <ul> <li><code>PRIVATE_GPG_PATH</code>: Path to the private GPG key used to decrypt the   <code>secret.docker.json</code> file (More about this file below)</li> <li>Variables specifying how to name each image:<ul> <li><code>FRONTEND_IMAGE_NAME</code> (defaults to <code>capella/collab/frontend</code>)</li> <li><code>BACKEND_IMAGE_NAME</code> (default to <code>capella/collab/backend</code>)</li> <li><code>DOCS_IMAGE_NAME</code> (defaults to <code>capella/collab/docs</code>)</li> <li><code>GUACAMOLE_IMAGE_NAME</code> (defaults to <code>capella/collab/guacamole</code>)</li> </ul> </li> </ul> <p>This is the (minimal) configuration. For more advanced configuration options, please refer to the image-builder Gitlab template.</p>"},{"location":"admin/ci-templates/gitlab/image-builder/#docker-sops-file","title":"Docker SOPS File","text":"<p>We make use of SOPS files to store secrets used in the image builder template.</p> <p>Create a file <code>.sops.yaml</code> at the root level of the repository with the following structure:</p> <pre><code>creation_rules:\n    - path_regex: .*\n      encrypted_regex: ^(password|secret|adminPassword|uri|token)\n      key_groups:\n          - pgp:\n                - &lt;GPG fingerprint&gt;\n</code></pre> <p>Ensure that the GPG fingerprint of the Gitlab runner is present in the <code>.sops.yaml</code> such that it can decrypt the file.</p> <p>You need to have a directory <code>$TARGET</code> for each target with a <code>secret.docker.json</code> inside. You can create the <code>secret.docker.json</code> by running the following command:</p> <pre><code>sops edit ./$TARGET/secret.docker.json\n</code></pre> <p>Then, enter the following content:</p> <pre><code>{\n    \"registry\": \"&lt;registry&gt;\",\n    \"username\": \"&lt;username&gt;\",\n    \"password\": \"&lt;password&gt;\"\n}\n</code></pre> <p>Verify that you can open the secret file with <code>sops ./&lt;target&gt;/secret.docker.json</code>.</p>"},{"location":"admin/ci-templates/gitlab/k8s-deploy/","title":"Kubernetes deployment","text":""},{"location":"admin/ci-templates/gitlab/k8s-deploy/#kubernetes-deployment-gitlab-cicd","title":"Kubernetes Deployment (Gitlab CI/CD)","text":"<p>The Kubernetes deploy template is used to deploy the Capella Collaboration Manager to a Kubernetes cluster using Helm.</p> <p>Please add the following section to your <code>.gitlab-ci.yml</code>:</p> <pre><code>include:\n    - remote: https://raw.githubusercontent.com/DSD-DBS/capella-collab-manager/${CAPELLA_COLLABORATION_MANAGER_REVISION}/ci-templates/gitlab/k8s-deploy.yml\n</code></pre> <p>You have to add the following environment variables on repository level. Make sure to enable the \"Expand variable reference\" flag.</p> <ul> <li><code>PRIVATE_GPG_PATH</code>: Path to the private GPG key used to decrypt the   <code>secret.k8s.json</code> files.</li> <li><code>GRAFANA_HELM_CHART</code>: (Optional) - This variable is used to set the URL for   the Grafana Helm chart. It is useful if your deployment environment has   limited access, so you can specify a URL that is accessible for you.</li> </ul>"},{"location":"admin/ci-templates/gitlab/k8s-deploy/#sops-configuration","title":"SOPS configuration","text":"<p>We make use of SOPS files to store secrets used in the deployment template.</p> <p>Create a file <code>.sops.yaml</code> at the root level of the repository with the following structure:</p> <pre><code>creation_rules:\n    - path_regex: .*\n      encrypted_regex: ^(password|secret|adminPassword|uri|token)\n      key_groups:\n          - pgp:\n                - &lt;GPG fingerprint&gt;\n</code></pre> <p>Ensure that the GPG fingerprint of the Gitlab runner is present in the <code>.sops.yaml</code> such that it can decrypt the file.</p> <p>Create a file to store the Kubernetes configuration:</p> <pre><code>sops edit ./$TARGET/secret.k8s.json\n</code></pre> <p>The file has to contain the following content:</p> <pre><code>{\n    \"server\": \"&lt;k8s server&gt;\",\n    \"namespace\": \"&lt;namespace&gt;\",\n    \"release\": \"&lt;release&gt;\",\n    \"username\": \"&lt;username&gt;\",\n    \"token\": \"&lt;unencrypted token&gt;\"\n}\n</code></pre> <p>Another configuration file is the encrypted <code>values.yaml</code>. In this file you can overwrite values from the default <code>values.yaml</code>.</p> <p>Create the file with:</p> <pre><code>sops edit ./$TARGET/values.yaml\n</code></pre>"},{"location":"admin/ci-templates/gitlab/k8s-deploy/#gitlab-repository-tree","title":"Gitlab Repository Tree","text":"<p>The tree inside of your Gitlab repository should look like:</p> <pre><code>\u251c\u2500\u2500 .gitlab-ci.yml\n\u251c\u2500\u2500 .sops.yaml\n\u251c\u2500\u2500 target1\n\u2502   \u251c\u2500\u2500 values.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 secret.docker.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 secret.k8s.json\n\u251c\u2500\u2500 target2\n\u2502   \u251c\u2500\u2500 values.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 secret.docker.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 secret.k8s.json\n\u2514\u2500\u2500 ...\n</code></pre> <p>This is the (minimal) configuration. For more advanced configuration options, please refer to the k8s-deploy Gitlab template.</p>"},{"location":"admin/getting_started/","title":"Getting started","text":""},{"location":"admin/getting_started/#getting-started","title":"Getting Started","text":"<p>This guide describes the steps to get started with the Capella Collaboration Manager.</p> <p>Before you start, make sure you have a running environment. For instructions on how to set up such an environment, please refer to the Development installation guide.</p> <p>First open a browser and go to http://localhost:8080.</p> <p>You will be welcomed by a friendly screen and you can log in. The default setup is running an OAuth mock service for authentication.</p> <p></p> <p>As username, provide the <code>admin</code> for the admin user. If you have changed the username or want to test another user, enter your custom username.</p> <p></p> <p>You'll be returned to the Collaboration manager. Now you can start a session. Select Persistent Workspace and hit Request Session.</p> <p></p> <p>The system will now schedule and start a fresh workspace. Wait a bit for the workspace to be available</p> <p></p> <p>Once the session is ready, click Connect to Session and a new tab should open. After a few seconds you should see the Capella splash screen and a workspace will be shown in your browser.</p> <p></p>"},{"location":"admin/getting_started/#whats-next","title":"What's Next","text":"<p>This introduction only scratches the surface of what's possible with the Collaboration Manager.</p> <p>More advanced features include:</p> <ul> <li>Read-only models from Git</li> <li>Connect to a Team4Capella server (commercial product)</li> <li>Manage users and user access</li> </ul>"},{"location":"admin/monitoring/alerting/","title":"Alerting","text":""},{"location":"admin/monitoring/alerting/#alerts-in-unexpected-situations","title":"Alerts in unexpected situations","text":"<p>If something doesn't work as expected, it's important that system administrators will receive a notification.</p> <p>We use the Grafana Alertmanager to send alerts for some pre-defined error cases. If you're missing an alert rule, let us know via GitHub issues or open a PR and add it to the list of pre-defined rules.</p>"},{"location":"admin/monitoring/alerting/#configure-alerting","title":"Configure alerting","text":"<p>By default, firing alerts can only be viewed in the Grafana UI. You can configure additional contact points depending on your needs.</p> <p>A list of available contact points is available in the official Grafana documentation. The list includes chat services like Microsoft Teams but also email and webhook notifications. In addition, we recommend to disable \"Resolved\" emails for the configured contact points. The reason is that some alerts like failed jobs can't be resolved which can lead to unclear messages.</p> <p>Configure SMTP server for email alerting</p> <p>For email alerting, you need to configure an SMTP server in the <code>values.yaml</code> of the Helm chart. Have a look at the <code>alerting.email</code> configuration.</p> <p>By default, alerts are grouped. If you want to disable grouping, edit the default notification policy and set <code>...</code> as label for <code>Group by</code>: </p>"},{"location":"admin/monitoring/dashboards/","title":"Dashboards","text":""},{"location":"admin/monitoring/dashboards/#grafana-dashboards","title":"Grafana Dashboards","text":"<p>We provide a few pre-configured Grafana dashboards to monitor the sessions and TeamForCapella licenses.</p> <p>The Grafana dashboards are available to administrators and can be accessed via the \"Grafana\" link in the main menu. Select Dashboards to see a list of available dashboards:</p> <p></p> <p>You can add additional dashboards depending on your needs. If you think the dashboard could be helpful for others, please add the dashboard to the list of pre-defined dashboards and open a PR.</p>"},{"location":"admin/monitoring/frontend/","title":"Pipelines & Model Modifiers","text":""},{"location":"admin/monitoring/frontend/#pipeline-and-model-modifier-monitoring","title":"Pipeline and Model Modifier Monitoring","text":"<p>Metrics connected to projects and registered models are available in a custom dashboard in the frontend.</p> <p>In the dashboard, you can get a general overview of the status of pipelines and model modifiers registered models.</p> <p>You can find it by navigating to <code>Menu</code> &gt; <code>Settings</code> &gt; <code>Monitoring</code></p>"},{"location":"admin/monitoring/logging/explorer/","title":"Grafana Log Explorer","text":""},{"location":"admin/monitoring/logging/explorer/#grafana-log-explorer","title":"Grafana Log Explorer","text":"<p>Note</p> <p>The Log Explorer is only available if Grafana Loki was enabled during deployment.</p> <p>The Grafana Explorer can be used to view the logs of different components, such as the backend or user sessions. The logs are stored persistently, so administrators can also view the logs of already terminated sessions, for example to investigate an unexpected session termination.</p> <p>The Grafana Explorer is available to administrators and can be accessed from the Grafana link in the main menu. Select \"Explore\" to access the log explorer:</p> <p></p>"},{"location":"admin/monitoring/logging/explorer/#select-the-correct-source","title":"Select the Correct Source","text":"<p>Before you can view logs, you must make sure that the correct source is selected for the Capella Collaboration Manager. For this please select Loki (Capella Collaboration Manager) in the data source picker.</p> <p></p>"},{"location":"admin/monitoring/logging/explorer/#time-range-selector","title":"Time Range Selector","text":"<p>Even though Loki is quite efficient, it is still not feasible to always query all the data, so you need to select the time range for which you want to see the logs, or use the default \"Last 1 hour\" time range. To change the time range, open the drop-down menu in the top right corner and select the time range you want to see.</p> <p></p>"},{"location":"admin/monitoring/logging/explorer/#label-filters","title":"Label Filters","text":"<p>The application logs are stored in Loki, which uses labels to store and retrieve logs efficiently. This means that each log in Loki has a set of labels assigned to it, where a label is essentially a key-value pair.</p> <p>You have to select at least one label and a corresponding value to query logs. To do this, open the Select Label drop-down, select a label, and then click Select Value, which will load the values that exist for the label and allow you to select a value.</p> <p></p> <p>It is also possible to add multiple label filters by clicking the plus icon. When you do this, you must first select a label and value for the first filter, and when you select the second label, you will only see labels that can be combined with the first filter. For example, if the first filter limits the logs to backend logs, you won't be able to select anything else, while if the first filter limits the logs to session logs, you can further restrict the tool, version, etc.</p> <p>You can query logs of different components by selecting the following labels:</p> <ul> <li>Management portal logs: If you want to query the logs of the management   portal, make use of the <code>deployment</code> label to select a component of the   management portal.</li> <li>Session logs: If you want to query the logs of a specific session, you   can use the <code>username</code> label to select the user, and the <code>session_type</code> label   to select the session type. You can also use the <code>tool</code> and <code>version</code> labels   to further specify the session.</li> <li>Pipeline logs: If you want to query the logs of a pipeline, you can use   the <code>pipeline_run_id</code> label to select the pipeline run. The pipeline run   identifiers are listed in the pipeline run overview of a pipeline.</li> </ul> <p>Here is an example filter how to select all sessions for version 7.0.0.</p> <p></p>"},{"location":"admin/monitoring/logging/explorer/#operations","title":"Operations","text":"<p>Now as you have some logs selected by the label filters, there are some useful operations that you can run. Due to the large number of supported operations, this guide will only cover examples that are often used in our context.</p>"},{"location":"admin/monitoring/logging/explorer/#line-contains","title":"Line Contains","text":"<p>The line contains operations that essentially search the log messages for the text you want to find.</p> <p></p>"},{"location":"admin/monitoring/logging/explorer/#backend-logfmt","title":"Backend Logfmt","text":"<p>For our backend logs, we follow the logfmt, which provides more structure to the log lines and is especially useful when used with Loki/Grafana. The reason for this is that you can use the <code>Logfmt</code> operation to convert the key-value pairs in our logs to labels. These labels can then be used to filter the logs more fine-grained and efficiently.</p> <p>Here is an example operation sequence where you can query all logs that have the log level INFO and the HTTP method POST.</p> <p></p> <p>Theoretically, you could achieve the same result by changing two line contains operations, but it's inefficient, and you have to use the exact format as in the log message.</p> <p></p>"},{"location":"admin/monitoring/logging/explorer/#run-query","title":"Run Query","text":"<p>Once you have selected the appropriate label filters, added your operations, and the time range for which you want to see the logs, you can execute the query by clicking the query by clicking the Run Query button in the upper right corner. The logs will then be queried, which may take a moment depending on the time range you have selected and then displayed in the logs view (if you do not see it, just scroll down a bit).</p> <p></p>"},{"location":"admin/settings/model-sources/git/","title":"Git","text":""},{"location":"admin/settings/model-sources/git/#manage-git-instances","title":"Manage Git Instances","text":"<p>With Git instances, administrators can restrict the location of Git repositories.</p>"},{"location":"admin/settings/model-sources/git/#no-git-instance-defined","title":"No Git Instance Defined","text":"<p>When you don't want to define Git instances, users can use any location for their repositories. Some features, which require a specific instance, e.g., Gitlab, are not available.</p>"},{"location":"admin/settings/model-sources/git/#define-a-git-instance","title":"Define a Git Instance","text":"<ol> <li>Please navigate to <code>Menu</code> &gt; <code>Settings</code></li> <li>Select <code>Git</code> below <code>Model sources</code></li> <li> <p>You can see all existing instances (if any). To add a new integration,    please use the form below \"Add new integration\". You have to enter the    following information:</p> <ol> <li>Git Type<ul> <li>General: Works with every   Git server   that supports the Git protocol. Features like the diagram cache are   not available.</li> <li>Gitlab: Only works with Gitlab   instances (self-hosted / SaaS). With Gitlab, the diagram cache   integration can be used.</li> <li>GitHub: Works with the public GitHub   instance. With GitHub, the diagram cache integration can be used.</li> </ul> </li> <li>Name: Any name to identify the instance</li> <li>Instance base URL: The base URL of the instance, e.g.,    <code>https://gitlab.com</code>. For more information, see    Matching between models and instances</li> <li>API URL:<ul> <li>Gitlab: The API URL to the   Gitlab REST API. In most of   the cases: <code>{base_url}/api/v4</code>, e.g., <code>https://gitlab.com/api/v4</code>.</li> <li>GitHub: The API URL to the   GitHub REST API.   The url is <code>https://api.github.com</code>.</li> </ul> </li> </ol> </li> </ol> <p>Warning</p> <p>New repositories have to match at least one instance. Otherwise, they can not be added as model source to models.</p>"},{"location":"admin/settings/model-sources/git/#matching-between-models-and-instances","title":"Matching between Models and Instances","text":"<p>Models are matched with instances with a longest prefix match of the URL.</p> <p>Let's construct a short example. We have two Git instances:</p> <ul> <li>Instance one with the URL <code>https://git.example.com/</code></li> <li>Instance two with the URL <code>https://git.example.com/test</code></li> </ul> <p>A model with the path <code>https://git.example.com/test/test2.git</code> is now associated with instance two. A model with the path <code>https://git.example.com/test2/test2.git</code> would be associated with instance one.</p>"},{"location":"admin/settings/model-sources/t4c/","title":"Manage T4C Instances","text":""},{"location":"admin/settings/model-sources/t4c/#manage-t4c-instances","title":"Manage T4C Instances","text":"<p>To use Team for Capella, you must set up a license server and at least one T4C instance. To do this, go into the <code>Settings</code> section of the Collaboration Manager and select <code>T4C</code> below <code>Model sources</code>.</p>"},{"location":"admin/settings/model-sources/t4c/#define-a-t4c-license-server","title":"Define a T4C License Server","text":"<p>You can see all existing license servers (if any). To add a new license server, click on the \"Add a license server\" card. You have to enter the following information:</p> <ul> <li>Name: Any name to identify the license server</li> <li>License Server API: The URL of the license server API</li> <li>License Key: License key of your license server</li> </ul>"},{"location":"admin/settings/model-sources/t4c/#define-a-t4c-instance","title":"Define a T4C Instance","text":"<p>You can see all existing instances (if any). To add a new instance, click on the \"Add an instance\" card. You have to enter the following information:</p> <ul> <li>Name: Any name to identify the instance</li> <li>Capella version: Capella version that corresponds to the instance</li> <li>License Server: Select the license server that should be used for this   instance</li> <li>Protocol: Protocol that should be used to communicate between capella   sessions and the T4C server</li> <li>Host: Hostname of the T4C server</li> <li>Port, CDO Port, and HTTP Port Corresponding ports of your server</li> <li>REST API: REST API URL of the T4C server</li> <li>Username: Username with access to the REST API, required for   communication with the REST API</li> <li>Password: Password corresponding to username</li> </ul>"},{"location":"admin/settings/model-sources/t4c/#archive-a-t4c-instance","title":"Archive a T4C Instance","text":"<ol> <li>Click on the instance that you want to archive</li> <li>Click on the <code>Archive</code> button. When everything worked you should see a     messages stating \"Instance updated: The instance name is now archived\"</li> </ol> <p>An archived instance can no longer be selected when creating a new T4C model and is highlighted with a gray background and an <code>Archived</code> tag in the bottom right in the T4C instance overview. Existing linked T4C models and all repositories corresponding to the archived instance will continue to work as before.</p>"},{"location":"admin/settings/tools/","title":"General","text":""},{"location":"admin/settings/tools/#tools-management","title":"Tools Management","text":"<p>Tools are a central element of the Collaboration Manager. While Capella remains a core tool of the platform, we have generic tool support. This not only allows administrators to use additional tools such as Eclipse, pure::variants or Papyrus, but also to expand the platform with their own tools.</p> <p>A tool can be added if it can run in a Docker container and can be reached via RDP or any HTTP-based protocol.</p> <p>Tools can be found in various places on the platform:</p> <ul> <li>Models in projects are always assigned to a specific tool.</li> <li>Sessions are always started for a specific tool.</li> </ul> <p>Each tool has different versions and natures, which can be configured individually. Since different versions can be enabled in parallel, it helps to carry out complex migrations step by step.</p>"},{"location":"admin/settings/tools/#managing-tools","title":"Managing Tools","text":"<p>Tools are managed by the platform administrator. The tools management page allows the administrator to add, edit, and delete tools.</p> <p>The tool management page can be found at <code>Menu</code> &gt; <code>Settings</code> &gt; <code>Tools</code>. Here, you'll find several YAML editors.</p> <p>To change the configuration, edit the YAML configuration in the corresponding editor. Once you're done, click <code>Save</code>. We run several validation rules during saving to avoid configuration errors. You'll be notified about the save result in the bottom left corner via a notification.</p> <p>The <code>id</code> entry is only displayed for reference and cannot be changed, any changes of the <code>id</code> are ignored. When creating a new version or a new nature, the ID will be auto-assigned.</p> <p>To see all available options, please refer to the API documentation. A link to the corresponding route of the API documentation is provided on the tools management page.</p>"},{"location":"admin/settings/tools/pure_variants/","title":"pure::variants","text":""},{"location":"admin/settings/tools/pure_variants/#purevariants-integration","title":"<code>pure::variants</code> Integration","text":"<p>Info</p> <p>The <code>pure::variants</code> integration can be used to:</p> <ul> <li>Use pure::variants in a browser</li> <li>Use the pure::variants connector for Capella in a browser</li> <li>Manage licenses as a self-service on a project level</li> </ul>"},{"location":"admin/settings/tools/pure_variants/#setup-of-purevariants-integration","title":"Setup of <code>pure::variants</code> Integration","text":"<p>Warning</p> <p>The setup can only be performed by administrators. If a user wants to get access, please refer to Get access to the <code>pure::variants</code> license as user</p>"},{"location":"admin/settings/tools/pure_variants/#set-license-server-url-and-upload-licenselic","title":"Set License Server URL and Upload <code>license.lic</code>","text":"<ol> <li>Navigate to <code>Menu</code> &gt; <code>Settings</code></li> <li>Select <code>pure::variants</code> in the <code>Integrations</code> section.</li> <li>Modify the floating license server URL and confirm with <code>Update</code>.</li> <li>Upload the <code>license.lic</code> license file.</li> </ol>"},{"location":"admin/settings/tools/pure_variants/#add-the-purevariants-tool-to-your-instance","title":"Add the <code>pure::variants</code> Tool to your Instance","text":"<ol> <li>Navigate to <code>Menu</code> &gt; <code>Settings</code></li> <li>Select <code>Tools</code> in the <code>Core functionality</code> section.</li> <li>Click <code>Add a tool</code></li> <li>Enter any tool name, e.g., <code>Capella + pure::variants</code></li> <li>Specify the image for the persistent workspace. More information in the    Capella Docker images documentation:    <code>Capella + pure::variants</code></li> <li>Read-only workspaces and backup images are not supported. Leave the fields    empty.</li> <li>Click on <code>Create</code></li> <li>Enable the <code>pure::variants</code> integration and additional integrations if    applicable.</li> <li>Add tool versions (if using <code>Capella + pure::variants</code>, please use the    Capella version for a proper matching with the TeamForCapella server    version.)</li> <li>Add tool natures if applicable. If not tool nature is applicable, use a    placeholder.</li> </ol>"},{"location":"admin/settings/tools/pure_variants/#whitelist-a-model-for-purevariants","title":"Whitelist a Model for <code>pure::variants</code>","text":"<ol> <li>Open the project perspective of a selected project.</li> <li>If you don't have model with the <code>pure::variants</code> tool yet,    create one.</li> <li>Click on the model restrictions icon:  </li> <li>Enable <code>Allow the usage of pure::variants</code>.  </li> <li>All members of the project should now have access to the <code>pure::variants</code>    license server.</li> </ol>"},{"location":"admin/settings/tools/pure_variants/#get-access-to-the-purevariants-license-as-user","title":"Get Access to the <code>pure::variants</code> License as User","text":"<p>You have to get access to a project with at least one <code>pure::variants</code> whitelisted model. More information: Get access to a project. If you need a new <code>pure::variants</code> whitelisted model, please ask your administrator.</p>"},{"location":"admin/teamforcapella/full-setup/","title":"Full Setup & Integration of a TeamForCapella Project","text":"<p>This tutorial will guide you through the full setup of a new TeamForCapella-based project in the Collaboration Manager.</p> <ol> <li>Create a new project.</li> <li>Create a new tool model in the project you created,    select Capella as tool and the version you want to use.</li> <li>Link the TeamForCapella repository to the new model    if you have not done so already.</li> <li>Link a Git repository    if you have not done so already. It's required for the backup pipelines as    well as for the diagram cache and model complexity badge.</li> <li>Make sure that the right version and nature is configured for the tool    model! If they are not configured properly, you would not see the    TeamForCapella repository in the later export step.</li> <li>Spawn a new persistent session. Select    Capella as the tool, and select the previously selected tool version.</li> <li>Once Capella is open, create a new empty Capella project or import the    project that you want to initialize the TeamForCapella repository with.</li> <li>Export the model to the new TeamForCapella repository.</li> <li>Set up a backup pipeline.</li> <li>Set up the model complexity badge.</li> <li>Set up the diagram cache</li> <li>Verify that everything works as expected.</li> </ol>"},{"location":"admin/teamforcapella/migration/","title":"Update a TeamForCapella-based Model","text":""},{"location":"admin/teamforcapella/migration/#how-to-migrate-a-capella-model-to-a-higher-version-in-teamforcapella","title":"How to Migrate a Capella Model to a Higher Version (in TeamForCapella)","text":"<p>Warning</p> <p>A downgrade of Capella models is not possible.</p> <ol> <li>Open a new persistent session with the old Capella version.</li> <li>Check that nobody is connected to the remote repository:     See who is connected to a TeamForCapella repository</li> <li>Run a backup pipeline and verify that the latest changes are included in     the Git repository. If the Git repository is already up-to-date, there will     be no additional commit. In this case, you should check the status of the     pipeline run.</li> <li>Import the model from the TeamForCapella server via the Import wizard from     TeamForCapella into your local workspace:     Import a model from TeamForCapella</li> <li>If you're still connected to the old Capella repository (<code>*.team</code> project     in the workspace), delete the <code>*.team</code> project. Do not delete the     previously imported project!</li> <li>Terminate the session.</li> <li>Remove existing TeamForCapella to Git backup pipelines in the Collaboration     Manager: Remove a backup</li> <li>Add a new repository in the TeamForCapella server with the new Capella     version via the Capella Collaboration Manager:     Add a new TeamForCapella repository</li> <li>Unlink the old TeamForCapella repository (old Capella version) from your     model:     Unlink a TeamForCapella repository</li> <li>Update the model version to the newer Capella version:     Change model metadata</li> <li>Link the new TeamForCapella repository (new Capella version) to your model:     Link a TeamForCapella repository</li> <li>Create a new session with the new Capella version.</li> <li> <p>In your persistent workspace, execute the following steps:</p> <ol> <li>Right-click on the model in your workspace.</li> <li>Select <code>Migration</code> and <code>Migrate Project toward current version</code> </li> <li>A backup is not required as the latest version should still be available    on the old TeamForCapella server.    </li> </ol> </li> <li> <p>Export the model to the new TeamForCapella server via the Export wizard     from TeamForCapella:     Export a model to TeamForCapella</p> </li> <li>If you have CI/CD pipelines in the linked Git repositories which depend on     a specific Capella version, make sure to update them. For our pipelines it     might be necessary to update the <code>CAPELLA_VERSION</code> environment variable.</li> <li>Recreate the backup pipeline(s) for the new TeamForCapella server version:     Set up a TeamForCapella backup.     Start a pipeline run and verify that the changes are included in the Git     repository. Verify also that the CI/CD pipelines in the linked Git     repository are still working (if applicable).</li> <li>Use the capella-diff-tools     and compare the commit after the migration with the commit before the     migration. Verify that the changes are correct.</li> <li>Communicate to all users that the model has been migrated to a new version.     Users have to reimport the repositories in their personal workspace. Share     the following documentation page with all users:     Steps after a Model Migration</li> <li>At a later point, when the new repository is stable on the new server:     Remove the old TeamForCapella repository from the old server</li> </ol>"},{"location":"admin/teamforcapella/project-integration/","title":"Link a TeamForCapella Repository","text":""},{"location":"admin/teamforcapella/project-integration/#manage-the-teamforcapella-project-integration","title":"Manage the TeamForCapella Project Integration","text":"<p>For all actions, you need to navigate to <code>Projects</code>, and select the model sources button for the model.  </p>"},{"location":"admin/teamforcapella/project-integration/#link-a-teamforcapella-repository-to-a-project-model","title":"Link a TeamForCapella Repository to a Project Model","text":"<ol> <li>Click on <code>Use existing repository</code> in the <code>T4C Models</code> section.</li> <li>Select the TeamForCapella instance, the repository and enter a project     name. It is recommended to have the same name for the repository and the     Capella project.</li> <li>Click on <code>Save reference</code></li> <li> <p>The TeamForCapella reference should appear in the list of <code>T4C Models</code>.</p> <p>Info</p> <p>Users, who are members of the project, will get access to the repository during the next session start. The session token will not be updated for existing/open sessions.</p> </li> </ol>"},{"location":"admin/teamforcapella/project-integration/#unlink-a-teamforcapella-repository-from-a-project-model","title":"Unlink a TeamForCapella Repository from a Project Model","text":"<ol> <li>Select the TeamForCapella reference/integration from the list.</li> <li>Click on <code>Unlink</code> and confirm.</li> <li> <p>The TeamForCapella integration should not be listed anymore.</p> <p>Info</p> <p>Users, who are members of the project,  don't have to access to the repository anymore.  In addition, it is not listed in the dropdown menu anymore.</p> </li> </ol>"},{"location":"admin/teamforcapella/project-management/","title":"TeamForCapella Project Management","text":""},{"location":"admin/teamforcapella/project-management/#teamforcapella-project-management","title":"TeamForCapella Project Management","text":"<p>This page describes how to manage T4C projects in T4C repositories. It does not cover the management of T4C repositories. For the management of T4C repositories, refer to the TeamForCapella repository management guide.</p>"},{"location":"admin/teamforcapella/project-management/#create-a-new-teamforcapella-project","title":"Create a new TeamForCapella Project","text":"<ol> <li>Make sure that you have a T4C repository available. If not, refer to the    TeamForCapella repository management    guide.</li> <li>Create an empty Capella project in your workspace. Then, export it to the    T4C repository. For more information, refer to the    TeamForCapella project export    guide.</li> </ol>"},{"location":"admin/teamforcapella/project-management/#delete-a-teamforcapella-project","title":"Delete a TeamForCapella Project","text":"<ol> <li>Open a persistent Capella session and connect to it.</li> <li>Enable the TeamForCapella administration capability:  <code>Window</code> &gt;    <code>Preferences</code> &gt; <code>General</code> &gt; <code>Capabilities</code>:        Then close the dialog.</li> <li>Open the Capella search, type in <code>CDO Sessions (CDO)</code> and open it.</li> <li>Add a new CDO connection:    </li> <li> <p>Enter the connection string for the TeamForCapella server. There are two    ways to find the correct one. Make sure that the host is prefixed with    <code>tcp://</code>.</p> <ol> <li>Global administrators can navigate in the Collab Manager to <code>Menu</code> &gt;    <code>Settings</code> &gt; <code>Model sources</code> &gt; <code>TeamForCapella</code> &gt; Select the instance &gt;    <code>Host</code>.</li> <li>Project managers can use the TeamForCapella connection flow described in    the    Connect to a TeamForCapella repository    guide. In the <code>Connect to Shared Project</code> dialog, select the repository,    expand \"Connection information\" and copy the \"Repository host\".    </li> </ol> </li> <li> <p>Enter the repository name and confirm with \"Ok\".    </p> </li> <li>Open a CDO session transaction:    </li> <li>Expand the transaction, select the project to delete, right click, and    select \"Delete...\": </li> <li>Confirm the deletion with \"Ok\" and wait until the transaction is finished.    This can take a few minutes.</li> </ol>"},{"location":"admin/teamforcapella/repository-management/","title":"TeamForCapella Repository Management","text":""},{"location":"admin/teamforcapella/repository-management/#teamforcapella-repository-management","title":"TeamForCapella Repository Management","text":"<p>For all actions, you have to navigate to <code>Menu</code> &gt; <code>Settings</code> &gt; <code>TeamForCapella</code> (below <code>Model sources</code>). Select your instance. On the right side, you should see a card with the name <code>Manage T4C repositories</code>. In this card, you can see all existing repositories with their status.</p>"},{"location":"admin/teamforcapella/repository-management/#add-a-new-teamforcapella-repository","title":"Add a new TeamForCapella Repository","text":"<ol> <li>Enter the name of the repository in the <code>Repository name</code> field.</li> <li>Click on <code>Add T4C repository</code></li> <li>The status should be <code>INITIAL</code>. Please wait until the status changes to    <code>ONLINE</code></li> </ol>"},{"location":"admin/teamforcapella/repository-management/#startstop-a-teamforcapella-repository","title":"Start/Stop a TeamForCapella Repository","text":"<ol> <li>Select the repository from the list</li> <li>Click the <code>Start repository</code> or <code>Stop repository</code> button on the bottom    right.</li> </ol>"},{"location":"admin/teamforcapella/repository-management/#remove-a-teamforcapella-repository","title":"Remove a TeamForCapella Repository","text":"<p>Danger</p> <p>Deleted TeamForCapella repositories can not be restored. If you don't have backups, the models in the repository are not recoverable!</p> <ol> <li>Select the repository from the list</li> <li>Click the <code>Remove &lt;repository-name&gt;</code> button.</li> <li>Another dialog opens where you have to manually type in the name of the    repository. Copy&amp;Paste doesn't work here. You have to confirm the deletion.</li> <li>The repository should not appear in the list anymore if the deletion was    successful.</li> </ol>"},{"location":"admin/tools/configuration/","title":"Configuration","text":""},{"location":"admin/tools/configuration/#configuration-of-tools","title":"Configuration of tools","text":""},{"location":"admin/tools/configuration/#getting-started","title":"Getting started","text":"<p>To add a tool to the Collaboration Manager, it must fulfill the following requirements:</p> <ul> <li>The tool must run in a single Docker container (no sidecar containers).</li> <li>The Docker container has to run with a non-root user.</li> <li>The Docker image has to be deployed to a Docker registry, which is accessible   from the Collaboration Manager server environment.</li> <li>The tool must be exposed via RDP or HTTP/HTTPS.</li> <li>If the tool is exposed via RDP, it must accept basic authentication. For   HTTP-based tools, authentication is handled automatically via   pre-authentication.</li> <li>The container must expose a <code>/metrics</code> endpoint with an <code>idletime_minutes</code>   gauge metric in the OpenMetrics format, which returns the time in minutes   since the last user interaction. The metric is used to determine if the   session is idle and can be terminated.</li> <li>If you want to capture session logs and make them accessible via Grafana   Loki, they have to be written to disk (stdout/stderr are not persisted).</li> </ul>"},{"location":"admin/tools/configuration/#yaml-configuration","title":"YAML Configuration","text":"<p>For a full documentation of all available options, refer to the API documentation.</p>"},{"location":"admin/tools/configuration/#resources","title":"Resources","text":"<p>For each tool, you can define the resources which sessions of the tool can use. This is a significant option because it impacts cost and performance.</p> <p>An example configuration looks like this:</p> <pre><code>resources:\n    cpu:\n        requests: 0.4\n        limits: 2\n    memory:\n        requests: 1.6Gi\n        limits: 6Gi\n</code></pre> <p>The values are Kubernetes resource requests and limits. More information is available in the API documentation and the Kubernetes documentation.</p>"},{"location":"admin/tools/configuration/#environment-variables","title":"Environment variables","text":""},{"location":"admin/tools/configuration/#predefined-environment-variables","title":"Predefined environment variables","text":""},{"location":"admin/tools/configuration/#general-variables","title":"General variables","text":"<p>We set the following environment variables for each session container. The variables can be used by the tool:</p> Environment Variable Example value Description <code>CAPELLACOLLAB_SESSION_TOKEN</code> <code>KYYfLPiRVFijT7ZPhVx6DO0oPQcrfEInDetonD0nIKGnQmC9pWAfHq9xxKiYqUdj</code>              Token, which the tool has to use to authenticate the user.          <code>CAPELLACOLLAB_SESSION_COOKIE</code> <code>eyJhbGciOiJSUzI1N[...]V1EFxboar4jmZBmFA94fQf9284;</code> <code>ccm_session_token</code> cookie, which external tools can use to authenticate the user.               This is only available inside the redirect URL          <code>CAPELLACOLLAB_SESSION_API_TOKEN</code> <code>collabmanager_0KCYg7Rt3AzurbZgvTO74GEQzIoOg1DK</code>              Token which can be used against the Collaboration Manager API.             More information here.          <code>CAPELLACOLLAB_SESSION_ID</code> <code>tctszsirxuoohabwnhyhmzjdh</code>              Unique Session ID of the session, can be used for API request to the Collaboration Manager API.          <code>CAPELLACOLLAB_SESSION_CONNECTION_METHOD_TYPE</code> <code>guacamole</code> <code>http</code> or <code>guacamole</code>, depending on the requested connection method. <code>CAPELLACOLLAB_SESSION_REQUESTER_USERNAME</code> <code>janedoe</code> The username of the user who has requested the session. <code>CAPELLACOLLAB_SESSION_REQUESTER_USER_ID</code> <code>123</code> The ID of the user who has requested the session. <code>CAPELLACOLLAB_SESSION_CONTAINER_PORT</code> <code>8080</code>              The port that the application has to serve on.               HTTP port if connection method is <code>http</code> and RDP port if the connection method is <code>guacamole</code>.          <code>CAPELLACOLLAB_SESSION_PROVISIONING</code> <pre><code>[\n    {\n        \"url\": \"https://github.com/DSD-DBS/coffee-machine\",\n        \"revision\": \"main\",\n        \"depth\": 1,\n        \"entrypoint\": \"coffee-machine-demo.aird\",\n        \"nature\": \"model\",\n        \"path\": \"/models/coffee-machine/coffee-machine\"\n    }\n]\n</code></pre>              A list of dictionaries containing information about the models that were provisioned by the Collaboration Manager in the JSON format.              Each list item contains the following attributes:              - <code>url</code>: The URL of the Git repository.              - <code>revision</code>: The revision of the Git repository.              - <code>depth</code>: The depth that was used while cloning the Git repository.              - <code>entrypoint</code>: The entrypoint of the Git repository.              - <code>nature</code>: The nature of the model in the Collaboration Manager.              - <code>path</code>: The path to the model in the session.  <code>CAPELLACOLLAB_SESSIONS_SCHEME</code> <code>https</code>              HTTP scheme, can be <code>http</code> or <code>https</code> <code>CAPELLACOLLAB_SESSIONS_HOST</code> <code>sessions.example.com</code>              The hostname of the sessions environment.          <code>CAPELLACOLLAB_SESSIONS_PORT</code> <code>443</code>              The port of the sessions environment. Can be different to the port in <code>CAPELLACOLLAB_ORIGIN_HOST</code> if the sessions run on a different port (e.g. in our local non-cluster development environment).          <code>CAPELLACOLLAB_SESSIONS_BASE_PATH</code> <code>/session/2037430</code>              The base path that the session application has to serve requests on.               Only available if <code>CAPELLACOLLAB_SESSION_CONNECTION_METHOD_TYPE</code> is <code>http</code>.          <code>CAPELLACOLLAB_ORIGIN_BASE_URL</code> <code>https://frontend.example.com:443</code>              The origin host of the Collaboration Manager.             The tool has to set the <code>Content-Security-Policy</code> header to <code>frame-ancestors self {CAPELLACOLLAB_ORIGIN_HOST}</code>. Otherwise, the session viewer can't be used with the tool!          <code>CAPELLACOLLAB_API_BASE_URL</code> <code>http://dev-backend.collab-manager.svc.cluster.local:/api</code>              The API URL of the Collaboration Manager. The URL is only available from the session itself.          <code>WORKSPACE_DIR</code> <code>/workspace</code>              The directory of the (persistent) workspace the application should work with."},{"location":"admin/tools/configuration/#teamforcapella-variables","title":"TeamForCapella variables","text":"<p>In addition, the following variables are mounted if the TeamForCapella integration is enabled for the tool and the session type is <code>persistent</code>.</p> <p>For an explanation of those variables, refer to the Capella Docker images documentation.</p> Environment Variable Example value Description <code>T4C_LICENCE_SECRET</code> <code>1234123412341252435234523452345123423</code> License configuration for the TeamForCapella server. <code>T4C_JSON</code> <pre><code>[\n    {\n        \"repository\": \"repoCapella\",\n        \"host\": \"localhost\",\n        \"port\": 2036,\n        \"instance\": \"default\",\n        \"protocol\": \"ssl\"\n    }\n]\n</code></pre> JSON containing all repositories the user has access to. The format is described in the Capella Docker images documentation. <code>T4C_USERNAME</code> <code>admin</code>              Username of the session requester on the TeamForCapella server.             Can be used to authenticate against the repositories the user has access to.          <code>T4C_PASSWORD</code> <code>adfaw34rfqadsc</code>              Session token to authenticate against the TeamForCapella server.             The token is auto-created and valid for all TeamForCapella repositories the user has access to."},{"location":"admin/tools/configuration/#definition-of-custom-environment-variables","title":"Definition of custom environment variables","text":"<p>If you don't have the possibility to set environment variables in your tool, you can also define custom variables. You can also derive variables from pre-defined values.</p> <p>A variable is defined in the tool configuration:</p> <pre><code>environment:\n    MY_TOOL_USERNAME_WITH_PREFIX: 'test_{CAPELLACOLLAB_SESSION_REQUESTER_USERNAME}'\n</code></pre> <p>In this example, we map the <code>MY_TOOL_USERNAME</code> variable to the <code>MY_TOOL_USERNAME_WITH_PREFIX</code> environment variable and add the <code>test_</code> prefix. You can use f-string formatting with all pre-defined environment variables, but also define static variables.</p>"},{"location":"admin/tools/configuration/#connection-methods","title":"Connection methods","text":"<p>Each tool can support different connection methods. A connection methods defines how the user connects to a session of the tool. You can define up to 10 connections methods for each tool. The user can select the preferred connection method in the session request form.</p>"},{"location":"admin/tools/configuration/#guacamole","title":"Guacamole","text":"<p>To connect to RDP based tools, you can use our integration of Apache Guacamole. The Collaboration Manager will interact with the Guacamole API to create users and connections.</p> <p>Guacamole will try to authenticate with the following credentials against the RDP server. The RDP server has to run in the container and has to accept those credentials:</p> <pre><code>username=\"techuser\"\npassword=CAPELLACOLLAB_SESSION_TOKEN\n</code></pre> <p>The configuration looks like:</p> <pre><code>connection:\n    methods:\n        - identifier: &lt;unique-identifier&gt;\n          type: guacamole\n          name: Classic\n          description: ''\n          ports:\n              metrics: 9118\n              rdp: 3389\n          environment:\n              ENVIRONMENT_VARIABLE: test\n</code></pre>"},{"location":"admin/tools/configuration/#https","title":"HTTP(S)","text":"<p>You can use any web-based tool with the HTTP(S) connection method. The configuration looks like:</p> <pre><code>connection:\n    methods:\n        - identifier: &lt;unique-identifier&gt;\n          type: http\n          name: HTTP\n          description: ''\n          ports:\n              metrics: 9118\n              http: 10000\n          environment:\n              ENVIRONMENT_VARIABLE: test\n          redirect_url: '{CAPELLACOLLAB_SESSIONS_SCHEME}://{CAPELLACOLLAB_SESSIONS_HOST}:{CAPELLACOLLAB_SESSIONS_PORT}{CAPELLACOLLAB_SESSIONS_BASE_PATH}'\n          cookies:\n              token: '{CAPELLACOLLAB_SESSION_TOKEN}'\n</code></pre>"},{"location":"admin/tools/configuration/#authentication","title":"Authentication","text":"<p>Since version 3.1.0 of the Collaboration Manager, it is no longer necessary for the tool itself to handle the authentication. Instead, the Collaboration Manager automatically authenticates all users via pre-authentication with session tokens.</p>"},{"location":"admin/tools/configuration/#internal-communication","title":"Internal communication","text":"<p>Sessions can communicate with the Collaboration Manager API. In addition, sessions of the same user can communicate via inter-session communication.</p> <p>Here is an example of how to use the API to identify another session and send a request to it. You can run the code from a Jupyter session.</p> <pre><code>import os\nimport requests\n\nbackend_url = os.getenv(\"CAPELLACOLLAB_API_BASE_URL\")\nuser_id = os.getenv(\"CAPELLACOLLAB_SESSION_REQUESTER_USER_ID\")\nusername = os.getenv(\"CAPELLACOLLAB_SESSION_REQUESTER_USERNAME\")\npat = os.getenv(\"CAPELLACOLLAB_SESSION_API_TOKEN\")\n\nresponse = requests.get(f\"{backend_url}/v1/users/{user_id}/sessions\", auth=(username, pat))\n\ninternal_endpoint = response.json()[0][\"internal_endpoint\"]\nrequests.get(f\"http://{internal_endpoint}\").content\n</code></pre>"},{"location":"admin/tools/configuration/#logging","title":"Logging","text":"<p>The Capella Collaboration Manager collects logs of sessions automatically and makes them available in Grafana for monitoring.</p> <ul> <li>The logs must be written to disk, stdout and stderr of the container are not   persisted.</li> <li>The log collector scans all files with a file ending of <code>.log</code> below   <code>/var/log/session</code> (Subdirectories are scanned too, but avoid large file   structures).</li> <li>Optional: For better filtering and searching, log the messages in the   logfmt format. Grafana Loki has an inbuilt   parser for logfmt.</li> </ul>"},{"location":"admin/tools/configuration/#configuration-examples","title":"Configuration examples","text":"<p>To help you configure your tools, we provide some examples as part of our Capella Docker images repository</p> Capella/Papyrus/EclipseJupyter <pre><code>name: Eclipse # (1)\nintegrations:\n  t4c: true # (2)\n  pure_variants: false # (3)\nconfig:\n  resources:\n    cpu:\n      requests: 0.4\n      limits: 2\n    memory:\n      requests: 1.6Gi\n      limits: 6Gi\n  environment:\n    RMT_PASSWORD: \"{CAPELLACOLLAB_SESSION_TOKEN}\"\n    ECLIPSE_PROJECTS_TO_LOAD: \"{CAPELLACOLLAB_SESSION_PROVISIONING}\"\n  connection:\n    methods:\n      - id: guacamole\n        type: guacamole\n        name: Guacamole\n        description: Guacamole doesn't support session sharing.\n        ports:\n          metrics: 9118\n          rdp: 3389\n        environment:\n          CONNECTION_METHOD: xrdp\n      - id: xpra\n        type: http\n        name: Xpra\n        description: Xpra supports session sharing.\n        ports:\n          metrics: 9118\n          http: 10000\n        environment:\n          XPRA_SUBPATH: \"{CAPELLACOLLAB_SESSIONS_BASE_PATH}\"\n          CONNECTION_METHOD: xpra\n          XPRA_CSP_ORIGIN_HOST: \"{CAPELLACOLLAB_ORIGIN_BASE_URL}\"\n        redirect_url: \"{CAPELLACOLLAB_SESSIONS_SCHEME}://{CAPELLACOLLAB_SESSIONS_HOST}:{CAPELLACOLLAB_SESSIONS_PORT}{CAPELLACOLLAB_SESSIONS_BASE_PATH}/?floating_menu=0&amp;sharing=1&amp;path={CAPELLACOLLAB_SESSIONS_BASE_PATH}/\"\n        cookies:\n          token: \"{CAPELLACOLLAB_SESSION_TOKEN}\"\n  monitoring:\n    prometheus:\n      path: /prometheus\n  provisioning:\n    directory: /models\n    max_number_of_models: null\n  persistent_workspaces:\n    mounting_enabled: true\n</code></pre> <ol> <li> <p>Use a clear and short name for the tool, e.g. <code>Capella</code>, <code>Papyrus</code> or <code>Eclipse</code>.</p> </li> <li> <p>Activate if <code>TeamForCapella</code> support is needed. Set it to <code>false</code> for <code>Papyrus</code> and <code>Eclipse</code>.</p> </li> <li> <p>For <code>pure::variants</code> support, set the value to <code>true</code>.</p> </li> </ol> <pre><code>name: Jupyter\nintegrations:\n  t4c: false\n  pure_variants: false\nconfig:\n  resources:\n    cpu:\n      requests: 1\n      limits: 2\n    memory:\n      requests: 500Mi\n      limits: 3Gi\n  environment:\n    JUPYTER_PORT: \"8888\"\n    JUPYTER_TOKEN: \"{CAPELLACOLLAB_SESSION_TOKEN}\"\n    CSP_ORIGIN_HOST: \"{CAPELLACOLLAB_ORIGIN_BASE_URL}\"\n    JUPYTER_BASE_URL: \"{CAPELLACOLLAB_SESSIONS_BASE_PATH}\"\n    JUPYTER_ADDITIONAL_DEPENDENCIES: \"\"\n  connection:\n    methods:\n      - id: jupyter\n        type: http\n        name: Direct Jupyter connection (Browser)\n        description: The only available connection method for\n          Jupyter.\n        ports:\n          metrics: 9118\n          http: 8888\n        environment: {}\n        redirect_url: \"{CAPELLACOLLAB_SESSIONS_SCHEME}://{CAPELLACOLLAB_SESSIONS_HOST}:{CAPELLACOLLAB_SESSIONS_PORT}{CAPELLACOLLAB_SESSIONS_BASE_PATH}/lab?token={CAPELLACOLLAB_SESSION_TOKEN}\"\n        cookies: {}\n        sharing:\n          enabled: True\n  monitoring:\n    prometheus:\n      path: /prometheus\n  provisioning:\n    directory: /models\n    max_number_of_models: null\n  persistent_workspaces:\n    mounting_enabled: true\n</code></pre>"},{"location":"api/","title":"Introduction","text":""},{"location":"api/#automate-tasks-with-our-api","title":"Automate tasks with our API","text":"<p>Our API is designed to be simple and easy to use. It is based on RESTful principles and uses standard HTTP methods. This means that you can use the API to automate tasks such as creating and managing projects, sessions, and users.</p> <p>Warning</p> <p>We try to keep the API as stable as possible, but we cannot guarantee that it will not change in the future. If you are using the API, make sure to check our release notes for any breaking changes.</p>"},{"location":"api/#api-documentation","title":"API Documentation","text":"<p>Note</p> <p>The API documentation is only available via the documentation of Collaboration Manager instances. Only in this case you'll be able to open the links below. You'll see the API documentation matching the version of the Collaboration Manager instance you are using.</p> <p>It is not available on:</p> <ul> <li>GitHub Pages</li> <li>Local non-cluster development environments</li> <li>ReadTheDocs</li> </ul> <p>Please use these links to access the API documentation:</p> <ul> <li> SwaggerUI (Interactive SwaggerUI   documentation)</li> <li> ReDoc (Interactive ReDoc   documentation)</li> <li> OpenAPI Specification, formerly Swagger Specification   (JSON)</li> </ul>"},{"location":"api/#authentication","title":"Authentication","text":"<p>To authenticate against the API you can use Personal Access Tokens (PAT).</p>"},{"location":"api/#pat-creation","title":"PAT Creation","text":"<p>To create a personal access token (PAT) you can go to <code>Menu</code> &gt; <code>Tokens</code>. Every token requires a title, description, and expiration date. In addition, the token only has access to the provided scope. In the API documentation you'll find the required permissions for each route.</p> <p>Info</p> <p>The token which is generated will disappear after leaving the page. Make sure you save it - you won't be able to access it again.</p> <p>Important</p> <p>All requests are made in the name of the user who issued the token and are logged accordingly. If you lose, share, or publish a token you must revoke it immediately and inform your system administrator team.</p>"},{"location":"api/#revoke-a-pat","title":"Revoke a PAT","text":"<p>In order to revoke a token go to <code>Menu</code> &gt; <code>Token</code>. There you can see a list of all tokens that are associated with your account. By clicking on the delete button, you can delete a token, which will no longer be valid for authentication.</p>"},{"location":"api/#pat-usage","title":"PAT Usage","text":"<p>You can use the token in place of a password for basic authentication against the API as in the following examples.</p>"},{"location":"api/#example-with-python","title":"Example with Python","text":"<pre><code>import requests\n\nbase_url = \"example.com\" # Replace with the base URL of your Collaboration Manager instance\nusername = \"...\"\ntoken = \"...\"\n\nrequests.get(\n    f\"https://{base_url}/api/v1/projects\",\n    auth=(username, token)\n)\n</code></pre>"},{"location":"api/#example-with-curl","title":"Example with cURL","text":"<p>With <code>cURL</code> you can use the following command to fetch the list of projects:</p> <pre><code>curl -u ${USERNAME}:${TOKEN} https://${BASE_URL}/api/v1/projects\n</code></pre>"},{"location":"api/#example-with-capellambse","title":"Example with <code>capellambse</code>","text":"<p>Another example is working with the diagram cache of py-capellambse. The implementation of the Capella modelling tool <code>capellambse</code> uses Python and lets you read and write models. For more information have a look at the documentation or the GitHub repository.</p> <pre><code>import capellambse\n\nbase_url = \"example.com\" # Replace with the base URL of your Collaboration Manager instance\nusername = \"...\"\ntoken = \"...\"\npath_to_aird = \"...\"\n\nmodel = capellambse.model.MelodyModel(\n  path=path_to_aird,\n  diagram_cache={\n    \"path\": f\"https://{base_url}/api/v1/projects/{project_slug}/models/{model_slug}/diagrams/%s\",\n    \"username\": username,\n    \"password\": token,\n  }\n)\n</code></pre>"},{"location":"development/","title":"Introduction","text":"<p>Thanks for your interest in our project. Contributions are always welcome!</p> <p>We are committed to fostering a welcoming, respectful, and harassment-free environment. Be kind!</p> <p>If you have questions, ideas or want to report a bug, feel free to open an issue. Or go ahead and open a pull request to contribute code. In order to reduce the burden on our maintainers, please make sure that your code respects the acceptance criteria for pull requests.</p> <p>Info</p> <p>The \"Developer Documentation\" focuses on the development of the Collaboration Manager itself. If you want to use our API to automate tasks, refer to the API documentation instead.</p>"},{"location":"development/#setup-of-a-local-development-environment","title":"Setup of a Local Development Environment","text":"<p>In addition to the local k3d deployment, we have a local development environment. This environment includes automatic reloading of the frontend and backend, providing direct feedback instead of long build iterations.</p> <p>In any case, start with the local k3d deployment. The k3d cluster is required for the development environment.</p>"},{"location":"development/#requirements","title":"Requirements","text":"<ul> <li><code>Python</code> &gt;= 3.12</li> <li><code>Docker</code></li> <li><code>GNU Make</code></li> <li><code>Node.js</code> &gt;= v22</li> <li><code>Angular CLI</code></li> </ul>"},{"location":"development/#backend-configuration","title":"Backend Configuration","text":"<p>The backend uses various configuration settings. You can find them in the <code>backend/config</code> directory. A <code>config.yaml</code> with default values will be generated the first time you run the application.</p> <p>Hint: If you already have the local k3d deployment running, then no configuration values need to be adjusted.</p>"},{"location":"development/#getting-started","title":"Getting Started","text":"<p>To get started, run the following command in the root of the repository for the initial setup (only required once):</p> <pre><code>corepack enable\n(cd backend &amp;&amp; make install)\n(cd frontend &amp;&amp; pnpm i)\n(cd docs &amp;&amp; make install)\n</code></pre> <p>Then, run the following command to start the dev environment:</p> <pre><code>make dev\n</code></pre> <p>If everything went well, the frontend and backend should be running now:</p> <ul> <li>Frontend</li> <li>Backend healthcheck</li> <li>Backend API documentation</li> <li>Documentation</li> <li>Storybook</li> </ul>"},{"location":"development/#spawn-and-access-sessions-in-the-cluster","title":"Spawn and Access Sessions in the Cluster","text":"<p>You can also spawn sessions in the development environment, but it requires a running local k3d deployment.</p> <p>Sessions are secured with pre-authentication. If you use the same private key in the cluster and locally, the token issued in the development environment will also be accepted in the development k3d cluster. To synchronize the keys, run the following command:</p> <pre><code>make synchronize-rsa-keys\n</code></pre>"},{"location":"development/#general-notes","title":"General Notes","text":""},{"location":"development/#rest-apis","title":"REST APIs","text":"<p>We use REST APIs for the communication between frontend and backend. Please follow the RESTful web API design best practises.</p>"},{"location":"development/#git","title":"Git","text":"<p>The commit messages have to follow the Conventional Commits specification.</p> <p>In general, we use pre-commit hooks to enforce coding standards. To set up the pre-commit hooks, please run the following commands:</p> <pre><code>uv tool install pre-commit --with pre-commit-uv\npre-commit install\n</code></pre>"},{"location":"development/docs/","title":"Documentation","text":""},{"location":"development/docs/#documentation","title":"Documentation","text":"<p>It's important to have a good and up-to-date documentation for the Collaboration Manager. Documentation is an accessible way to share knowledge for developers, administrators and users. It can also be used by support teams to resolve issues more efficiently.</p>"},{"location":"development/docs/#development-setup","title":"Development Setup","text":"<p>Navigate to the <code>docs</code> folder from the command line. Executing the command <code>make install</code> followed by <code>make serve</code> will build and host the documentation for viewing locally in a browser at http://127.0.0.1:8081/. This live preview of the documentation automatically refreshes to reflect any changes made to its source files until the <code>make serve</code> process is terminated.</p>"},{"location":"development/docs/#style-guide","title":"Style guide","text":""},{"location":"development/docs/#titles","title":"Titles","text":"<p>When writing the documentation we are using title case in the <code>Chicago Manual of Style</code>. In addition, personal names/ names of packages are written according to their documentation.</p>"},{"location":"development/docs/#cross-linking-between-pages","title":"Cross-linking between pages","text":"<p>When referencing other pages in the documentation, use relative links to the corresponding <code>.md</code> file. <code>MkDocs</code> will resolve the link.</p> <p>Warning</p> <p>Do not use absolute links to other <code>.md</code> files in the same documentation, those will break the links when the documentation is built.</p>"},{"location":"development/docs/#move-documentation-files","title":"Move documentation files","text":"<p>When moving documentation files, add a redirect from the old location to the new location. This will prevent any pre-existing links still pointing to the old direction from breaking. This can be done by adding a line to the <code>mkdocs.yml</code> file:</p> <pre><code>plugins:\n    - redirects:\n          redirect_maps:\n              'path/to/old/template.md': 'path/to/new/template.md' # Reason for the move\n</code></pre>"},{"location":"development/docs/#tree-structure","title":"Tree structure","text":"<p>The documentation is split into four main sections, each with its own subsections:</p> Path Name Description /user User documentation              For users of the Collaboration Manager. It contains information about how to use the platform and its features.             The content should be written in a way that it is understandable for non-technical users.          /user/project Project documentation              This section shall describe how to create, update and delete projects. It also contains information about the project settings and the project access management, as well as backup pipelines, tool models, diagram cache model sources and the model complexity badge.          /user/sessions Sessions documentation              Describes tool-independent session features. It contains information how to create persistent and read-only sessions.          /user/tools Tools documentation              Tool-specific content belongs here. Examples include Capella-related topics such as workflows for TeamForCapella and Git.             Jupyter, Papyrus and `pure::variants` configurations should also be documented here.  /api API documentation              This section describes the external Collaboration Manager API usage.          /admin System Administrator documentation For System administrators and businesses, who are interested in administering their own instances. /development Development documentation For developers who want to contribute to the Collaboration Manager. It contains information about the development setup, the architecture and the code style."},{"location":"development/pull_requests/","title":"Pull Request Acceptance Criteria","text":""},{"location":"development/pull_requests/#pull-request-acceptance-criteria","title":"Pull Request Acceptance Criteria","text":"<p>To reduce the burden on our maintainers, all PRs must meet the following criteria before we start the review process. If the acceptance criteria are not met, please mark the PR as a draft.</p> <ul> <li>All GitHub Action pipelines have to be green. If in individual cases the   pipeline cannot be fixed independently or the pipeline failure is unrelated   to the PR, then this should be justified in a comment in the pull request.</li> <li>The adapted code was sensibly covered with tests. Codecov will indicate the   test coverage with a comment.</li> <li>New features must be documented in the user documentation. If changes are   made to existing functionality, the existing documentation must be adapted.</li> <li>Frontend changes must always be mobile optimized / responsive. You can find   the requirements here.</li> <li>Migration scripts must also be written for changes to database models. They   can be auto-generated, more information can be found   here.</li> <li>The PR and commit descriptions describe the changes in a comprehensible way.   Breaking changes must be marked as such. Commit messages have to follow the   Conventional Commits   specification.</li> <li>If there are conflicts with the main branch, they must be resolved.</li> <li>The frontend code must follow our   frontend code style guide.</li> <li>The backend code must follow our   backend code style guide.</li> <li>Make sure that all raised exceptions use our   custom exception classes, which can be resolved by   the frontend.</li> <li>For each changed or added component in the frontend, a storybook story must   be created. You can find more information here.</li> </ul> <p>Once all acceptance criteria are met, you can mark the PR as ready for review and a maintainer will review it.</p>"},{"location":"development/security-scanning/","title":"Security scanning","text":""},{"location":"development/security-scanning/#security-scanning","title":"Security Scanning","text":""},{"location":"development/security-scanning/#code-scanning","title":"Code Scanning","text":"<p>The frontend and backend code is scanned for vulnerabilities using CodeQL. The scanning results are available in the GitHub Security tab.</p> <p>All containers are scanned in the pipeline automatically.</p>"},{"location":"development/security-scanning/#secret-scanning","title":"Secret Scanning","text":"<p>Secrets are scanned automatically by GitHub.</p>"},{"location":"development/security-scanning/#container-scanning","title":"Container Scanning","text":"<p>The built Docker images are scanned for high and critical vulnerabilities using Trivy.</p>"},{"location":"development/troubleshooting/","title":"Troubleshooting","text":""},{"location":"development/troubleshooting/#development-troubleshooting","title":"Development Troubleshooting","text":""},{"location":"development/troubleshooting/#the-k3d-registry-is-unreachable","title":"The <code>k3d</code> Registry is Unreachable","text":"<p>If the k3d registry is unreachable, i.e. the <code>make reach-registry</code> command fails with errors like \"Could not resolve host\", <code>k3d-myregistry.localhost</code> isn't resolved properly to <code>127.0.0.1</code>. To resolve this, you can try the following options:</p> <ul> <li> <p>On Debian/Ubuntu based systems, you can install nss-myhostname.   <code>nss-myhostname</code> resolves all subdomains of localhost to localhost:</p> <pre><code>sudo apt install libnss-myhostname\n</code></pre> </li> <li> <p>Add the following line to the <code>/etc/hosts</code> on the host machine:     <pre><code>127.0.0.1 k3d-myregistry.localhost\n</code></pre></p> </li> </ul> <p>After applying the steps, verify that the registry is reachable by running <code>make reach-registry</code> again.</p>"},{"location":"development/backend/access-control/","title":"Access Control","text":""},{"location":"development/backend/access-control/#access-control","title":"Access Control","text":"<p>Routes can be protected with access control.</p> <p>Access control consists of a resource and a verb. A combination of these two is called a permission. Those permissions are grouped together into a scope. A role has access to a scope. There are two different types of scopes: A global scope and a project scope.</p> <p>A good overview over all available permissions can be found on the token creation page (<code>Menu</code> &gt; <code>Tokens</code> in the frontend). To see which permissions are needed for a specific route, you can consult the API documentation.</p>"},{"location":"development/backend/access-control/#protect-a-route","title":"Protect a route","text":"<p>To protect a route, add a dependency to the route definition. The required permission will be automatically added to the API documentation.</p>"},{"location":"development/backend/access-control/#global-scope","title":"Global scope","text":"<p>To protect a project route, add the following dependency to the route definition:</p> <pre><code>from capellacollab.permissions import injectables as permissions_injectables\nfrom capellacollab.permissions import models as permissions_models\n\n@router.get(\n    \"\",\n    dependencies=[\n        fastapi.Depends(\n            permissions_injectables.PermissionValidation(\n                required_scope=permissions_models.GlobalScopes(\n                    admin=permissions_models.AdminScopes(\n                        configuration={permissions_models.UserTokenVerb.GET}\n                    )\n                )\n            ),\n        )\n    ]\n)\ndef example_route():\n    ...\n</code></pre> <p>To access this route, the UPDATE verb of the configuration resource in the admin group of the global scope is required.</p> <p>To restrict a route to logged in users, but without any required permissions, use the following dependency:</p> <pre><code>from capellacollab.permissions import injectables as permissions_injectables\n\n@router.get(\n    \"\",\n    dependencies=[\n        fastapi.Depends(\n            permissions_injectables.PermissionValidation(required_scope=None)\n        )\n    ]\n)\ndef example_route():\n    ...\n</code></pre>"},{"location":"development/backend/access-control/#project-scope","title":"Project scope","text":"<p>To protect a project route, add the following dependency to the route definition:</p> <pre><code>from capellacollab.permissions import models as permissions_models\nfrom capellacollab.projects.permissions import (\n    injectables as projects_permissions_injectables,\n)\nfrom capellacollab.projects.permissions import (\n    models as projects_permissions_models,\n)\n\n@router.get(\n    \"\",\n    dependencies=[\n        fastapi.Depends(\n            projects_permissions_injectables.ProjectPermissionValidation(\n                required_scope=projects_permissions_models.ProjectUserScopes(\n                    root={permissions_models.UserTokenVerb.UPDATE}\n                )\n            )\n        )\n    ]\n)\ndef example_route():\n    ...\n</code></pre> <p>To access this route, the UPDATE verb of the root resource in the corresponding project is required.</p>"},{"location":"development/backend/code-style/","title":"Code Style","text":""},{"location":"development/backend/code-style/#general","title":"General","text":"<p>We base our code style on a modified version of the Google style guide for Python code. The key differences are:</p> <ul> <li> <p>Docstrings: The Numpy style guide applies here.</p> <p>When writing docstrings for functions, use the imperative style, as per PEP-257. For example, write \"Do X and Y\" instead of \"Does X and Y\".</p> </li> <li> <p>Overridden methods: If the documentation did not change from the base   class (i.e. the base class' method's docstring still applies without   modification), do not add a short docstring \u00e1 la \"See base class\". This lets   automated tools pick up the full base class docstring instead, and is   therefore more useful in IDEs etc.</p> </li> <li> <p>Linting: Use ruff for static code analysis, and mypy for static type   checking.</p> </li> <li> <p>Formatting: Use ruff as code auto-formatter. The maximum line length is   79, as per PEP-8. This setting should be automatically picked up from the   <code>pyproject.toml</code> file. The reason for the shorter line length is that it   avoids wrapping and overflows in side-by-side split views (e.g. diffs) if   there's also information displayed to the side of it (e.g. a tree view of the   modified files).</p> <p>Be aware of the different line length of 72 for docstrings. We currently do not have a satisfactory solution to automatically apply or enforce this.</p> <p>Note that, while you're encouraged to do so in general, it is not a hard requirement to break up long strings into smaller parts. Additionally, never break up strings that are presented to the user in e.g. log messages, as that makes it significantly harder to grep for them.</p> </li> <li> <p>Typing: We do not make an exception for <code>typing</code> imports. Instead of   writing <code>from typing import SomeName</code>, use <code>import typing as t</code> and access   typing related classes like <code>t.TypedDict</code>.</p> <p>Use the new syntax and classes for typing introduced with Python 3.10.</p> <ul> <li>Instead of <code>t.Tuple</code>, <code>t.List</code> etc. use the builtin classes <code>tuple</code>,   <code>list</code> etc.</li> <li>For classes that are not builtin (e.g. <code>Iterable</code>),   <code>import collections.abc as cabc</code> and then use them like <code>cabc.Iterable</code>.</li> <li>Use PEP-604-style unions, e.g. <code>int | float</code> instead of   <code>t.Union[int, float]</code>.</li> <li>Use <code>... | None</code> (with <code>None</code> always as the last union member) instead of   <code>t.Optional[...]</code> and always explicitly annotate where <code>None</code> is   possible.</li> </ul> </li> <li> <p>Python style rules: For conflicting parts, the ruff code style wins. If   you have set up <code>ruff</code> correctly, you don't need to worry about this though   :)</p> </li> <li>When working with <code>dict</code>s, consider using <code>t.TypedDict</code> instead of a more   generic <code>dict[str, float|int|str]</code>-like annotation where possible, as the   latter is much less precise (often requiring additional <code>assert</code>s or   <code>isinstance</code> checks to pass) and can grow unwieldy very quickly.</li> <li>Prefer <code>t.NamedTuple</code> over <code>collections.namedtuple</code>, because the former uses   a more convenient <code>class ...:</code> syntax and also supports type annotations.</li> </ul>"},{"location":"development/backend/code-style/#conventions","title":"Conventions","text":""},{"location":"development/backend/code-style/#imports","title":"Imports","text":"<ol> <li> <p>Always use <code>from x import y</code> or <code>from x import y as z</code> when importing     modules. The only exception is when you are importing a high-level package     or module, such as <code>import fastapi</code></p> </li> <li> <p>Given that we often have identical file names across our modules and     submodules, adhering to the Google style guide can lead to naming conflicts     during imports. To address this, we distinguish between the following two     cases:</p> <ol> <li> <p>Importing a module from the current directory: In this case, we do not    need to rename the module and can use it as is. For instance, if we are    in <code>capellacollab.projects.toolsmodels</code>, we can simply import the <code>crud</code>    and <code>model</code> modules like this: <code>from . import crud, model</code>.</p> </li> <li> <p>Importing a module from a different directory: In this scenario, we    must add an <code>as xy</code> suffix to avoid naming conflicts with the first    case. We follow this pattern:</p> <p><code>from capellacollab.extensions.&lt;extension&gt; import submodule as &lt;extension&gt;_&lt;submodule&gt;</code></p> <p>For example, if we are in <code>capellacollab.sessions</code> and want to import <code>crud</code> from <code>capellacollab.projects.toolsmodels</code>, we would do it like this:</p> <p><code>from capellacollab.projects.toolmodels import crud as toolmodels_crud</code></p> </li> </ol> </li> <li> <p>Only use relative imports up to one level above the current one. This means     you should use <code>from . import y</code> for the current module and     <code>from .. import y as z</code> for one level above. For all other imports beyond     this level, use the full path as described in 3.</p> </li> </ol>"},{"location":"development/backend/code-style/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>All SQLAlchemy models should have <code>Database</code> as a prefix, e.g.,   <code>DatabaseProject</code> or <code>DatabaseUser</code>.</li> </ul>"},{"location":"development/backend/database-migration/","title":"Database Migration","text":""},{"location":"development/backend/database-migration/#create-database-migration-scripts","title":"Create Database Migration Scripts","text":"<p>To create an upgrade script automatically (this will compare the current database state with the models):</p> <pre><code>alembic revision --autogenerate -m \"Commit message\"\n</code></pre>"},{"location":"development/backend/exception/","title":"Exception Handling","text":""},{"location":"development/backend/exception/#exception-handling","title":"Exception Handling","text":"<p>Various errors can occur in the backend, which must be made understandable to the end user and the developers when calling the API.</p> <p>In order to maintain consistency and benefit from automatic exception registration, define exceptions in a route-specific exceptions.py file in the following manner:</p> exceptions.py<pre><code>from fastapi import status\nfrom capellacollab.core import exceptions as core_exceptions\n\nclass UserNotFoundError(core_exceptions.BaseError): # (1)!\n    def __init__(\n        self, username: str | None = None, user_id: int | None = None # (2)!\n    ):\n        super().__init__(\n            status_code=status.HTTP_404_NOT_FOUND, # (3)!\n            title=\"User not found\", # (4)!\n            reason=f\"The user '{username or user_id}' doesn't exist.\", # (5)!\n            err_code=\"USER_NOT_FOUND\" # (6)!\n        )\n\n    @classmethod\n    def openapi_example(cls) -&gt; \"UserNotFoundError\":  # (7)!\n        return cls(\"john_doe\", -1)\n</code></pre> <ol> <li>Exceptions should be defined as subclasses of BaseError from the core    exceptions module.</li> <li>Any additional data beyond the required BaseError parameters can be supplied    when initializing an exception.</li> <li>Required: Supply the corresponding HTTP response status code for the    exception. More information about status codes:    https://developer.mozilla.org/en-US/docs/Web/HTTP/Status</li> <li>Required: Supply a descriptive title for the exception. This will be    displayed in the frontend.</li> <li>Required: Supply the reason the exception occurred. This will be displayed    in the frontend. It should contain context for classification and should be    user-friendly, or contain information on a resolution or next step.</li> <li>Required: Supply a unique error code (as string). This can be evaluated in    the frontend to identify a specific error, or more easily filtered for in    logs.</li> <li>Required: Implement the <code>openapi_example</code> class method to provide an    example of the exception in the OpenAPI documentation.</li> </ol>"},{"location":"development/backend/exception/#openapi-examples","title":"OpenAPI Examples","text":"<p>To make exceptions visible as response in the OpenAPI documentation, you can either reference the exception in the route or a dependency used by the function.</p> <p>To reference an exception in a route, add it the <code>responses</code> attribute:</p> routes.py<pre><code>from capellacollab.core import responses\n\nfrom . import exceptions\n\n@router.get(\n    \"\",\n    response_model=str,\n    responses=responses.translate_exceptions_to_openapi_schema(\n        [\n            exceptions.UserNotFoundError,\n        ]\n    ),\n)\ndef example_route():\n    ...\n</code></pre> <p>To reference an exception in a dependency, define it as attribute:</p> injectables.py<pre><code>import dataclasses\n\nfrom . import exceptions\n\n@dataclasses.dataclass(eq=False)\nclass UserInjectable:\n    exceptions = [exceptions.UserNotFoundError]\n\n    def __call__(self,) -&gt; None:\n        ...\n</code></pre>"},{"location":"development/backend/extensions/","title":"Extension Modules","text":"<p>In order to make the whole backend more consistent, it is divided into different modules. This is to ensure that these can be outsourced without major impacts and that other modules can be added as \"plugins\".</p> <p>An extension has the following structure: </p> <pre><code>extension\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 crud.py\n\u251c\u2500\u2500 injectables.py\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 routes.py\n\u2514\u2500\u2500 ...\n</code></pre> <p>The different components are explained in the following section.</p>"},{"location":"development/backend/extensions/#extension-modules","title":"Extension Modules","text":""},{"location":"development/backend/extensions/#__init__py","title":"<code>__init__.py</code>","text":"<p>Code to be called to initialize a module.</p>"},{"location":"development/backend/extensions/#crudpy","title":"<code>crud.py</code>","text":"<p>All <code>CRUD</code> (Create, read, update and delete) related operations. They should be used to access the database. They should be used to access the database, in case there are no existing injectables.</p> <p>There should not be much logic in the <code>crud.py</code> files (really just creating, reading, updating and deleting) models in the database.</p>"},{"location":"development/backend/extensions/#injectablespy","title":"<code>injectables.py</code>","text":"<p>In the <code>injectables</code> module, we define useful functions that allow to retrieve resources by simply defining the resource as parameter of the fastapi route and using the injectable function as dependency (i.e., <code>resource: ResourceType = Depends(injectableFunction)</code>). By using these injectables, we reduce the code duplication, since we include logic (such as checking whether a project exists) into the injectable function, and the readability of the code is increased.</p>"},{"location":"development/backend/extensions/#modelspy","title":"<code>models.py</code>","text":"<p>In the <code>models</code> module, all <code>pydantic</code> and <code>SQLAlchemy</code> models should be defined. In general, we use the <code>Database</code> prefix for <code>SQLAlchemy</code> models, e.g., <code>DatabaseProject</code>.</p>"},{"location":"development/backend/extensions/#routespy","title":"<code>routes.py</code>","text":"<p>The <code>routes</code> module should include all fastAPI routes.</p>"},{"location":"development/backend/extensions/#_1","title":"<code>...</code>","text":"<p>Other submodules can of course be created and are usually also useful if logic needs to be implemented.</p>"},{"location":"development/backend/profiling/","title":"Profiling","text":""},{"location":"development/backend/profiling/#profile-backend-routes","title":"Profile Backend Routes","text":"<p>Profiling can be useful if you want to examine the performance of specific backend routes.</p>"},{"location":"development/backend/profiling/#enable-profiling","title":"Enable profiling","text":"<p>In the <code>config.yaml</code>, set the <code>logging.profiling</code> key to <code>True</code>. Then, call the route you want to profile with the <code>profile</code> query parameter set to <code>True</code>.</p> <p>For example, to profile the <code>/api/v1/metadata</code> route, you would call <code>/api/v1/metadata?profile=True</code> in the browser. It will return a HTML report.</p> <p>Info</p> <p>Synchronous routes are not supported properly. If you want to profile a synchronous route, add <code>async</code> to the route definition.</p> <pre><code>@router.get(...)\ndef metadata():\n    ...\n</code></pre> <p>becomes</p> <pre><code>@router.get(...)\nasync def metadata():\n    ...\n</code></pre> <p>More Information on GitHub</p>"},{"location":"development/backend/technology/","title":"Technology Overview","text":"<p>We use some different libraries in the backend. Here is a quick overview.</p>"},{"location":"development/backend/technology/#fastapi","title":"FastAPI","text":"<p>FastAPI is used to serve the backend API endpoints.</p>"},{"location":"development/backend/technology/#sqlalchemy","title":"SQLAlchemy","text":"<p>We use SQLAlchemy as ORM for our PostgreSQL database.</p>"},{"location":"development/backend/technology/#alembic","title":"Alembic","text":"<p>Alembic is used for database migrations.</p>"},{"location":"development/frontend/code-style/","title":"Code Style","text":""},{"location":"development/frontend/code-style/#naming-conventions","title":"Naming Conventions","text":""},{"location":"development/frontend/code-style/#crud-functions","title":"Crud Functions","text":""},{"location":"development/frontend/code-style/#creating-resource","title":"Creating Resource","text":"<p>For creating a resource one should use <code>create</code> as a prefix followed by the resource one wants to create (e.g., <code>createProject(...): Observable&lt;Project&gt;</code>)</p>"},{"location":"development/frontend/code-style/#retrieving-resources","title":"Retrieving Resources","text":"<p>In general, one should use <code>get</code> as prefix for a function that retrieves and returns resources. In case, one wants to get a list of all resources use <code>get + &lt;resource type&gt; + s</code> as function name (e.g., <code>getProjects</code>). In case, one wants to get a specific resource use <code>get + &lt;resource type&gt; + By + &lt;property&gt;</code> as function name (e.g., <code>getProjectByName(name: string)</code>). The only exception to this rule is the case where one wants to get a resource by its identifier where the <code>By + &lt;property&gt;</code> part can be omitted (e.g., <code>getProject(id: number)</code>).</p> <p>In some services, we use the concept of having a static representation of a resource or a list of resources as observable inside the service. For example,</p> <pre><code>private _gitModel = new BehaviorSubject&lt;GetGitModel | undefined&gt;(undefined);\nprivate _gitModels = new BehaviorSubject&lt;GetGitModel[] | undefined&gt;(undefined);\n\nreadonly gitModel = this._gitModel.asObservable();\nreadonly gitModels = this._gitModels.asObservable();\n</code></pre> <p>In this case, we use the prefix <code>load</code> to retrieve the data but instead of returning it the data is published to all subscribers. However, the naming rules from above also apply here (e.g., <code>loadGitModels</code> to publish all git models to the <code>gitModels</code> observable and <code>loadGitModelById</code> to publish only one git model to the <code>gitModel</code> observable)</p>"},{"location":"development/frontend/customize/","title":"Customization","text":""},{"location":"development/frontend/customize/#customize-the-frontend","title":"Customize the Frontend","text":"<p>You can customize the frontend by using a custom theme and a custom favicon:</p> <ul> <li>If you like to use your custom favicon, please copy it to <code>src/favicon.ico</code></li> </ul>"},{"location":"development/frontend/routes/","title":"Routes","text":""},{"location":"development/frontend/routes/#frontend-routes","title":"Frontend Routes","text":"<p>For consistency, we have a strict structure for our frontend route URIs. The structure is based on REST, but not completely the same due to the limitations of the unavailable request methods.</p> <ul> <li><code>/resources</code> for the resource overview, e.g., <code>/projects</code> for the projects   overview</li> <li><code>/resources/action</code> for a specific action (not related to a specific instance   of the resource), e.g., <code>/projects/create</code> to create a project. Possible   actions are:<ul> <li><code>create</code></li> <li><code>delete</code></li> <li>or any other action if the action is not used to <code>create</code> or <code>delete</code> a   resource.</li> </ul> </li> <li><code>/resources/action/subaction</code> for a specific action related to a parent   action, e.g., <code>/project/:name/models/create/source</code> to go to the source stage   of the model creation.</li> <li><code>resource/:name</code> to access a single instance of type resource.</li> <li><code>resource/:name/childresource</code> to access a single child resource of a   specific instance from type resource.</li> </ul>"},{"location":"development/frontend/routes/#examples","title":"Examples","text":"<p>Valid routes are:</p> <ul> <li><code>/project/test/models/create</code> is a valid route to create a model in the   project <code>test</code>.</li> <li><code>/projects</code> is a valid route for the overview of projects.</li> </ul> <p>These are not valid:</p> <ul> <li><code>/project/create</code> (<code>project</code> should be plural)</li> <li><code>/models</code> (<code>models</code> is a child resource of <code>projects</code>, therefore it should be   <code>/projects/:id/models</code>)</li> </ul>"},{"location":"development/frontend/storybook/","title":"Storybook","text":""},{"location":"development/frontend/storybook/#storybook","title":"Storybook","text":"<p>Storybook is a tool for developing UI components in isolation. Stories are automatically build and pushed to Chromatic in the pipeline and visual changes in stories are detected automatically.</p> <p>In addition, Storybook can be used for easy testing of components locally.</p>"},{"location":"development/frontend/storybook/#run-storybook-locally","title":"Run storybook locally","text":"<p>To run Storybook locally, execute the following command:</p> <pre><code>make -C frontend storybook\n</code></pre>"},{"location":"development/frontend/storybook/#prepare-a-component","title":"Prepare a Component","text":"<p>Before you can write a story for a component, you need to prepare the component. Storybook can only recognize all imports when the component is defined as standalone and all required modules are specified explicitly.</p> <pre><code>@Component({\n  standalone: true,\n  imports: [\n    ... // (1)\n  ],\n  ...\n})\n</code></pre> <ol> <li> <p>All imports that are required for the component have to be defined here     (previously, they had to be defined in the <code>app.module.ts</code>)</p> <p>Warning</p> <p>Make sure to import the <code>RouterLink</code> if you use the <code>routerLink</code> attribute in the HTML template.  Otherwise, links will break without warning.</p> </li> </ol>"},{"location":"development/frontend/storybook/#add-a-story-and-documentation","title":"Add a Story and Documentation","text":"<p>In the same directory of the component, add a file <code>{component_name}.stories.ts</code> and use the following code as a template:</p> <pre><code>import { Meta, moduleMetadata, StoryObj } from '@storybook/angular';\nimport { Component } from './component-name.component';\n\nconst meta: Meta&lt;YourComponent&gt; = {\n    title: 'Your Component',\n    component: YourComponent,\n};\n\nexport default meta;\ntype Story = StoryObj&lt;YourComponent&gt;;\n\nexport const ExampleStory: Story = {\n    args: {},\n};\n</code></pre>"},{"location":"development/frontend/storybook/#mock-angular-services","title":"Mock Angular services","text":"<p>You can mock services with the <code>moduleMetadata</code> decorator in Storybook. Here is one example how to mock the projectUser to display the component for different access levels:</p> <pre><code>class MockProjectUserService implements Partial&lt;ProjectUserService&gt; {\n    role: ProjectUserRole;\n\n    constructor(role: ProjectUserRole) {\n        this.role = role;\n    }\n\n    verifyRole(requiredRole: ProjectUserRole): boolean {\n        const roles = ['user', 'manager', 'administrator'];\n        return roles.indexOf(requiredRole) &lt;= roles.indexOf(this.role);\n    }\n}\n\nconst mockProjectUserServiceProvider = (role: ProjectUserRole) =&gt; {\n    return {\n        provide: ProjectUserService,\n        useValue: new MockProjectUserService(role),\n    };\n};\n\nexport const ExampleStory: Story = {\n    args: {},\n    decorators: [\n        moduleMetadata({\n            providers: [mockProjectUserServiceProvider('user')],\n        }),\n    ],\n};\n</code></pre>"},{"location":"development/frontend/responsive-design/mobile-view/","title":"Responsive Design","text":""},{"location":"development/frontend/responsive-design/mobile-view/#mobile-view-responsive-design","title":"Mobile view / Responsive design","text":"<p>Even though opening a Capella session on a mobile device might seem impractical, we still want to ensure the application is usable on mobile devices.</p> <p>Our goal is to ensure all features are optimized for mobile view.</p>"},{"location":"development/frontend/responsive-design/mobile-view/#requirements","title":"Requirements","text":"<ul> <li>Smallest width is 375px (iPhone SE)</li> <li>Smallest height is 667px (iPhone SE)</li> <li>The breakpoint width between mobile and desktop view is 1280px for the   navigation bar. When the screen is smaller than 1280px, the navigation bar is   hidden and can be expanded by clicking on the hamburger menu. The application   should be able to be used on all screen sizes that are wider than the   smallest width. Therefore the breakpoint can vary from component to   component.</li> </ul>"},{"location":"development/frontend/responsive-design/mobile-view/#responsive-design-with-tailwindcss","title":"Responsive design with TailwindCSS","text":"<p>Tailwind supports responsive design. More information is available in the documentation: Responsive Design.</p> <p>For example, <code>class=\"hidden md:flex\"</code> hides an element on mobile devices and uses flexbox on devices larger than <code>768px</code>.</p>"},{"location":"development/frontend/responsive-design/mobile-view/#best-practices","title":"Best Practices","text":"<ul> <li>Avoid Tables: They're not natively responsive. Making them so demands   significant effort.</li> <li>Leverage Flexboxes: Ideally, utilize <code>class=\"flex flex-wrap\"</code> to ensure   content adjusts appropriately on various screens.</li> <li>Centering Content: When aesthetics and usability align, consider   vertically centering elements via <code>class=\"flex justify-center\"</code> on the parent   element.</li> </ul>"},{"location":"development/frontend/responsive-design/mobile-view/#example-from-the-application","title":"Example from the application","text":"<p>If you want to see a code example of responsive design in the application, you can check the <code>HeaderComponent</code> HTML template: frontend/src/app/general/header/header.component.html. You can search for <code>xl:</code> and play around with it.</p>"},{"location":"development/frontend/responsive-design/mobile-view/#debugging-testing-with-chrome-devtools","title":"Debugging &amp; Testing with Chrome DevTools","text":"<p>Note</p> <p>This section specifically addresses Chrome's DevTools. Other browsers might offer similar debugging tools.</p> <ol> <li>Initiating DevTools: Simply right-click on any web page element and    choose \"Inspect\".</li> <li>Switching to Mobile View: Click the \"mobile devices\" icon.    </li> <li>Choose a Device or Adjust Orientation: Pick a device from the dropdown    or adjust the viewport rotation.  </li> </ol>"},{"location":"development/k8s/resources/","title":"Measure Resource Usage","text":"<p>To find out which resources are used in the cluster, you can install the tool <code>kube-capacity</code>:</p> <pre><code>kubectl krew install resource-capacity\n</code></pre> <p>When the installation is complete, you can see an overview over the resources in your namespace:</p> <pre><code>kubectl resource-capacity -n &lt;NAMESPACE&gt; --sort cpu.limit --util --pods\n</code></pre> <p>One example output looks like:</p> <pre><code>NODE                          POD                                                    CPU REQUESTS   CPU LIMITS    CPU UTIL   MEMORY REQUESTS   MEMORY LIMITS   MEMORY UTIL\n\nk3d-collab-cluster-server-0   *                                                      560m (4%)      2050m (17%)   18m (0%)   85Mi (0%)         1510Mi (5%)     750Mi (2%)\nk3d-collab-cluster-server-0   dev-t4c-manager-guacamole-guacamole-84d7b5867d-f9dgj   50m (0%)       500m (4%)     2m (0%)    5Mi (0%)          500Mi (1%)      455Mi (1%)\nk3d-collab-cluster-server-0   dev-t4c-manager-oauth-mock-5b94779957-qw2b9            50m (0%)       500m (4%)     1m (0%)    5Mi (0%)          500Mi (1%)      168Mi (0%)\nk3d-collab-cluster-server-0   dev-t4c-manager-backend-postgres-76bbc8c6cb-wwmfm      100m (0%)      200m (1%)     6m (0%)    20Mi (0%)         100Mi (0%)      60Mi (0%)\nk3d-collab-cluster-server-0   dev-t4c-manager-backend-759bc74f-fxptq                 50m (0%)       200m (1%)     0Mi (0%)   20Mi (0%)         100Mi (0%)      0Mi (0%)\nk3d-collab-cluster-server-0   dev-t4c-manager-guacamole-guacd-6cc9b88885-2psq5       50m (0%)       100m (0%)     1m (0%)    5Mi (0%)          50Mi (0%)       11Mi (0%)\nk3d-collab-cluster-server-0   dev-t4c-manager-guacamole-postgres-767c4b8b87-2464m    50m (0%)       100m (0%)     10m (0%)   5Mi (0%)          50Mi (0%)       34Mi (0%)\nk3d-collab-cluster-server-0   dev-t4c-manager-prometheus-nginx-f5c469d66-mdm5x       50m (0%)       100m (0%)     0m (0%)    5Mi (0%)          50Mi (0%)       2Mi (0%)\nk3d-collab-cluster-server-0   dev-t4c-manager-nginx-c6f6557bb-82tpj                  50m (0%)       100m (0%)     0m (0%)    5Mi (0%)          50Mi (0%)       2Mi (0%)\nk3d-collab-cluster-server-0   dev-t4c-manager-prometheus-server-64d9bcccb4-ggsj2     50m (0%)       100m (0%)     1m (0%)    5Mi (0%)          50Mi (0%)       18Mi (0%)\nk3d-collab-cluster-server-0   dev-t4c-manager-frontend-6bd5977d4b-4zjbr              50m (0%)       100m (0%)     1m (0%)    5Mi (0%)          50Mi (0%)       2Mi (0%)\nk3d-collab-cluster-server-0   dev-t4c-manager-docs-fb565dbc7-w8tdg                   10m (0%)       50m (0%)      1m (0%)    5Mi (0%)          10Mi (0%)       2Mi (0%)\n</code></pre>"},{"location":"user/","title":"Introduction","text":""},{"location":"user/#introduction","title":"Introduction","text":"<p>Welcome onboard of the Capella Collaboration Manager. This platform helps you co-work on architectures using tools like Capella, Papyrus, pure::variants and Jupyter in combination with py-capellambse.</p> <p>This platform wraps the modeling tools to create an environment where users can can work directly in the project context without having to install or configure the tool. It also takes care of the housekeeping of the modeling projects themselves. And that's not all: We also offer project access management and since the site is completely responsive it is also usable on smartphones.</p>"},{"location":"user/#automations-and-model-derived-products","title":"Automations and Model-derived Products","text":"<p>Git is quite in the middle of the modeling lifecycle. We also use its automation means (CI/CD) to automate a number of housekeeping activities:</p> <ul> <li>Automated model-modifications: This includes range of services like   human-friendly element ID assignment, change control and versioning of   elements, hyperlinked object title update in descriptions and maintenance of   model-derived requirements (req-bot).</li> <li>Derived product generation and distribution: generation and publication of   model-derived documents and other artifacts (like software interfaces,   configurations); caching of diagrams for faster display in linked pages and   web-viewer; computation of model metrics for modeling progress dashboards;   spell-checking; synchronization with tools like   Simulink,   Polarion,   Codebeamer,   Confluence or even   Grafana.</li> </ul> <p>At this moment Collaboration Manager doesn't provide you with a self-service to configure any of these automations, however since now you know these are possible - you may get in touch with your Systems Engineering Toolchain contact to get these configured.</p> <p>Now that you have some understanding of the modeling setup and ways of working we can look into how you can actually work in this environment.</p>"},{"location":"user/#working-with-capella-in-the-collaboration-manager","title":"Working with Capella in the Collaboration Manager","text":"<p>Capella is not a web native tool, however it runs on Linux - so we can use open-source technologies to deliver it to you via browser. We constructed a Docker container with Capella and all the plugins you may need, added Xrdp to allow remote connection and Apache Guacamole to stream that connection to your browser. We call instances of those containers Sessions. To make this platform scalable and allow people co-work comfortably we use Kubernetes to run the Session containers - which in Kubernetes terms are called Pods. Kubernetes is able to scale the cluster to accommodate the active sessions, making it run at reasonable costs in both public and private cloud environments (but of course one could run it in a VM).</p> <p>There are currently 2 session types supported:</p> <ul> <li>Read-only session - in this case Collaboration Manager gets the latest   (or user-selected) model version from git and places that into a read-only   workspace within Capella. You can \"play\" with that model and even make   changes, however these changes will not be saved and so will do no harm (for   instance to agreed / approved contents). When the session is closed the   contents of the workspace is gone.</li> <li>Persistent workspace - in this mode a user-specific persistent volume is   mounted to the Session pod and linked to Capella as the workspace. This   enables you to work on projects locally, via git or TeamForCapella as   persistent workspace keeps \"state\" even after the session is closed.</li> </ul> <p>We do currently support two different working modes: <code>TeamForCapella</code> and <code>Git</code>. If you want to get more information about it, we have prepared a comparison here: Ways of co-working on a Capella project</p>"},{"location":"user/#user-roles","title":"User Roles","text":"<p>There are 3 roles you can have in a project context:</p> <ul> <li>User - read-only - you can view model snapshots (latest model, any   specific release, branch or commit) from git. You may edit the model however   your changes will not be saved. (Makes it also useful for training   exercises.)</li> <li>User - read/write - you start a Persistent Workspace Session. Your   user account is allowed to clone and commit to a git project \u2014 if the project   co-working model is git-only \u2014 or allowed to connect to a remote repository   in a TeamForCapella-based project. Also in this mode you may have many   co-working projects open at the same time, given that you have a role in   those projects that allows this kind of access.</li> <li>Model manager - can do same as both users above but also can invite or   remove users from the managed projects and control their access rights.</li> </ul> <p>You may also learn more about the roles model here.</p>"},{"location":"user/#next-steps","title":"Next Steps","text":"<p>If you like to start a new project and work on it via Collab Manager - please follow this guide: project onboarding guideline to prepare your project. If you want to use the TeamForCapella workflow, please contact your administrator. Linking models to TeamForCapella repositories can only be done by administrators.</p> <p>To work with the application, you need access to a project. If you don't have it yet or can't find the project you need see how do I get access to a project.</p> <p>At this point you may want to continue to one of the detailed getting-started sections:</p> <ul> <li>General introduction to Capella and first steps</li> <li>Getting started with a Read-only Session</li> <li>Getting started with a TeamForCapella-based Project</li> <li>Getting started with a Git-based Project</li> </ul>"},{"location":"user/#missing-information-need-support","title":"Missing Information / Need Support","text":"<p>Important</p> <p>The below is only valid for content-agnostic issues, do not share any proprietary / project related data or real content in reported issues or screenshots.</p> <p>If you don't find answer to your question on this documentation site please consider opening an issue on GitHub or extending the documentation with your own contribution via a pull request.</p>"},{"location":"user/projects/roles/","title":"Roles","text":"<p>Projects are self-managed. There are different roles for this:</p> Role Permissions <code>Global Administrator</code>  All permissions   Manage TeamForCapella instances   Manage TeamForCapella repositories   Manage Git repositories <code>Project administrator</code>  Manage users of a project   Manage model sources   Manage backup jobs  <code>Read</code> and <code>Write</code> access to linked models   Manage linked models   Link an existing Git repository   Link an existing TeamForCapella repository   Delete models      <code>User</code>/<code>Read/Write</code> <code>Read</code> and <code>Write</code> access to linked models   Access to linked TeamForCapella repositories      <code>User</code>/<code>Read only</code> <code>Read only</code> access to linked models      <code>User</code> without project access  Start persistent sessions"},{"location":"user/projects/volumes/","title":"Project Volumes","text":""},{"location":"user/projects/volumes/#project-volumes","title":"Project Volumes","text":"<p>Project volumes provide a limited workspace for sharing files between members of a project. They are mounted into all sessions of the project members.</p>"},{"location":"user/projects/volumes/#manage-a-volume","title":"Manage a Volume","text":"<p>Project administrators can create and delete volumes in a project.</p>"},{"location":"user/projects/volumes/#access-a-volume","title":"Access a Volume","text":"<p>Volumes are mounted into all sessions of the project members. You can access the volume under <code>/shared/&lt;project-slug&gt;</code>.</p> <p>The permissions are derived with the following rules:</p> <p>Persistent sessions without provisioning:</p> <p>All shared volumes of projects are mounted according to the user's or token's permission. If <code>shared_volumes:update</code> (read-write user) is granted, the volume is mounted read-write. If <code>shared_volumes:get</code> (read-only user) is granted, the volume is mounted read-only. Otherwise, the volume is not mounted.</p> <p>Persistent session with provisioning:</p> <p>Same as persistent sessions without provisioning, but only projects that are part of the provisioning are considered.</p> <p>Read-only sessions:</p> <p>Same as persistent sessions with provisioning, but all volumes are mounted as read-only.</p>"},{"location":"user/projects/access/","title":"Get Access to a Project","text":""},{"location":"user/projects/access/#how-do-i-get-access-to-a-project","title":"How do I Get Access to a Project?","text":"<p>Please ask a project administrator of the specific project for access. The project administrator can add you as user to the project. After you've been added, you should have direct access. If you don't see the project yet, just reload the page with <code>F5</code>.</p> <p>Before a project administrator can add you to a project, you have to log in once. The first login automatically registers your user in the database.</p> <p>Your project manager can find more information here: Add a user to a project</p> <p>You can verify access by navigating to <code>Projects</code>. You should see the project now:  If you want to verify if the persistent session with the TeamForCapella access works, you can follow the TeamForCapella workflow. The model should be listed in the connection dialog.</p>"},{"location":"user/projects/add-user/","title":"Add a User to a Project","text":"<p>Warning</p> <p>You need to have the administrator or project administrator role for a project to perform the following steps.</p>"},{"location":"user/projects/add-user/#add-user-to-project","title":"Add User to Project","text":"<p>Info</p> <p>To add a user to a project, the user has to log in to the platform at least once.</p> <ol> <li>Select your project in the project overview.</li> <li>On the right side you should now see user management options:     </li> <li> <p>Fill in the following fields:</p> <ol> <li><code>Username</code>: Ask your administrator if you are not sure which username to    enter</li> <li> <p><code>Role</code> and <code>Permission</code>: Have a look here for the overview of Roles and    Permissions: Project roles</p> <p></p> </li> </ol> </li> </ol>"},{"location":"user/projects/add-user/#modify-role-or-permissions-of-user","title":"Modify Role or Permissions of User","text":"<ol> <li>Select your project in the project overview.</li> <li>On the right side you should now see user management options:     </li> <li> <p>Select the user you want to modify:  </p> <p>You can select from the following options:</p> <ul> <li>Remove a user from the project</li> <li>Set role of the user to project administrator   or user</li> <li>Set permission of the user to read/write   or read-only</li> </ul> <p>Info</p> <p>You can not modify your own user or any administrator!</p> <p>Info</p> <p>Open sessions are not terminated automatically on permission change.  The TeamForCapella access is only revoked  when the user's last session is terminated.</p> </li> </ol>"},{"location":"user/projects/create/","title":"Request a New Project","text":""},{"location":"user/projects/create/#create-a-collaboration-manager-project","title":"Create a Collaboration Manager Project","text":"<p>In the Collaboration Manager, you can follow a guided process to create projects. Any user can create a project. After creation, you get the role project administrator for the project. To create a project, go to the Projects tab of the navigation bar, and click on Add new project.</p> <p>Please follow the steps:</p>"},{"location":"user/projects/create/#step-1-general-information","title":"Step 1: General Information","text":"<p>Please enter a unique name to identify the project. The project name can not be changed! Additionally, you may want to add a description.</p> <p></p>"},{"location":"user/projects/create/#step-2-add-team-members","title":"Step 2: Add Team Members","text":"<p>This page allows to manage the project user. By default, you are project administrator of the project. If you don't want to add an additional user, you can skip this step. Users can be added later at any time.</p> <p></p>"},{"location":"user/projects/create/#step-3-add-models","title":"Step 3: Add Models","text":"<p>Please follow the model creation instructions to set up a model: Create a model</p>"},{"location":"user/projects/models/complexity_badge/","title":"Model Complexity Badge","text":""},{"location":"user/projects/models/complexity_badge/#model-complexity-badge-integration","title":"Model Complexity Badge Integration","text":""},{"location":"user/projects/models/complexity_badge/#set-up-the-complexity-badge","title":"Set up the Complexity Badge","text":"<p>Warning</p> <p>Please note the following limitations:</p> <ul> <li>A file called <code>model-complexity-badge.svg</code> has to exist in the repository.   We provide a Gitlab CI template and a Github action to generate the file. Find more information below.</li> <li>Only project administrators can set up the model complexity badge. In addition, one needs access to the Git repository of the model.</li> </ul> <ol> <li>To set up the model complexity badge, you need to add the Git API URL to     your Git instance. More information     here.</li> <li> <p>Link a Git repository to the model, for which you'd like to see the model     complexity badge.</p> <p>Info</p> <p>If the Github repository is public, no token is required for the model complexity badge. For private Github repositories and for Gitlab repositories the model complexity badge integration uses the credentials, which are assigned during linking the Git repository.</p> <ul> <li>Gitlab: Limit the scope of the used token, only scope <code>read_api</code> is required.</li> <li>Github: If you are using a fine-grained personal access token, add the repository permission for the scope \"content\" with access <code>Read-only</code>.</li> </ul> </li> <li> <p>Follow the CI template instructions</p> <ul> <li>Gitlab</li> <li>Github</li> </ul> <p>to add the complexity badge pipeline to the linked repository.</p> </li> </ol>"},{"location":"user/projects/models/complexity_badge/#view-the-model-complexity-badge","title":"View the Model Complexity Badge","text":"<p>The model complexity badge is visible in the model overview in the project details:</p> <p></p>"},{"location":"user/projects/models/create/","title":"Create a Model","text":""},{"location":"user/projects/models/create/#create-a-collaboration-manager-model","title":"Create a Collaboration Manager Model","text":"<p>We offer a guided process to create models in a project. To create a model, you have to be at least project administrator. If you're coming from project creation, you're ready to go. Otherwise, please navigate to the Projects tab of the navigation bar, open the project in which you want to create a model, and click on the \u201c+\u201d icon.</p> <p>The creation can be interrupted at any step, however an unfinished model will lack some essential features, so it\u2019s recommended to go through the whole process.</p>"},{"location":"user/projects/models/create/#step-1-create-model","title":"Step 1: Create Model","text":"<p>This page allows to set a project name, description, and a tool. The name and tool are required. The tool can be changed after the model creation.</p>"},{"location":"user/projects/models/create/#step-2-choose-primary-source","title":"Step 2: Choose Primary Source","text":"<p>On this page, you can select the type of source. Right now, we offer the following options:</p> <ol> <li>Link an existing Git repository. For this option, you don't need    additional support.</li> <li>Create a new Git repository. This option is not supported yet. Please    create the repository yourself and continue with the first option.</li> <li>Link a TeamForCapella repository. Only available for the <code>Capella</code> tool.    If you're project administrator and not global administrator, you are not    able to select this option. You'll need assistance by an administrator. You    can abort the process here and continue with the help of an administrator    later on.</li> <li>Create a TeamForCapella repository. Only available for the <code>Capella</code>    tool. If you're project administrator and not global administrator, you are    not able to select this option. You'll need assistance by an administrator.    You can abort the process here and continue with the help of an    administrator later on.</li> </ol>"},{"location":"user/projects/models/create/#step-3-add-source","title":"Step 3: Add Source","text":"<p>If you chose option 1 or 2 in the last step, please read the <code>Link existing Git repository</code> part of this step. If you chose option 3 or 4, you should read the <code>Link existing T4C repository</code> part.</p>"},{"location":"user/projects/models/create/#step-31-link-existing-git-repository","title":"Step 3.1 Link Existing Git Repository","text":"<p>It is important for this step to have an existing Git repository which is reachable from inside your environment.</p> <p>You have to enter the following information:</p> <ol> <li>Instance: If your environment restricts the usage of Git instances, you     have to select your instance here. Otherwise, you can continue with the     next step.</li> <li> <p>URL: Please enter the URL of your Git repository here. All URLs     accepted by the <code>git clone</code> are also     accepted in the UI.</p> <p>Info</p> <p>If your environment restricts the usage of instances, make sure to match  the given prefix. You can also enter <code>Relative URLs</code>. In this case,  you can see the resulting URL after the <code>info</code>-icon.</p> </li> <li> <p>Username and password/token: Please enter your username and token     here, which is needed to access the repository. Please note that we don't     have support for SSH authentication yet.</p> <ul> <li>For public repositories: You don't need to enter credentials. However,   backups will need credentials to be able to push to the repository.</li> <li>For private repositories: You need to enter credentials for read-only   sessions and backups.</li> </ul> <p>Danger</p> <p>The credentials are stored in the database, and even if not accessible  from outside, they are stored in plain text, so the password  of the user should not be used. Rather use a token.</p> <p>Warning</p> <p>The credentials should be scoped and should only work for the required  repository. When changing the repository URL and the credentials are not  changed, other project administrators can gain access to different repositories  with your token.</p> </li> </ol>"},{"location":"user/projects/models/create/#step-32-link-existing-t4c-repository","title":"Step 3.2 Link Existing T4C Repository","text":"<p>Warning</p> <p>This step can only be executed by administrators</p> <p>The TeamForCapella instance has to exist before we can continue. Please select the TeamForCapella instance and the TeamForCapella repository. With <code>project</code>, you can specify the name of the model in Capella. We recommend using the same name for the repository and project.</p>"},{"location":"user/projects/models/create/#step-4-metadata","title":"Step 4: Metadata","text":"<p>This is an important step.</p> <p>Here, you can select the version and the model nature of your tool. If you don't select any version, the functionality will be restricted. You will not be able to set up backups or create read-only sessions.</p> <p>If suitable for your project, select one of the latest versions of Capella. Older versions may be removed in the future. Make sure your model is up to date and in case you update it in time.</p>"},{"location":"user/projects/models/metadata/","title":"Update Model Metadata","text":""},{"location":"user/projects/models/metadata/#update-model-metadata-version-and-nature","title":"Update Model Metadata (Version and Nature)","text":"<p>Warning</p> <p>Make sure to read the documentation about updating a TeamForCapella model or about updating a Capella model first!</p> <ol> <li>Navigate to <code>Projects</code> and select the project.</li> <li>In the model overview and select the  icon on model you'd like    to modify.</li> <li>You can edit the description, the version and the model nature. When you're    ready, click <code>Update model</code></li> <li>The new metadata should be displayed in the model overview.</li> </ol>"},{"location":"user/projects/models/backups/remove/","title":"Remove a Model Backup","text":""},{"location":"user/projects/models/backups/remove/#remove-a-backup","title":"Remove a Backup","text":"<p>Warning</p> <p>Only global administrators and project administrators can remove pipelines.</p> <ol> <li>Select the project in the <code>Projects</code> overview.</li> <li>In the model overview, select the <code>Synchronize</code>-button     </li> <li>Select the backup pipeline you'd like to delete.</li> <li>Click the \"Remove pipeline\" button.  </li> <li> <p>A new dialog will open. Confirm the deletion.  </p> <p>Info</p> <p>If the deletion fails due to an unreachable TeamForCapella server, you can make use of the \"Force deletion\" option. This will remove the pipeline, but the pipeline token will not be revoked. This option is only available for global administrators.</p> </li> </ol>"},{"location":"user/projects/models/backups/setup/","title":"Set up a Model Backup","text":""},{"location":"user/projects/models/backups/setup/#set-up-a-backup-for-a-teamforcapella-model","title":"Set up a Backup for a TeamForCapella Model","text":"<p>Warning</p> <p>You need to have the global administrator or project administrator role for a project to perform the following steps.</p> <p>Danger</p> <p>Models are not automatically backed up! Please make sure to set up a regular backup for important content.</p> <p>It's possible to create a backup from any TeamForCapella repository to any Git repository in a project. Pipelines can be triggered manually and can be executed on schedule. By default the schedule is set to run every night at 3am UTC, but can be configured in the configuration.</p> <ol> <li>Navigate to <code>Projects</code></li> <li>Select the relevant project</li> <li>Make sure that you have added at least one TeamForCapella model (source)     and at least one Git repository to the model (destination)</li> <li> <p>In the model overview, select the <code>Synchronize</code>-button</p> <p></p> </li> <li> <p>You can see a list of all registered backup pipelines. In our case, there     is not registered backup pipeline yet.</p> <p></p> </li> <li> <p>Click on the <code>plus</code> icon and select a Git model (source) and a T4C model     (destination).</p> <p></p> </li> <li> <p>Confirm your selection with the <code>Create</code> button.</p> </li> </ol>"},{"location":"user/projects/models/backups/trigger/","title":"Trigger a Model Backup","text":"<p>Warning</p> <p>To perform the following steps, you need at least one existing configured backup.</p> <p>You can trigger backups at any time.</p> <ol> <li>Select the project in the <code>Projects</code> overview.</li> <li>In the model overview, select the <code>Synchronize</code>-button    </li> <li>Then, find the pipeline you'd like to run and click the <code>Run pipeline</code>    button </li> </ol>"},{"location":"user/projects/models/diagrams/setup_diagram_cache/","title":"Setup Diagram Cache","text":""},{"location":"user/projects/models/diagrams/setup_diagram_cache/#set-up-the-diagram-cache-integration","title":"Set up the Diagram Cache Integration","text":"<p>Warning</p> <p>Please note the following limitations:</p> <ul> <li>The diagram cache is only available for your own Gitlab and Github projects. You can also use it for public projects if the diagram cache gets pushed to the repository.</li> <li> <p>You need a pipeline in the Git repository of the model, which serves the diagrams via      job artifacts Gitlab      or job artifacts Github      (see also limitations for private repositories).      The job has to be called <code>update_capella_diagram_cache</code> and has to generate the following files:</p> <ul> <li><code>diagram_cache/index.json</code></li> <li><code>diagram_cache/{uuid}.svg</code> for each diagram</li> </ul> <p>In addition, the job can push the diagram cache to a branch diagram-cache/. <li> <p>One pipeline in the linked Git repository should not contain more than 20 jobs.</p> </li> <ol> <li>To set up the diagram cache, your administrator needs to add the Git API     URL of your Gitlab or GitHub instance to the collab manager. More     information here.</li> <li> <p>Link a Git repository to the model, for which you'd like to see the diagram     cache.</p> <p>Info</p> <p>The diagram cache integration uses the credentials, which are assigned when  creating the Git model integration. Limit the scopes of the used token, only  scope <code>read_api</code> (Gitlab) and <code>read-only</code> for the \"actions\" scope of the repository permissions (Github, Personal Access Token) is required.</p> </li> <li> <p>Follow the CI template instructions</p> <ul> <li>Gitlab</li> <li>Github</li> </ul> <p>to add the diagram cache pipeline to the linked repository.</p> </li> <li> <p>You're ready to go. Validate if the setup works:     View the diagrams</p> </li> </ol>"},{"location":"user/projects/models/diagrams/view_diagram_cache/","title":"View Diagram Cache","text":""},{"location":"user/projects/models/diagrams/view_diagram_cache/#view-diagrams-via-the-diagram-cache-integration","title":"View Diagrams via the Diagram Cache Integration","text":"<ol> <li>Navigate to your project in the project overview.</li> <li>In the model overview, select the diagrams button:     </li> <li> <p>The diagram viewer should load and you should see all diagrams:     </p> <p>Note</p> <p>We'll search for a successful job run in the last 20 pipelines of  the specific revision. If there is no successful pipeline (using Gitlab or Github) or your artifacts have expired (using Github), you won't be able  to see diagrams.</p> </li> <li> <p>If you want to enlarge a diagram, just click on the image preview.</p> </li> </ol>"},{"location":"user/sessions/reconnect/","title":"(Re-)Connect to Session","text":"<ol> <li>Please navigate to your Active Sessions</li> <li>Find your session and select <code>Connect</code>. A new window should pop up.</li> <li>Please click on <code>Connect to Session</code>.</li> <li> <p>The session should appear in a new tab and Capella starts automatically.</p> <p>Warning</p> <p>After reconnecting to your session, your screen may be black. It can take up  to a minute until you see Capella again.</p> </li> <li> <p>Please follow the instructions (depends on the workflow of your project)</p> <ol> <li>Git</li> <li>TeamForCapella</li> </ol> </li> </ol>"},{"location":"user/sessions/request/","title":"Request Session","text":"<p>Please follow these steps to request a session:</p> <ol> <li>Navigate to the <code>Projects</code> tab inside the web application, and select your    project.</li> <li>In the project select a model tool and version in the \"Read-only session\"    section. Only tools and versions used in the project are shown.</li> <li>Click the <code>Request a read-only session</code> button.</li> <li>A popup will request you to select the models that are compatible with the    selected tool. Once you select a model, you get the option to select a    branch.</li> <li>You have an option to create a \"deep clone\". Normally only the latest    version of a model is loaded. A deep clone will make all previous revisions    available. It will take longer to start the session.</li> <li>Click the <code>Start session</code> button.</li> <li>You're redirected to the <code>Sessions</code> tab.</li> <li>Wait for your read-only session to become ready and open it with the    <code>Connect</code> button.</li> </ol>"},{"location":"user/sessions/request/#automatic-session-termination","title":"Automatic Session Termination","text":"<p>When your session is inactive for a long time (default 90 minutes), your session is terminated. A session is considered inactive when there is no user activity with your session, even if you have your session open in the browser.</p> <p>For read-only sessions this means that you have to start a new session. For persistent sessions the data is persisted, and you can just request a new session.</p>"},{"location":"user/sessions/sharing/","title":"Session sharing","text":"<p>It's possible to share a session with other users. Session sharing can be used to collaborate with other users on the same session in real-time.</p> <p>The invited users will get full access to your session and can act on your behalf. Make sure to trust the entered users and to monitor the session at any time. The session will be shared until it is terminated. To revoke session access for a user, terminate your session.</p> <ol> <li>Navigate to your Active Sessions</li> <li> <p>Find the session and select <code>Share</code>.</p> <p>Warning</p> <p>If you don't see the <code>Share</code> button, the tool does not support session sharing.</p> </li> <li> <p>To add users, enter their username in the input field. You add multiple     users by confirming with <code>Enter</code> after each username. The list with users     will be in the pending state. To invite the users, read and confirm the     safety information and confirm with <code>Submit</code>.</p> </li> <li> <p>Once shared, the session will appear in the user's active sessions list.     The invited users can connect to the session as known from own sessions.</p> <p>Info</p> <p>The invited users can't terminate the session or share the session to other users.</p> </li> </ol>"},{"location":"user/sessions/terminate/","title":"Terminate Session","text":"<ol> <li>Please navigate to your Active Sessions</li> <li>Find your session, select <code>Terminate</code> and confirm your decision.</li> <li> <p>We'll send a signal to the used tool (e.g. Capella) to properly terminate.     The tool has 60 seconds to terminate, otherwise the process is force     killed.</p> <p>Technical background</p> <p>When a user clicks the <code>Terminate session</code> button, a <code>SIGTERM</code> is sent  to the container. The container reacts to the signal and terminates the  tool as well as other used programs (e.g. the <code>xrdp</code> server). After a  grace period of 60 seconds, the container receives a <code>SIGKILL</code>,  which results in a force-kill.</p> </li> </ol> <p>Danger</p> <p>All unsaved work is lost and cannot be restored after closing a session.</p> <p>Info</p> <p>If you close Capella in the session manually, it will automatically restart. Please terminate sessions via the application context (like described above).</p>"},{"location":"user/sessions/files/","title":"Files Browser","text":""},{"location":"user/sessions/files/#browse-upload-and-download-files","title":"Browse, Upload and Download Files","text":""},{"location":"user/sessions/files/#upload","title":"Upload","text":"<ol> <li>Navigate to the <code>Session</code> tab.</li> <li> <p>On the right side, select the corresponding session. Select the persistent     session to upload files into your persistent workspace. Click the     <code>File Browser</code> button:</p> <p></p> </li> <li> <p>Wait until the list of files has loaded.</p> <p></p> <p>Info</p> <p>It is currently only possible to upload files with a file size of less than 30MB.   For larger files we recommend a data transfer via Git.</p> </li> <li> <p>Expand the directories by clicking on the directory icon (1) until you find     the directories where you want to upload your file to. Click the upload     button (2) next to the directory name.</p> <p></p> </li> <li> <p>Now, select the file(s) to upload and confirm. The files to be uploaded are     marked in green.</p> <p></p> </li> <li> <p>When you're ready and selected all files to upload, confirm your selection     with <code>Submit</code>.</p> </li> <li>The upload can take a few seconds/minutes, depending on the file size.</li> <li>When the upload was successful, the dialog closes without error message.</li> </ol>"},{"location":"user/sessions/files/#download","title":"Download","text":"<ol> <li>Navigate to the <code>Session</code> tab.</li> <li> <p>On the right side, select the corresponding session. Select the persistent     session to download files into your persistent workspace. Click the     <code>File Browser</code> button:</p> <p></p> </li> <li> <p>Wait until the list of files has loaded.</p> <p></p> <p>Info</p> <p>To download files from hidden directories, e.g., the workspace metadata, one has to expand these directories by clicking <code>Show hidden files</code></p> </li> <li> <p>Expand the directories by clicking on the directory icon (1) until you find     the directories where you want to download your file from. Click the     download button (2) next to the directory name and your browser will start     the download.</p> <p></p> </li> <li> <p>You can see in your browser whether your download was successful.</p> </li> </ol>"},{"location":"user/sessions/screenshots/","title":"Taking Screenshots","text":""},{"location":"user/sessions/screenshots/#general","title":"General","text":"<p>Some screenshot tools use the clipboard and keyboard shortcuts. This sometimes does not work in the Capella Collaboration Manager.</p>"},{"location":"user/sessions/screenshots/#technical-background","title":"Technical Background","text":"<p>Some keyboard combinations are directly mapped into the containers where Capella is running. This allows to use these keyboard combinations for actions inside of Capella. Therefore they are not recognized on the host system.</p> <p>Also, the clipboard can be shared oneway (host \u279c container). The other way does not work for security reasons. Some tools copy screenshots directly to the clipboard. Depending on the implementation, some screenshots get copied directly to the container, which results in the screenshots not available in the clipboard of the host system.</p>"},{"location":"user/sessions/screenshots/#solution","title":"Solution","text":""},{"location":"user/sessions/screenshots/#snipping-tool","title":"Snipping Tool","text":"<p>The Snipping tool (Windows) should just work.</p>"},{"location":"user/sessions/screenshots/#greenshot","title":"Greenshot","text":"<p>On some devices, the print-key does not work with screenshot, because it gets mapped to the container. Please open Greenshot from the task bar and select \"Capture region\".</p>"},{"location":"user/sessions/screenshots/#snip-sketch","title":"Snip &amp; Sketch","text":"<p>The shortcut <code>Win</code> + <code>Shift</code> + <code>S</code> does work, but the image in not available in the clipboard. As a solution, you can have another window in focus and take the screenshot. Alternatively, you can forbid the use of the clipboard:</p> <p></p> <p>Don't forget to turn it back on after taking the screenshot.</p>"},{"location":"user/sessions/troubleshooting/","title":"Troubleshooting","text":""},{"location":"user/sessions/troubleshooting/#session-troubleshooting","title":"Session Troubleshooting","text":"My session window doesn't scale properly  <p>If you use a direct session connection via Guacamole, the window doesn't scale automatically after browser resizing. You can manually trigger a resize by pressing the \"Refresh\" button in your browser.</p> <p>Alternatively, you can use our internal session viewer, which comes with automatic scaling out of the box.</p> The session requests takes a long time  <p></p> <p>If a session takes a few minutes to start, it means that you've reached a new node that doesn't have the requested tool installed (for load balancing reasons, we distribute the sessions across different servers). This can happen after updates on our end (e.g. when the tool configuration or dependencies are updated) or updates from the cluster operator. In both cases, we pull a new Docker image (which can be understood as a reinstallation of the tool) on demand.</p> I've minimized my window in Xpra and can't get it back  <p></p> <p>Just refresh the page in the browser. The window should appear again.</p> My read-only sessions shows 'Modelloading failed'  <p></p> <p>This happens if the loading of one of the models fails. Please reach out your project administrator. If you are project administrator, please check the primary Git models with a matching tool version of your project. These are used for the <code>read-only</code> session. Common mistakes are wrong credentials, wrong entrypoints (e.g. with typos) and missing <code>aird</code>-files.</p> <p>If you have no success, please reach out your global administrator. They can see the logs of read-only sessions.</p> The TeamForCapella password doesn't work  <p></p> <p>Since we have released version 2, users have to use sessions passwords. More information can be found here. If you have been added to a project recently while having a running session, please recreate your session to get a valid session password for the models of the required project.</p> I can't use the <code>Control</code> key for the secondary/right-click on macOS  <p></p> <p>Please use an external mouse or use the trackpad gesture (click with two fingers on the trackpad).</p> <p>The sessions run on Linux and the <code>Control</code> key can't be mapped properly via the remote desktop protocol.</p> <p>Alternatively, you can use the Xpra connection method instead of Guacamole.</p> My Xpra window doesn't react anymore  <p></p> <p>If the Xpra window doesn't react anymore, a modal dialog in the background might block the main window.</p> <p>To identify a potential hidden dialog, double-click on the title-bar of the application in Xpra. Alternatively, you can minimize it: </p> <p>Then, drag the window around to see if there is any other modal dialog window. If you find one, close it.</p> <p>Another option is to refresh the browser tab. It will bring the hidden modal dialog into the foreground. This step might take a bit longer.</p>"},{"location":"user/sessions/types/","title":"Overview","text":""},{"location":"user/sessions/types/#session-types","title":"Session Types","text":"<p>The Capella Collaboration Manager offers different Session Types:</p>"},{"location":"user/sessions/types/#persistent-sessions","title":"Persistent Sessions","text":"<p>Persistent Sessions will store your work in the <code>/workspace</code> folder. Persistent Sessions allows you to use personal workspace within Capella. By default, we will request 20GB of storage for your personal workspace.</p> <p>If your project uses the T4C-workflow, we will suggest all visible models in the T4C connection dialog.</p> <p>Warning</p> <p>Only work stored in the <code>/workspace</code> folder (and subdirectories) will be persistent. If you store your work in another folder, it will be lost when the session is closed.</p>"},{"location":"user/sessions/types/#provisioned-sessions","title":"Provisioned Sessions","text":"<p>Provisioned Sessions are a special type of Persistent Sessions. They are available in projects and can be used to initialize a workspace with content from Git repositories. After the initial provisioning, changes will be saved. You can reset the state at any time to the latest state of the Git repository.</p> <p>Provisioned sessions are a good alternative to persistent sessions if you only have read-only access in a project but want to make changes on the model that you want to integrate later.</p> <p>The provisioned workspace will saved in your personal workspace in the folder <code>/workspace/{project_slug}/tool-{tool_id}</code>.</p>"},{"location":"user/sessions/types/#read-only-sessions","title":"Read-Only Sessions","text":"<p>Read-Only Sessions allow you to read information from models without the risk of changing the model. The can be useful if you want to review a model or don't have permissions to write to the model.</p> <p>Info</p> <p>Read-only sessions only work for models with linked Git repositories.</p> <p>Danger</p> <p>Any changes made in read-only sessions will NOT be saved and cannot be restored.</p>"},{"location":"user/sessions/types/persistent/","title":"Persistent","text":""},{"location":"user/sessions/types/persistent/#getting-started-with-a-persistent-session","title":"Getting Started with a Persistent Session","text":"<ol> <li>To get started with a persistent session, you have to navigate to     <code>Sessions</code>.</li> <li>Please select the tool and the version you'd like to work with:     </li> <li> <p>You should see your session listed under <code>Active sessions</code> on the right.     </p> <p>Session spin-up may take up to 30 seconds before the connection button will get enabled. First time start may take up to 1 minute.</p> </li> <li> <p>Click the <code>Connect</code> button when it's enabled. A new popup opens, where you     can select <code>Connect to Session</code>. A new browser tab should open and you see     Capella loading. </p> <p>Info</p> <p>You can find your TeamForCapella session password in the connection  dialog. Please follow the <code>TeamForCapella</code> guide  for more information.</p> </li> <li> <p>When Capella is loaded you can start working.</p> <p>Do you need access to a TeamForCapella model?</p> <p>Please continue with the Connect to a <code>TeamForCapella</code> repository guide.</p> </li> </ol>"},{"location":"user/sessions/types/read-only/","title":"Read-Only","text":""},{"location":"user/sessions/types/read-only/#getting-started-with-read-only-project-access","title":"Getting Started with Read-only Project Access","text":"<p>If you have read-only project access, or you simply want to check the model without risk of editing, you may start a read-only session.</p> <p>To do so, select the project from the project overview and select the modeling tool and version from the <code>Read-only session</code> section. Next, select the models you want to load in your read-only session.</p> <p>Starting read-only session may take a bit of time, depending on the size of the model and the current load. After the request, the application will fetch the requested model and change history from git and place it into an empty workspace. When the loading has finished, you can connect to the session.</p>"},{"location":"user/tools/capella/introduction/","title":"Introduction","text":""},{"location":"user/tools/capella/introduction/#introduction-to-capella","title":"Introduction to Capella","text":"<p>Capella is an Eclipse-based solution for Model-Based Systems Engineering. You can learn more in the short intro video below:</p>"},{"location":"user/tools/capella/introduction/#introduction-to-systems-modeling-with-capella","title":"Introduction to Systems Modeling with Capella","text":"<p>A very nice set of videos, highly recommended to watch:</p> <p>More videos from that course here (playlist)</p> <p>You may find more Capella - related videos on the official channel: EclipseCapella</p> <p>Also, you can try out this Capella Tutorial</p>"},{"location":"user/tools/capella/introduction/#more-advanced-topics","title":"More Advanced Topics","text":"<p>Methods for Modeling System of Systems with Capella:</p> <p>If you'd like to learn how Capella works you may want to read through our guide for meta-model exploration</p>"},{"location":"user/tools/capella/introduction/#deriving-model-based-products","title":"Deriving Model-based Products","text":"<p>You may prototype-derived products using Python (Jupyter) and py-capellambse. It contains a few practical examples.</p> <p>Eventually you may automate production of model-derived documents and other things via CI/CD pipelines that work on your model git repositories. Get in touch with your Systems Engineering Toolchain team to learn more.</p>"},{"location":"user/tools/capella/local-installation-vs-collab-mgr/","title":"Local Capella vs. Collaboration Manager","text":""},{"location":"user/tools/capella/local-installation-vs-collab-mgr/#difference-between-a-local-installation-and-the-capella-collaboration-manager","title":"Difference between a local installation and the Capella Collaboration Manager","text":"<p>You may have thought about why you should use the Capella Collaboration Manager and not just a local Capella installation. It depends on a variety of factors, so here is a decision help:</p> Local Capella Installation Capella Collaboration Manager Differences between operating systems When the team uses different operating systems or dependencies, there may be small differences in the Capella behaviour. Bugs have to be collected and reported for each OS individually. In addition, it's important that all users use the same font, otherwise diagrams will change on each save when a new font is applied. Diagrams might look different on different devices. All sessions run on Linux in a Docker container with exactly the same dependencies. Bugs are easier to reproduce. Configuration Manual configuration by users. Some configuration options have to be aligned in the team. Pre-defined configuration according to best-practises and experience. Users may deviate from the central configuration via modifications in their personal workspace. Performance Native Capella performance, no latency in local projects. Performance depends on the internet connection and latency. Backups Unless saved on a remote server like TeamForCapella or Git, changes have to be backed up manually. Workspaces can be backed up regularly (this service might not be enabled for all environments). Offline working Offline working possible with local models or with the Git workflow. Not possible with TeamForCapella. Access via browser with active internet connection. Working offline is not possible at the moment. Installation effort Software, plugins, dependencies and dropins have to be installed and updated manually. Everything is installed centrally and managed by the System Administrators. Working together in one Capella instance Requires external software for screen sharing. Natively integrated with session sharing. You can see other users' pointers and collaborate interactively. Task automation Tasks can be automated using <code>capellambse</code> and <code>capellambse-context-diagrams</code> locally. Python, dependencies and packages have to be installed manually. Native integration of Jupyter with the latest versions of <code>capellambse</code> and <code>capellambse-context-diagrams</code> preinstalled. Support effort High effort to support installation on many different devices. Workspaces and logs are not accessible centrally. Central log collection and installation. For debug purposes, workspace can be accessed by System Administrators. Access management Access has to be managed centrally, either manually on the TeamForCapella server or via AD groups. Access is self-managed by project administrators. Support for read-only sessions Users consume licenses in TeamForCapella projects for read-access. Changes to the model are not prohibited. All changes to models in read-only sessions are discarded. No license is needed for read-only sessions. Monitoring capabilities Monitoring has to be built manually. Monitoring of TeamForCapella repositories, license usage and usage of different tools / versions."},{"location":"user/tools/capella/t4c-git-compare/","title":"Co-working Methods","text":""},{"location":"user/tools/capella/t4c-git-compare/#ways-of-co-working-on-a-capella-project","title":"Ways of Co-working on a Capella Project","text":""},{"location":"user/tools/capella/t4c-git-compare/#quick-comparison","title":"Quick Comparison","text":"Git TeamForCapella Multiple workstreams Different workstreams available via branches Not recommended, only possible via different repositories Concurrent working Very challenging because of merge conflict potential, a possible workflow is described [here](./git/index.md). Is possible. Diagrams are locked, no risk of merge conflicts. Merge conflicts Resolution of merge conflicts can be challenging. No merge conflicts when one workstream is used. For multiple workstreams, the resolution of merge conflicts can be challenging. License No license needed<sup>1</sup> TeamForCapella license required<sup>2</sup> Complexity Git knowledge is required<sup>3</sup> Easy to use Stability Very stable solution as changes are initially saved locally. Temporary server downtimes can also be bridged. Changes may be lost if the server becomes unavailable during work. Potential of data loss Changes are backed up after each push (more regularly). Changes are backed up on schedule, usually once a day. Automation Possible via CI/CD in the Git repository. Possible via TeamForCapella \u2192 Git synchronization (runs on schedule, usually once a day). Change control Reviews are possible via merge requests<sup>4</sup> Change control is nearly impossible, no barriers. Release tagging Directly possible via tags in Git. Possible via TeamForCapella \u2192 Git synchronization (Releases are stored as tags in the Git repository)."},{"location":"user/tools/capella/t4c-git-compare/#some-general-words","title":"Some General Words","text":"<ul> <li>Git-only - the modeling team uses a git repository to work on the model.   The team may use git branches to work on features or capabilities in parallel   and a main branch is used for integration and release-tagging. This way of   working gives the modeling leads / change control board great control over   what contents make it to the model that is used for releases (of things like   design documentation). On the downside this co-working method is fairly   complicated and requires skilled modeling leadership for challenges like   merge conflict resolution and fragmentation management (a way to break up   model into smaller files to reduce density of merge conflicts).</li> <li> <p>Git + TeamForCapella - with this approach the modeling team can co-work   with a very high degree of concurrency and stay away from the difficulties of   merge conflict resolution. On the downside it is much harder to control what   makes it into the model as there is no barrier except for maybe a modeling   process that would stop a person from making changes that are not allowed.   Yet there are a few ways around that limitation. For teams with basic or no   experience in modeling and git this is probably the best way to start   co-woking. Git is still used for regular backups of the model and   release-tagging.</p> <p>TeamForCapella license required</p> <p>For this co-working method to be enabled you need a valid TeamForCapella license and TeamForCapella server installed and integrated with Collab-Manager.</p> </li> </ul> <ol> <li> <p>You can use any standardized Git server. Depending on the server used, licenses for the Git server may be required.\u00a0\u21a9</p> </li> <li> <p>You need a valid TeamForCapella license and TeamForCapella server installed and integrated in the Collaboration Manager.\u00a0\u21a9</p> </li> <li> <p>For the basic workflow, a simple Git knowledge that includes commit, pull and push is sufficient. However, it is necessary to have at least one Git expert in the project to deal with potential merge conflicts and unexpected situations.\u00a0\u21a9</p> </li> <li> <p>To review changes, the Eclipse EMF diff/merge tool can be used. However, in practice this proves to be too time-consuming, as many changes become confusing very quickly.\u00a0\u21a9</p> </li> </ol>"},{"location":"user/tools/capella/git/","title":"Working with Git","text":""},{"location":"user/tools/capella/git/#working-with-git","title":"Working with Git","text":"<p>In this guide we explain how to use Git via Eclipse. When using Git we make changes locally and push them to a remote (Gitlab or GitHub mainly) repository. Here we explain how to get made changes to the remote repository so that colleagues can see and review them.</p>"},{"location":"user/tools/capella/git/#clone-a-repository","title":"Clone a Repository","text":"<p>First open the View Git Repository by clicking on the magnifying glass (1) in the right corner.</p> <p></p> <p>Searching looks like:</p> <p></p> <p>When clicking \"Clone a Git repository\" a view \"Source Git Repository\" to enter the repository url opens. Enter here the URL of the Remote of your repository and if it is not a public repository enter your username and password. After clicking \"Next\" the \"Branch Selection\" opens. Here you can pick a branch on which you want to work. After clicking \"Next\" another time, the view \"Local Destination\" opens. This shows where your work is going to be stored locally.</p> <p>Info</p> <p>Tick the box: \"Import all existing Eclipse projects after clone finishes\" importing the cloned repository into your eclipse workspace</p> <p></p> <p>Then you can click finish. Your repository from the Remote is now cloned locally.</p>"},{"location":"user/tools/capella/git/#switch-branches","title":"Switch Branches","text":"<p>To collaborate it might be useful to work on different branches. Therefore, there are two ways to switch branches (to check out existing ones or to create a new one).</p> <p>Either you right-click on the project name in the lower right corner, go to \"Switch to\" and then e.g. \"New Branch\"</p> <p></p> <p>or you can right-click on the project name in the project tree and then click \"Team\"&gt; \"Switch to\" &gt; \"New Branch\".</p> <p></p> <p>In order to make the changes visible in your project tree and to see on which branch you are currently working on right-click on the project name &gt; \"Close Project\" and then open the project again.</p>"},{"location":"user/tools/capella/git/#prepare-to-commit-stage-changes","title":"Prepare to Commit - Stage Changes","text":"<p>In Git staged changes are saved changes that we mark to use in our next commit.</p> <p>In order to stage changes in Eclipse, open the View: Git Staging. In that view you can see the staged and the unstaged changes (1). You can also see changes that you made in the file tree on the left indicated by \"&gt;\" (2). If there are no (un-)staged changes you did not make a change compared to the last state that Git already has saved in commits.</p> <p></p> <p>In the Git Staging View mark the unstaged files that you want to stage and drag them with your mouse to the \"Staged Changes\" area. Then reload (3) the View in order to see the made changes.</p>"},{"location":"user/tools/capella/git/#commit-and-push-changes","title":"Commit and Push Changes","text":"<p>After having staged the changes they should be put into a commit. Therefore, type a commit message to show what changes have been made. A commit message can look like:</p> <pre><code>Short summary of the changes\n\nDetails of the made changes\nChange #1\nChange #2\n</code></pre> <p>Thus you and your colleagues know what happened in the commit. Then commit the changes (2).</p> <p>Info</p> <p>The commit is now made locally. In order to publish it and share it with other you have to push it to the Remote!</p> <p></p> <p>If you already committed your changes you can right-click on the Project &gt; \"Team\" &gt; \"Push to Origin\" in order to push your changes to the remote.</p> <p>If you have not committed yet and want to publish your changes and to share them with your team rather click: \"Commit and Push\" (1). If you have not configured that before you are now asked to \"Configure upstream for push and pull\" and the selected default of \"Merge\" can just be kept. You might now be asked to enter a user and a password for the remote repository in order to push your changes there. Having done that you can click \"Push\".</p> <p>Now your changes are saved at the remote repository where they are not lost and your colleagues can see them.</p>"},{"location":"user/tools/capella/git/#diff-and-merge-models","title":"Diff and Merge Models","text":"<p>Warning</p> <p>If you have to merge due to a merge conflict do not commit unless all conflicts highlighted are solved.</p> <p>If the merge tool is not opening on its own due to a merge conflict you can also diff two models on your own in order to check which changes were made.</p> <p>Therefore, select both <code>.aird</code>-files (e.g. with control click). Then right click on one of the files and select \"Compare with\" &gt; \"Each other as model\".</p> <p></p> <p>In the image you can see the coffee machine model imported twice with different changes made to each model in order to compare them.</p> <p>In the View \"Define the comparison operation to perform\" it is important to choose the correct order of which model is the source and which one is the target. In that case we are taking the changes in the source to apply them to the target, and are going to change the target model.</p> <p>Warning</p> <p>Make sure to select the correct direction of merging in order to modify the correct model.</p> <p></p> <p>In the example we want to merge our changes from Left (coffee-machine model on working branch) into Right (coffee machine model on main branch)(1).</p> <p>Afterwards click \"Configure\" (2) to make further configurations.</p> <p>Choose the option \"Transfer of elements between models created independently\". Then click \"Show advanced settings &gt;&gt;\" to configure the matching process between elements. Thus, click the now appeared tab \"Matching\".</p> <p>Usually the UUIDs of the objects in your model should be stable. So ticking the Absolute criteria \"Technical IDs\" and \"Property IDs\" should be sufficient. Especially for if you know that there could be changes in diagrams you might also want to tick \"Diagrams: Match shapes according to represented elements\" and \"Diagrams: Match remaining shapes according to type\" as in Diagrams IDs might change just by opening them. If nothing else helps choose \"Names\" and click \"Use labels as names\" to match but labels easily change.</p> <p></p> <p>Afterwards, click \"Ok\" and \"Finish\".</p> <p>Then you get into the merge view. Marked with the lock you can see which model is going to be modified. They are also labeled as source and target where the source is from which we are taking the changes and the target is the model that gets modified.</p> <p></p> <p>The colors highlight what change was made and will be applied to the target if you apply the change: blue: create, red: delete, purple: modify.</p> <p>If there are any objects that are overarching you have to merge them separately as they can not be merged in the separate layers.</p>"},{"location":"user/tools/capella/git/#merge-model-elements","title":"Merge Model Elements","text":"<p>In the synthesis view you can see the number of changes that happened. If you click on a specific change you can see in the Details (1) and also marked in blue on both models what changed and possibly how the current status in both models is. Then you can right-click on the change in the synthesis view and click \"Apply change(s)\" (2) and you can click \"Ok\" then. Afterwards make sure to Ctrl+S or File &gt; Save to save the change made.</p> <p>Warning</p> <p>If any of your changes depend on common objects independent of layers make sure to also apply those changes in order to create a working modification of the model.</p> <p>If you have also changes in diagrams you should migrate them as well in the same session.</p>"},{"location":"user/tools/capella/git/#merge-diagrams","title":"Merge Diagrams","text":"<p>Diagrams are stored in the <code>.aird</code> file. There the application of changes happens similar. You can have a look into the multiple stages to see the what exactly changed in the diagrams and you can very detailed choose the changes that you want to apply.</p> <p>If you have also changes in the model content you should merge both in the same session.</p>"},{"location":"user/tools/capella/git/#merge-conflicts","title":"Merge Conflicts","text":"<p>Commit your changes as described above. Pull from the remote (e.g. right click on the project &gt; \"Team\" &gt; \"Pull\"). This might result in merge conflicts which you can solve via the merge tool.</p>"},{"location":"user/tools/capella/git/#merging-with-the-merge-tool","title":"Merging with the Merge Tool","text":"<p>In the above description we made sure to decide which model is our target and is going to be modified while the changes would be taken from the source model. In the case of a merge conflict we have changes in both models at the same position and it is not possible to automatically decide which change to keep and which to overwrite because possibly both are reasonable changes. Thus you as a user have to decide which changes to keep. In the following we are describing how you can pick the changes that you later want to see in the model.</p> <p></p> <p>With the buttons above the details of the made changes enable us to decide the change from which model to take and which change to discard.</p> <p>If the number of changes is overwhelming you can filter them by different criteria (2). In the category \"Three-way\" you can tick \"filtered\" for the changes that for the moment you prefer not to see and to tackle to apply the changes one after another.</p> <p>Make sure to resolve all conflicts before committing! After merging reopen the model and look especially into layouting as capella might be a bit opportunistic in merging layouts.</p>"},{"location":"user/tools/capella/git/#merging-if-merge-tool-is-not-possible","title":"Merging if Merge Tool is not Possible","text":"<p>If merging with the merge tool is not possible you have to open the reset view.</p> <p></p> <p>Then select hard reset of your local branch:</p> <p></p> <p>If you committed your changes earlier, and select your local main branch as described, your local files will be reset to the state they were in after your last local commit. This way, you drop the changes from the server locally, but keep your changes. Removing the changes from the server in your local main branch is not a problem, because they are still present in the remote main branch on the git server.</p> <p>You should now be able to see the project again with all changes, you performed. Now you should push your local changes to a new branch. To do so, right click on the project &gt; \"Team\" &gt; \"Push branch 'main'...\". In the view \"Push to branch in remote\" you should enter an intermediate branch name like \u201cmerge-branch-name\u201d (1) and remove the \u201cconfigure upstream push and pull\u201d (2) option.</p> <p></p> <p>After pushing your changes to the remote Git repository, open the remote project on Gitlab or GitHub. Then open a Merge request (Gitlab) or Pull request (GitHub) respectively and try merging your \"merge-branch-name\" branch into main (or the branch you wanted to push on before).</p> <p>You will now see whether the Merge request/ Pull request can be merged automatically or not:</p> <ol> <li>It can be merged automatically: Go for it and merge it. To continue working     on the model, we recommend using a new clean session of Capella.</li> <li>It can\u2019t be merged automatically: You have now two options:<ol> <li>Redo your work. We recommend using a new session for that.</li> <li>Open a service request or contact the operations team in order to try     to get your changes merged manually.</li> </ol> </li> </ol> <p>In order to publish your changes and to share them with your team click: \"Commit and Push\" (1). If you have not configured that before you are now asked to \"Configure upstream for push and pull\" and the selected default of \"Merge\" can just be kept. You might now be asked to enter a user and a password for the remote repository in order to push your changes there. Having done that you can click \"Push\".</p> <p>Now your changes are saved at the remote repository where they are not lost and your colleagues can see them.</p>"},{"location":"user/tools/capella/migration/","title":"Update a Capella Model to a Newer Version","text":""},{"location":"user/tools/capella/migration/#update-a-capella-model-to-a-newer-version","title":"Update a Capella Model to a Newer Version","text":"<p>Warning</p> <p>Create backups (e.g. in a Git repository) before you start the update process. A downgrade of Capella models is not possible.</p> <p>Info</p> <p>If you want to update a Capella model saved in TeamForCapella, please follow the TeamForCapella specific instructions instead: Update a TeamForCapella based Capella model. An administrator is required to update the Capella version in TeamForCapella.</p> <ol> <li>Open a new persistent session with the old Capella version.</li> <li>Import the model into your workspace.</li> <li>Terminate the session.</li> <li>Update the model version to the newer Capella version:     Change model metadata.</li> <li>Create a new session with the new Capella version.</li> <li>In your persistent workspace loaded, execute the following steps:<ol> <li>Right-click on the model in your workspace.</li> <li>Select <code>Migration</code> and <code>Migrate Project toward current version</code> </li> <li>A backup is recommended.     </li> </ol> </li> </ol>"},{"location":"user/tools/capella/teamforcapella/commit-messages/","title":"TeamForCapella commits and commit messages","text":""},{"location":"user/tools/capella/teamforcapella/commit-messages/#work-with-teamforcapella-commits-and-commit-messages","title":"Work with TeamForCapella commits and commit messages","text":"<p>Info</p> <p>Please request a persistent Capella session before you continue with the instructions here.</p>"},{"location":"user/tools/capella/teamforcapella/commit-messages/#enable-commit-message-prompt","title":"Enable commit message prompt","text":"<p>If you want to provide commit messages when saving your changes in TeamForCapella, you can enable a dialog that will prompt you to enter a message each time you save your changes:</p> <ol> <li>Navigate to <code>Window</code> &gt; <code>Preferences</code>:  </li> <li>In the <code>Preferences</code> dialog, navigate to <code>Sirius</code> &gt; <code>Team Collaboration</code> and    enable the <code>Require description for commit actions</code> option:  </li> <li>Save the changes with \"Apply and Close\".</li> </ol>"},{"location":"user/tools/capella/teamforcapella/commit-messages/#provide-a-commit-message","title":"Provide a commit message","text":"<p>Warning</p> <p>The commit description dialog will only appear if enabled as described in the previous section.</p> <ol> <li>Connect to a TeamForCapella repository.</li> <li>Make some changes to the model.</li> <li>Save your changes. A dialog will prompt you to enter a commit message:    </li> <li>Confirm with \"OK\". If you don't want to provide a commit message, you can    click on \"Ignore\".</li> </ol>"},{"location":"user/tools/capella/teamforcapella/commit-messages/#view-the-commit-history","title":"View the commit history","text":"<ol> <li>Open the Capella search via the search icon in the top right corner.</li> <li>Search for commit history and select    <code>Commit History (Sirius Team collaboration)</code>:  </li> <li>The commit history view opens. It will show the changes of the selected    element and children in the project explorer. Select the <code>.aird</code> file for    the full project commit history. You can click on specific commits to see    the modified elements:  </li> </ol>"},{"location":"user/tools/capella/teamforcapella/connect/","title":"Connect to a TeamForCapella Repository","text":""},{"location":"user/tools/capella/teamforcapella/connect/#connect-to-a-teamforcapella-repository","title":"Connect to a TeamForCapella Repository","text":"<p>Info</p> <p>Connecting to a T4C model in that way will open a connection and automatically write changes back to the T4C model. If you do not want to write changes back you can follow the import T4C model tutorial</p> <p>To access a TeamForCapella based model you first need read/write access from a model lead (usually this role is allocated to lead architects / area owners).</p> <p>Info</p> <p>Please request a persistent session before you continue with the instructions here.</p> <ol> <li> <p>During the session creation, you perhaps already noticed the TeamForCapella     session token. If you've already closed the dialog, please reopen it by     clicking <code>Connect</code> for your desired session under <code>Active Sessions</code>.     Whenever you create a session, we select all TeamForCapella models with the     same Capella version that you have access to. For those repositories, we     create a session token and register it with <code>TeamForCapella</code>. The access is     revoked after session termination. Please copy the session token (you can     just click on the text to copy it):</p> <p></p> </li> <li> <p>When Capella is finally loaded you navigate to <code>File</code> &gt; <code>New</code> &gt; <code>Other</code>.</p> <p></p> </li> <li> <p>Expand <code>Team for Capella</code> and select <code>Capella Connected Project</code>:</p> <p></p> </li> <li> <p>In the drop-down select the repository you like to work on. In most cases     the repository and project name should match.</p> </li> <li> <p>Click on <code>Test connection</code> and enter you username and the session token you     received in the first step.     </p> <p>Info</p> <p>The username in the <code>Test connection</code> dialog should be already  pre-filled, however if this is not the case you may need to fill it in  manually.</p> <p>Bug</p> <p>Do not make use of the <code>Remember me</code> functionality.</p> </li> <li> <p>When the connection test is completed successfully you can click the <code>Next</code>     button.</p> </li> <li> <p>Finally a Project selection dialog should appear - the defaults are usually     good, just click <code>Finish</code>. This should result in a new folder     <code>project-name.team</code> in your Project Explorer. Open the project, locate a     file with a <code>.aird</code> extension and double-click it to open the model in     read-write mode.</p> <p></p> </li> </ol>"},{"location":"user/tools/capella/teamforcapella/connected-users/","title":"See Other Connected Users","text":""},{"location":"user/tools/capella/teamforcapella/connected-users/#see-who-is-connected-to-a-teamforcapella-repository","title":"See who is connected to a TeamForCapella repository","text":"<p>You can see who is connected to a TeamForCapella repository:</p> <ol> <li>Start a persistent session.</li> <li>Connect to the TeamForCapella repository.</li> <li>Right-click on the <code>*.aird.team</code> file and select Properties:  </li> <li>In the opened dialog, select <code>Collaborative Session</code> in the left menu. You    can see the list of connected users in the <code>Other connected users</code> row:  </li> </ol>"},{"location":"user/tools/capella/teamforcapella/export/","title":"Export a Model to TeamForCapella","text":""},{"location":"user/tools/capella/teamforcapella/export/#export-a-capella-model-from-your-persistent-workspace-to-a-teamforcapella-server","title":"Export a Capella Model from your Persistent Workspace to a TeamForCapella Server","text":"<p>Warning</p> <p>To export a Capella model to a TeamForCapella server, you need at least the <code>Read/Write</code>-permission for the project.</p> <ol> <li>Open a persistent session with the corresponding Capella version.</li> <li>Wait until Capella has started.</li> <li>Expand the project you'd like to export in the Project explorer.</li> <li>Right-click on the <code>.aird</code> file.</li> <li>Select <code>Export</code> in the menu.</li> <li>A dialog with the title <code>Select</code> should open. Expand <code>TeamForCapella</code>,    select <code>Capella Project to Remote Repository</code> and confirm with <code>Next</code>:    </li> <li>Select the repository from the dropdown menu. Click on the <code>Test connection</code>    button and enter your session token. Click on <code>Next</code>.    </li> <li>Select the overwrite strategy. If the project doesn't exist on the server    yet, choose <code>Replace</code>. Otherwise, select <code>Merge</code>.  </li> <li>In the next step, you have to select images to export.</li> <li>Finish the export with <code>Finish</code>.</li> </ol>"},{"location":"user/tools/capella/teamforcapella/import/","title":"Import a Model from TeamForCapella","text":""},{"location":"user/tools/capella/teamforcapella/import/#import-a-capella-model-from-a-teamforcapella-server-into-your-persistent-workspace","title":"Import a Capella Model from a TeamForCapella Server into your Persistent Workspace","text":"<p>Warning</p> <p>To import a Capella model into your persistent workspace, you need at least the <code>Read/Write</code>-permission in the project.</p> <p>Info</p> <p>This imports a model into your workspace and changes are not automatically saved back to the T4C repository. If you want to save changes directly back to the server use this documentation.</p> <ol> <li>Open a persistent session with the corresponding Capella version.</li> <li>Wait until Capella has started.</li> <li>Click on <code>File</code> &gt; <code>Import...</code>.  </li> <li>A dialog with the title <code>Select</code> should open. In the dialog, expand     <code>TeamForCapella</code>, select <code>Capella project from remote repository</code> and     confirm with <code>Next</code>.     </li> <li>Select the repository from the dropdown menu. Click on the     <code>Test connection</code> button and enter your     session token.     </li> <li> <p>Click on <code>Next</code> .</p> <p>Warning</p> <p>Do NOT modify the default location. Only the <code>/workspace</code> directory is persistent.  </p> <p>Hint</p> <p>  If you get the message <code>A project with the same name already exists in your workspace</code>, change the name in the <code>Local Project Name</code> field.  </p> </li> <li> <p>Select <code>Import all images</code> during the next step (step does not exist on     Capella 5.x.x). </p> </li> <li>Confirm with <code>Finish</code>. You should see a success message:     </li> <li>Click on <code>Ok</code> and the project should appear in your persistent workspace.</li> </ol>"},{"location":"user/tools/capella/teamforcapella/migration/","title":"Steps after a Model Migration","text":"<p>You probably got this page because one of your models has been migrated to a newer version of Capella. After the migration, there are some manual steps that you need to follow in order to continue working with the model:</p> <ol> <li> <p>Request a session with the new Capella version. Identify the migrated    projects and remove the old <code>.team</code> projects from your workspace:</p> <p></p> <p>A popup will appear asking you to confirm the deletion. Tick the box to delete the project from the disk and confirm:</p> <p></p> </li> <li> <p>Connect to the new TeamForCapella repository:    Connect to a TeamForCapella repository</p> </li> </ol>"},{"location":"user/tools/capella/teamforcapella/upload-images/","title":"Upload Images to TeamForCapella","text":"<ol> <li>Upload the image into your personal session workspace via the file browser     upload:     Upload files</li> <li>Connect to the TeamForCapella repository:     Connect to a TeamForCapella repository</li> <li> <p>Right-click on the <code>.team</code> project and select     <code>Manage Images From Remote Server</code>:     </p> <p>Alternatively, you can also open the dialog via the image icon from the description editor: </p> </li> <li> <p>Choose the project name on the left side, expand it and select the folder     <code>Images</code>.</p> <p>Important</p> <p>Do not upload images in the <code>*.team</code> project! Use the project name without the <code>.team</code> suffix. Otherwise, images are not available after exports of the model.</p> <p>Project or folder not listed?</p> <p>If the project is not listed, you can create a new project:</p> <ol> <li>Click <code>New Project</code> on the right side:  </li> <li>Enter the project name without the <code>.team</code> suffix.    Make sure that the project name matches exactly.</li> <li>Confirm with <code>Ok</code>.</li> <li>In the new project, create a new folder with <code>New Folder</code>:  </li> <li>Enter <code>Pictures</code> as name of the new folder and confirm.</li> </ol> </li> <li> <p>Upload the images via the <code>Upload</code> button:</p> <p></p> <ol> <li> <p>In the open dialog, select <code>Select local images</code>:    </p> </li> <li> <p>Select <code>Other Locations</code> and <code>Computer</code>:    </p> </li> <li> <p>Select <code>workspace</code>: </p> </li> <li> <p>In this folder you can see the files uploaded via the File Browser.    Select the images to upload and click <code>Open</code>.</p> </li> <li> <p>Confirm with <code>Ok</code></p> </li> </ol> </li> <li> <p>Once uploaded, the images can be embedded using the description editor.</p> </li> <li>Commit the changes on the server.</li> </ol>"},{"location":"user/tools/capella/troubleshooting/","title":"Troubleshooting","text":""},{"location":"user/tools/capella/troubleshooting/#capella-troubleshooting","title":"Capella Troubleshooting","text":"My Capella crashed. What should I do?  <p>Capella can crash for many different reasons. Many issues are issues with Eclipse Capella itself, so we try to escalate issues there. Bugs can be reported to the Eclipse Capella team directly in the Github repository.</p> <p>Global administrators can see the logs of all sessions to identify the issues remotely. In addition, the session owner can also see the events in the UI. In your session, please follow these steps:</p> <ol> <li>Open the Capella search via the search icon.</li> <li>Search for <code>Event Logs (General)</code> and open the view.</li> <li>You should now see the list of events and you can try to find an entry with    a matching timestamp.</li> </ol> The description editor doesn't load anymore  <p></p> <p>In some cases the description doesn't load anymore, is just a blank page, or looks like this:</p> <p></p> <p>This is a common and known bug in Capella itself. We have reported it to the Capella contributors, but the bug originates in the Eclipse/Nebula framework. The bug was fixed in Eclipse version 4.24. Capella 6.0.0 and 6.1.0 are based on Eclipse 4.20, so the bug is still present in these versions. Capella 7.0.0 is based on Eclipse 4.27 and the description editor issues are fixed.</p> <p>If you are experiencing this problem, please try one of the following workarounds:</p> <ul> <li> <p>Use the \"Semantic\" or \"Expert\" view in Capella to modify the description.   To do so, open the properties tab of the element you want to edit and click on the \"Semantic\" or \"Expert\" tab.   In this editor, rich text is not supported! You have to enter valid HTML. The content is not validated   and may later impact other components of the toolchain if invalid.</p> <p></p> </li> <li> <p>Open the description editor by double-clicking the model element you want to edit, and open the description editor from the overlay:   </p> </li> <li>Open the Description Editor from the Properties tab:   </li> <li> <p>Reopen Capella in the current session from the task bar at the top of the session window. Expand <code>File</code> and close Capella. It will reopen automatically.</p> <p></p> </li> <li> <p>End your session and request a new session in the Capella Collaboration Manager.</p> </li> </ul> <p>If none of these workarounds help, the only solution is to reset your workspace. Please contact your administrator for assistance.</p> My Capella is slow. What can I do?  <p></p> <p>A slow Capella instance can have multiple reasons. Here are some common issues:</p> <ol> <li> <p>Disable the automatic refresh in the Semantic Browser</p> <p>The automatic refresh of the Semantic Browser slows down Capella when connected to a TeamForCapella repository.</p> <p>By default, the Semantic Browser auto-refresh is enabled. You can disable it in each session using the button marked in the screenshot (red/right box). After you've disabled the auto-refresh, you can manually refresh the Semantic Browser by clicking the refresh button (blue/left box): </p> <p>When you want to save the option for all future sessions, disable it in the UI first and then close Capella to save the workbench state:  </p> </li> <li> <p>Close all unrelated projects and tabs</p> <p>Navigate to the project explorer in Capella and right-click the project you want to work on. Select \"Close projects\":</p> <p></p> <p>Then, confirm the dialog:</p> <p></p> <p>This will close all projects except the selected one.</p> </li> </ol> <p>If none of those steps help, please reach out to your system administrator.</p> Where are the Expert properties after switching to Capella 7?  <p></p> <p>In newer versions of Capella, the \"Expert\" and \"Semantic\" tabs in the Properties panel are hidden by default.</p> <p>To re-enable them, follow these steps:</p> <ol> <li>Go to the workspace settings through Window &gt; Preferences</li> <li>In the left sidebar, go to General &gt; Capabilities</li> <li>In the \"Capella Advanced Modeling\" category, tick the box for \"Expert/Semantic Properties\"</li> <li>Click on \"Apply and Close\" to confirm</li> </ol> <p></p> <p>This will re-enable the \"Expert\" or \"Semantic\" tab in the Properties panel.</p>"}]}