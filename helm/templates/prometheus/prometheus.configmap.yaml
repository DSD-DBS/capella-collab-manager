# SPDX-FileCopyrightText: Copyright DB Netz AG and the capella-collab-manager contributors
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    id: {{ .Release.Name }}-configmap-prometheus
data:
  prometheus.rules: |-
    groups:
      - name: Inactivity
        rules:
            # This metric adds idle times for jupyter notebooks. pynb does not support an activity metric out of the box.
            # We check if the request count is over 4 (scrape interval is 30s). If so, we assume activity.
          - record: idletime_minutes
            expr: (time() - max_over_time(timestamp(sum by (app) (increase(http_request_duration_seconds_count[2m])) > 4.5)[15m:2m])) / 60 OR ON (app) ((group by (app) (http_request_duration_seconds_created)) * -1)
          - alert: Inactive session
            expr: idletime_minutes >= {{ .Values.sessions.timeout }}
            for: 1m
            annotations:
              summary: High Idletime
          - alert: Unused session
            expr: idletime_minutes < 0
            for: {{ .Values.sessions.timeout }}m
            annotations:
              summary: Unused session

  prometheus.yml: |-
    global:
      scrape_interval: 30s
      evaluation_interval: 30s
    rule_files:
      - /etc/prometheus/prometheus.rules

    scrape_configs:
      - job_name: "prometheus"
        metrics_path: /prometheus/metrics
        static_configs:
          - targets: ["localhost:9090"]
      - job_name: "kubernetes-services"
        kubernetes_sd_configs:
          - role: service
            namespaces:
              own_namespace: true
              names:
                - {{ .Values.backend.k8sSessionNamespace }}
        relabel_configs:
          # Scrape pods with annotation prometheus.io/scrape = "true"
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          # Scrape pods on path specified by prometheus.io/path
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          # Scrape pods on port specified by prometheus.io/port
          - source_labels:
              [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          # Transfer app label from kubernetes (name of the deployment)
          - source_labels: [__meta_kubernetes_service_label_app]
            action: replace
            target_label: app
          # Set label kubernetes_namespace
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          # Set label kubernetes_pod_name
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_service_name
