# SPDX-FileCopyrightText: Copyright DB InfraGO AG and contributors
# SPDX-License-Identifier: Apache-2.0

docker:
  registry: "{{ .Values.docker.registry.internal }}"
  externalRegistry: "{{ .Values.docker.registry.external }}"

k8s:
  namespace: {{ .Values.backend.k8sSessionNamespace }}
  {{- if .Values.cluster.namespaces.sessions.ingressClassName }}
  ingressClassName: {{ .Values.cluster.namespaces.sessions.ingressClassName }}
  {{- end }}
  storageClassName: {{ .Values.backend.storageClassName }}
  storageAccessMode: {{ .Values.backend.storageAccessMode }}

  cluster:
    podSecurityContext:
      {{- toYaml .Values.cluster.namespaces.sessions.podSecurityContext | nindent 6 }}
    imagePullPolicy: {{ .Values.cluster.namespaces.sessions.imagePullPolicy }}

  promtail:
    lokiEnabled: {{ .Values.loki.enabled }}
    lokiURL: http://loki-gateway.{{- .Release.Namespace -}}.svc.cluster.local/loki/api/v1
    lokiUsername: {{ .Values.definitions.loki.username }}
    lokiPassword: {{ .Values.definitions.loki.password }}
    serverPort: 3101

general:
  host: "{{ .Values.general.host }}"
  port: "{{ .Values.general.port }}"
  scheme: "{{ .Values.general.scheme }}"

extensions:
  guacamole:
    baseURI: "http://{{ .Release.Name }}-guacamole-guacamole:8080/guacamole"
    publicURI: "{{ .Values.general.scheme }}://{{ .Values.general.host }}:{{ .Values.general.port }}/guacamole"

    username: "{{ .Values.guacamole.username }}"
    password: "{{ .Values.guacamole.password }}"

authentication:
  provider: "{{ .Values.backend.authentication.provider }}"
  jwt:
    usernameClaim: "{{ .Values.backend.authentication.jwt.usernameClaim }}"

  {{ if eq .Values.backend.authentication.provider "oauth" }}
  oauth:
    endpoints:
      tokenIssuance: "{{ .Values.backend.authentication.oauth.endpoints.tokenIssuance }}"
      authorization: "{{ .Values.backend.authentication.oauth.endpoints.authorization }}"
      wellKnown: "{{ .Values.backend.authentication.oauth.endpoints.wellKnown }}"

    audience: "{{ .Values.backend.authentication.oauth.audience }}"

    scopes:
      {{- toYaml .Values.backend.authentication.oauth.scopes | nindent 6}}

    client:
      id: "{{ .Values.backend.authentication.oauth.client.id }}"
      secret: "{{ .Values.backend.authentication.oauth.client.secret }}"

    redirectURI: "{{ .Values.backend.authentication.oauth.redirectURI }}"
  {{ end }}

  {{ if eq .Values.backend.authentication.provider "azure" }}
  azure:
    authorizationEndpoint: "{{ .Values.backend.authentication.azure.authorizationEndpoint }}"

    client:
      id: "{{ .Values.backend.authentication.azure.client.id }}"
      secret: "{{ .Values.backend.authentication.azure.client.secret }}"
  {{ end }}

prometheus:
  url: "http://{{ .Release.Name }}-prometheus-server:9118/prometheus/"

database:
  {{ if .Values.database.backend.deploy }}
  url: "postgresql://backend:{{ .Values.database.backend.internal.password }}@{{ .Release.Name }}-backend-postgres:5432/backend"
  {{ else }}
  url: "{{ .Values.database.backend.external.uri }}"
  {{ end }}

pipelines:
  timeout: {{ .Values.pipelines.timeout }}

initial:
  admin: "{{ .Values.database.backend.initialAdmin }}"

logging:
  level: DEBUG
  logPath: /var/log/backend/

requests:
  timeout: 5
