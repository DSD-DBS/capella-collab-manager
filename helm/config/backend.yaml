# SPDX-FileCopyrightText: Copyright DB InfraGO AG and contributors
# SPDX-License-Identifier: Apache-2.0

docker:
  registry: "{{ .Values.docker.registry.internal }}"
  externalRegistry: "{{ .Values.docker.registry.external }}"
  sessionsRegistry: "{{ .Values.docker.registry.sessions }}"
  githubRegistry: "{{ .Values.docker.registry.github }}"

  tag: "{{ .Values.docker.tag }}"

k8s:
  namespace: {{ .Values.backend.k8sSessionNamespace }}
  {{- if .Values.cluster.namespaces.sessions.ingressClassName }}
  ingressClassName: {{ .Values.cluster.namespaces.sessions.ingressClassName }}
  {{- end }}
  storageClassName: {{ .Values.backend.storageClassName }}
  storageAccessMode: {{ .Values.backend.storageAccessMode }}

  cluster:
    podSecurityContext:
      {{- toYaml .Values.cluster.namespaces.sessions.podSecurityContext | nindent 6 }}
    imagePullPolicy: {{ .Values.cluster.namespaces.sessions.imagePullPolicy }}
    nodeSelector:
      {{- toYaml .Values.cluster.namespaces.sessions.nodeSelector | nindent 6 }}

  promtail:
    lokiEnabled: {{ .Values.loki.enabled }}
    lokiURL: http://loki-gateway.{{- .Release.Namespace -}}.svc.cluster.local/loki/api/v1
    lokiUsername: {{ .Values.loki.gateway.basicAuth.username }}
    lokiPassword: {{ .Values.loki.gateway.basicAuth.password }}
    serverPort: 3101

general:
  host: "{{ .Values.general.host }}"
  port: "{{ .Values.general.port }}"
  scheme: "{{ .Values.general.scheme }}"

extensions:
  guacamole:
    baseURI: "http://{{ .Release.Name }}-guacamole-guacamole:8080/guacamole"
    publicURI: "{{ .Values.general.scheme }}://{{ .Values.general.host }}:{{ .Values.general.port }}/guacamole"

    username: "{{ .Values.guacamole.username }}"
    password: "{{ .Values.guacamole.password }}"

authentication:
  endpoints:
    authorization: "{{ .Values.backend.authentication.endpoints.authorization }}"
    wellKnown: "{{ .Values.backend.authentication.endpoints.wellKnown }}"
  mapping:
    identifier: "{{ .Values.backend.authentication.claimMapping.idpIdentifier }}"
    username: "{{ .Values.backend.authentication.claimMapping.username }}"
    email: "{{ .Values.backend.authentication.claimMapping.email }}"
  scopes:
  {{ .Values.backend.authentication.scopes | toYaml | nindent 4 }}
  client:
    id: "{{ .Values.backend.authentication.client.id }}"
    secret: "{{ .Values.backend.authentication.client.secret }}"
  redirectURI: "{{ .Values.backend.authentication.redirectURI }}"

prometheus:
  url: "http://{{ .Release.Name }}-prometheus-server:9118/prometheus/"

database:
  {{ if .Values.database.backend.deploy }}
  url: "postgresql://backend:{{ .Values.database.backend.internal.password }}@{{ .Release.Name }}-backend-postgres:5432/backend"
  {{ else }}
  url: "{{ .Values.database.backend.external.uri }}"
  {{ end }}

valkey:
  url: "valkey://default:{{ .Values.valkey.password }}@{{ .Release.Name }}-valkey:6379/0"

pipelines:
  timeout: {{ .Values.pipelines.timeout }}

sessions:
  timeout: {{ .Values.sessions.timeout }}

initial:
  admin: "{{ .Values.database.backend.initialAdmin }}"

logging:
  level: DEBUG
  logPath: /var/log/backend/

requests:
  timeout: 5

{{ if .Values.mocks.smtp }}
smtp:
  enabled: True
  host: {{ .Release.Name }}-smtp-mock.{{ .Release.Namespace }}.svc.cluster.local:587
  user: "unset"
  password: "unset"
  sender: "capella@example.com"
{{ else if .Values.alerting.email.enabled }}
smtp:
  enabled: {{ .Values.alerting.email.enabled }}
  host: "{{ .Values.alerting.email.host }}"
  user: "{{ .Values.alerting.email.user }}"
  password: "{{ .Values.alerting.email.password }}"
  sender: "{{ .Values.alerting.email.sender }}"
{{ end }}
