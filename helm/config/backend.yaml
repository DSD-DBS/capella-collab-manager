# SPDX-FileCopyrightText: Copyright DB Netz AG and the capella-collab-manager contributors
# SPDX-License-Identifier: Apache-2.0

docker:
  registry: "{{ .Values.docker.registry.internal }}"
  externalRegistry: "{{ .Values.docker.registry.external }}"

k8s:
  namespace: {{ .Values.backend.k8sSessionNamespace }}
  storageClassName: {{ .Values.backend.storageClassName }}
  storageAccessMode: {{ .Values.backend.storageAccessMode }}

  cluster:
    containers:
      {{- toYaml .Values.cluster.namespaces.sessions.containers | nindent 6 }}

  promtail:
    lokiUrl: {{ tpl .Values.definitions.loki.url . }}
    lokiUsername: {{ .Values.definitions.loki.username }}
    lokiPassword: {{ .Values.definitions.loki.password }}
    logLevel: {{ .Values.promtail.logLevel }}
    serverPort: {{ .Values.promtail.serverPort }}

extensions:
  guacamole:
    baseURI: "http://{{ .Release.Name }}-guacamole-guacamole:8080/guacamole"
    publicURI: "{{ .Values.general.scheme }}://{{ .Values.general.host }}:{{ .Values.general.port }}/guacamole"

    username: "{{ .Values.guacamole.username }}"
    password: "{{ .Values.guacamole.password }}"

authentication:
  provider: "{{ .Values.backend.authentication.provider }}"
  jwt:
    usernameClaim: "{{ .Values.backend.authentication.jwt.usernameClaim }}"

  oauth:
    # Only required when using provider oauth
    endpoints:
      tokenIssuance: "{{ .Values.backend.authentication.oauth.endpoints.tokenIssuance }}"
      authorization: "{{ .Values.backend.authentication.oauth.endpoints.authorization }}"
      wellKnown: "{{ .Values.backend.authentication.oauth.endpoints.wellKnown }}"

    audience: "{{ .Values.backend.authentication.oauth.audience }}"

    publicKey: |
      {{- .Values.backend.authentication.oauth.publicKey | nindent 6}}

    scopes:
      {{- toYaml .Values.backend.authentication.oauth.scopes | nindent 6}}

    client:
      id: "{{ .Values.backend.authentication.oauth.client.id }}"
      secret: "{{ .Values.backend.authentication.oauth.client.secret }}"

    redirectURI: "{{ .Values.backend.authentication.oauth.redirectURI }}"

  azure:
    # Only required when using provider oauth
    authorizationEndpoint: "{{ .Values.backend.authentication.azure.authorizationEndpoint }}"

    client:
      id: "{{ .Values.backend.authentication.azure.client.id }}"
      secret: "{{ .Values.backend.authentication.azure.client.secret }}"

    redirectURI: "{{ .Values.backend.authentication.azure.redirectURI }}"

    connectConfigurationEndpoint: "{{ .Values.backend.authentication.azure.connectConfigurationEndpoint }}"

prometheus:
  url: "http://{{ .Release.Name }}-prometheus-server:9118/prometheus/"

database:
  {{ if .Values.database.backend.deploy }}
  url: "postgresql://backend:{{ .Values.database.backend.internal.password }}@{{ .Release.Name }}-backend-postgres:5432/backend"
  {{ else }}
  url: "{{ .Values.database.backend.external.uri }}"
  {{ end }}


initial:
  admin: "{{ .Values.database.backend.initialAdmin }}"

logging:
  level: DEBUG
  logPath: /var/log/backend/

requests:
  timeout: 2
