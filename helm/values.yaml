# SPDX-FileCopyrightText: Copyright DB Netz AG and the capella-collab-manager contributors
# SPDX-License-Identifier: Apache-2.0

#########################################
### APPLICATION RELATED CONFIGURATION ###
#########################################

# Replicas for all deployments (defaults to 1)
replicaCount:
  backend: 1
  backendPostgres: 1
  docs: 1
  frontend: 1
  grafana: 1
  grafanaNginx: 1
  guacamole: 1
  guacamolePostgres: 1
  guacd: 1
  prometheus: 1
  prometheusNginx: 1
  routing: 1

docker:
  # Registry for Docker Images, will be used as prefix for Docker Images
  registry:
    internal: localhost
    external: &externalRegistry docker.io

  images:
    # Docker Image for the Frontend
    frontend: /capella/collab/frontend

    # Docker Image for the Backend
    backend: /capella/collab/backend

    # Docker Image serving the documentation
    docs: /capella/collab/docs

    guacamole:
      # The registry needs to specified here!
      guacamole: docker.io/guacamole/guacamole
      guacd: docker.io/guacamole/guacd

    prometheus: /prom/prometheus

    promtail: /grafana/promtail
    grafana: /grafana/grafana

    mocks:
      oauth: ghcr.io/navikt/mock-oauth2-server:0.4.4

general:
  # Base URL on which the service listens
  host: localhost
  port: 80
  scheme: http

sessions:
  # Session timeout in minutes for unused and idle sessions
  timeout: 90

database:
  # Database Configuration for Guacamole
  guacamole:
    # Define whether the database should also be deployed
    # in the cluster or whether it already exists externally.
    deploy: True

    internal:
      ###### IF database.guacamole.deploy == True ######

      # Admin password of the database
      password: secret

    external:
      ###### IF database.guacamole.deploy == False ######

      # Select type of external database
      # Possible values: MYSQL | POSTGRES
      type: POSTGRES

      # Configure the hostname of the external database
      hostname:

      # Configure the database name of the external database
      database:

      # Configure the username of the external database
      username:

      # Configure the password of the external database
      password:

  # Database Configuration for the T4C Manager
  backend:
    # Define whether the database should also be deployed
    # in the cluster or whether it already exists externally.
    deploy: True

    # Username of an initial admin user
    # Is only set if the database is empty!
    initialAdmin: admin

    internal:
      ###### IF database.backend.deploy == True ######

      # Admin password of the database
      password: secret

    external:
      ###### IF database.backend.deploy == False ######

      # Provide URI to the datebase in the format: postgresql://user:password@url:port/db_name
      uri: postgresql://user:password@url:port/db_name

backend:
  authentication:
    provider: oauth # oauth | azure
    jwt:
      usernameClaim: sub # azure: preferred_username

    oauth:
      # Only required when using provider oauth
      endpoints:
        wellKnown: http://dev-oauth-mock:8080/default/.well-known/openid-configuration
        # Override endpoint that issues JWT Tokens
        tokenIssuance: ""
        # Override endpoint that authorizes the User
        authorization: http://localhost:8080/default/authorize

      audience: default

      publicKey: |
        -----BEGIN PUBLIC KEY-----
        -----END PUBLIC KEY-----

      scopes:
        - openid

      client:
        # OAUTH2 Client ID
        id: tbd
        # OAUTH2 Client Secret
        secret: tbd

      redirectURI: http://localhost:8080/oauth2/callback

    azure:
      # Only required when using provider oauth
      authorizationEndpoint: tbd

      client:
        id: tbd
        secret: tbd

      redirectURI: tbd

  # Namespace in which the Session Deployments / Pods should be spawned.
  # IMPORTANT: The namespace has to exist already
  k8sSessionNamespace: collab-sessions
  storageClassName: local-path
  storageAccessMode: ReadWriteOnce

guacamole:
  username: guacadmin
  password: guacadmin

########################################
### KUBERNETES RELATED CONFIGURATION ###
########################################

# target: local | azure | other
# Never use 'local' in production!
target: other

# Specify if you'd like to use the oauth mock
# Never set mocks.oauth to True in production!
mocks:
  oauth: False

cluster:
  kind: Kubernetes # Kubernetes | OpenShift

  podSecurityContext: &podSecurityContext
    runAsUser: 1004370000
    runAsGroup: 1004370000
    fsGroup: 1004370000
    runAsNonRoot: true

  containers:
    # The following values are appended to each container

  namespaces:
    sessions:
      podSecurityContext: *podSecurityContext
      imagePullPolicy: Always

  pvc:
    storageClassName: local-path

# Specify the NO_PROXY environment for the backend
# Leave it empty if not needed
proxy:
  no_proxy:

promtail:
  storageAccessMode: ReadWriteOnce
  storageClassName: local-path

definitions:
  loki:
    # Default username & password for Loki
    username: &lokiUsername localLokiUser
    password: &lokiPassword localLokiPassword

# Default passwords for Grafana
grafana:
  adminUser: admin
  adminPassword: admin

# https://github.com/grafana/loki/blob/main/production/helm/loki/values.yaml
loki:
  global:
    image:
      registry: *externalRegistry
    dnsService: kube-dns # dns-default for OpenShift
    dnsNamespace: kube-system # openshift-dns for OpenShift
  loki:
    # Disabled X-Scope-OrgID authentication
    auth_enabled: False
    podSecurityContext: *podSecurityContext
  gateway:
    basicAuth:
      enabled: True
      username: *lokiUsername
      password: *lokiPassword
    resources: &resourcesLoki
      limits:
        cpu: "1"
        memory: 500Mi
      requests:
        cpu: "0.03"
        memory: 5Mi
  read:
    # Minimum 2 is required
    replicas: 2

    # We don't want to limit to specific noeds
    affinity: ""
    resources: *resourcesLoki
  write:
    # Minimum 2 is required
    replicas: 2

    # We don't want to limit to specific noeds
    affinity: ""
    resources: *resourcesLoki
  serviceAccount:
    # ServiceAccount doesn't work in OpenShift
    create: False
  monitoring:
    selfMonitoring:
      enabled: False
      grafanaAgent:
        installOperator: False
      lokiCanary:
        enabled: False
    alerts:
      enabled: False
    serviceMonitor:
      enabled: False
    rules:
      enabled: False
    dashboard:
      enabled: False
  test:
    enabled: False
  minio:
    enabled: True
    persistence:
      size: 10Gi
    configPathmc: /tmp/.mc
    securityContext:
      enabled: False
    resources: &resourcesMinio
      limits:
        cpu: "0.5"
        memory: 500Mi
      requests:
        cpu: "0.03"
        memory: 5Mi
    makePolicyJob: &minioJob
      resources: *resourcesMinio
      securityContext:
        enabled: True
        <<: *podSecurityContext
    makeUserJob: *minioJob
    makeServiceAccountJob: *minioJob
    makeBucketJob: *minioJob
    customCommandJob: *minioJob
