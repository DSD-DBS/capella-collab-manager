# SPDX-FileCopyrightText: Copyright DB Netz AG and the capella-collab-manager contributors
# SPDX-License-Identifier: Apache-2.0

#########################################
### APPLICATION RELATED CONFIGURATION ###
#########################################

docker:
  # Registry for Docker Images, will be used as prefix for Docker Images
  registry:
    internal: localhost
    external: docker.io

  images:
    # Docker Image for the Frontend
    frontend: /capella/collab/frontend

    # Docker Image for the Backend
    backend: /capella/collab/backend

    # Docker Image serving the documentation
    docs: /capella/collab/docs

    # Docker Image for EASE
    ease: /t4c/client/ease

    # Docker Image for T4C Backup
    importer: /t4c/client/importer

    guacamole:
      # The registry needs to specified here!
      guacamole: docker.io/guacamole/guacamole
      guacd: docker.io/guacamole/guacd

    prometheus: /prom/prometheus

    mocks:
      oauth: ghcr.io/navikt/mock-oauth2-server:0.4.4

general:
  # Base URL on which the service listens
  host: localhost
  port: 80
  scheme: http

sessions:
  # Session timeout in minutes for unused and idle sessions
  timeout: 90

database:
  # Database Configuration for Guacamole
  guacamole:
    # Define whether the database should also be deployed
    # in the cluster or whether it already exists externally.
    deploy: True

    internal:
      ###### IF database.guacamole.deploy == True ######

      # Admin password of the database
      password: secret

    external:
      ###### IF database.guacamole.deploy == False ######

      # Select type of external database
      # Possible values: MYSQL | POSTGRES
      type: POSTGRES

      # Configure the hostname of the external database
      hostname:

      # Configure the database name of the external database
      database:

      # Configure the username of the external database
      username:

      # Configure the password of the external database
      password:

  # Database Configuration for the T4C Manager
  backend:
    # Define whether the database should also be deployed
    # in the cluster or whether it already exists externally.
    deploy: True

    # Username of an initial admin user
    # Is only set if the database is empty!
    initialAdmin: admin

    internal:
      ###### IF database.backend.deploy == True ######

      # Admin password of the database
      password: secret

    external:
      ###### IF database.backend.deploy == False ######

      # Provide URI to the datebase in the format: postgresql://user:password@url:port/db_name
      uri: postgresql://user:password@url:port/db_name

backend:
  authentication:
    provider: oauth # oauth | azure
    jwt:
      usernameClaim: sub # azure: preferred_username

    oauth:
      # Only required when using provider oauth
      endpoints:
        wellKnown: http://dev-t4c-manager-oauth-mock:8080/default/.well-known/openid-configuration
        # Override endpoint that issues JWT Tokens
        tokenIssuance: ""
        # Override endpoint that authorizes the User
        authorization: http://localhost:8080/default/authorize

      audience: default

      publicKey: |
        -----BEGIN PUBLIC KEY-----
        -----END PUBLIC KEY-----

      scopes:
        - openid

      client:
        # OAUTH2 Client ID
        id: tbd
        # OAUTH2 Client Secret
        secret: tbd

      redirectURI: http://localhost:8080/oauth2/callback

    azure:
      # Only required when using provider oauth
      authorizationEndpoint: tbd

      client:
        id: tbd
        secret: tbd

      redirectURI: tbd

  # Namespace in which the Session Deployments / Pods should be spawned.
  # IMPORTANT: The namespace has to exist already
  k8sSessionNamespace: t4c-sessions
  storageClassName: local-path
  storageAccessMode: ReadWriteOnce

guacamole:
  username: guacadmin
  password: guacadmin

########################################
### KUBERNETES RELATED CONFIGURATION ###
########################################

# target: local | azure | other
# Never use 'local' in production!
target: other

# Specify if you'd like to use the oauth mock
# Never set mocks.oauth to True in production!
mocks:
  oauth: False

cluster:
  kind: Kubernetes # Kubernetes | OpenShift

  containers:
    # The following values are appended to each container

  namespaces:
    sessions:
      containers:
      # The following values are appended to each container in the sessions namespace

  pvc:
    storageClassName: null

# Specify the NO_PROXY environment for the backend
# Leave it empty if not needed
proxy:
  no_proxy:
