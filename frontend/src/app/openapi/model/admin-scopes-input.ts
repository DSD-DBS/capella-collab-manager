/*
 * SPDX-FileCopyrightText: Copyright DB InfraGO AG and contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * Capella Collaboration Manager API
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 + To generate a new version, run `make openapi` in the root directory of this repository.
 */



export interface AdminScopesInput { 
    /**
     * Manage all users of the application. CREATE/UPDATE can be used to change the role of a user / escalate privileges. Use with caution!
     */
    users?: Array<AdminScopesInput.UsersEnum>;
    /**
     * Grant permission to all sub-resources of ALL projects. Use with caution! If possible, use project scopes instead.
     */
    projects?: Array<AdminScopesInput.ProjectsEnum>;
    /**
     * Manage all tools, including its versions and natures
     */
    tools?: Array<AdminScopesInput.ToolsEnum>;
    /**
     * Manage all announcements
     */
    announcements?: Array<AdminScopesInput.AnnouncementsEnum>;
    /**
     * Allow access to monitoring dashboards, Prometheus and Grafana
     */
    monitoring?: Array<AdminScopesInput.MonitoringEnum>;
    /**
     * See and update the global configuration
     */
    configuration?: Array<AdminScopesInput.ConfigurationEnum>;
    /**
     * Manage links to Git server instances
     */
    git_servers?: Array<AdminScopesInput.GitServersEnum>;
    /**
     * Manage Team4Capella servers and license servers
     */
    t4c_servers?: Array<AdminScopesInput.T4cServersEnum>;
    /**
     * Manage Team4Capella repositories
     */
    t4c_repositories?: Array<AdminScopesInput.T4cRepositoriesEnum>;
    /**
     * pure::variants license configuration
     */
    pv_configuration?: Array<AdminScopesInput.PvConfigurationEnum>;
    /**
     * See all events
     */
    events?: Array<AdminScopesInput.EventsEnum>;
    /**
     * See all sessions
     */
    sessions?: Array<AdminScopesInput.SessionsEnum>;
    /**
     * See user workspaces
     */
    workspaces?: Array<AdminScopesInput.WorkspacesEnum>;
    /**
     * Get and revoke personal access tokens of ALL users.
     */
    personal_access_tokens?: Array<AdminScopesInput.PersonalAccessTokensEnum>;
    /**
     * Manage the available tags globally
     */
    tags?: Array<AdminScopesInput.TagsEnum>;
    /**
     * See the pipelines of all projects
     */
    pipelines?: Array<AdminScopesInput.PipelinesEnum>;
}
export namespace AdminScopesInput {
    export const UsersEnum = {
        Get: 'GET',
        Create: 'CREATE',
        Update: 'UPDATE',
        Delete: 'DELETE'
    } as const;
    export type UsersEnum = typeof UsersEnum[keyof typeof UsersEnum];
    export const ProjectsEnum = {
        Get: 'GET',
        Create: 'CREATE',
        Update: 'UPDATE',
        Delete: 'DELETE'
    } as const;
    export type ProjectsEnum = typeof ProjectsEnum[keyof typeof ProjectsEnum];
    export const ToolsEnum = {
        Get: 'GET',
        Create: 'CREATE',
        Update: 'UPDATE',
        Delete: 'DELETE'
    } as const;
    export type ToolsEnum = typeof ToolsEnum[keyof typeof ToolsEnum];
    export const AnnouncementsEnum = {
        Create: 'CREATE',
        Update: 'UPDATE',
        Delete: 'DELETE'
    } as const;
    export type AnnouncementsEnum = typeof AnnouncementsEnum[keyof typeof AnnouncementsEnum];
    export const MonitoringEnum = {
        Get: 'GET'
    } as const;
    export type MonitoringEnum = typeof MonitoringEnum[keyof typeof MonitoringEnum];
    export const ConfigurationEnum = {
        Get: 'GET',
        Update: 'UPDATE'
    } as const;
    export type ConfigurationEnum = typeof ConfigurationEnum[keyof typeof ConfigurationEnum];
    export const GitServersEnum = {
        Create: 'CREATE',
        Update: 'UPDATE',
        Delete: 'DELETE'
    } as const;
    export type GitServersEnum = typeof GitServersEnum[keyof typeof GitServersEnum];
    export const T4cServersEnum = {
        Get: 'GET',
        Create: 'CREATE',
        Update: 'UPDATE',
        Delete: 'DELETE'
    } as const;
    export type T4cServersEnum = typeof T4cServersEnum[keyof typeof T4cServersEnum];
    export const T4cRepositoriesEnum = {
        Get: 'GET',
        Create: 'CREATE',
        Update: 'UPDATE',
        Delete: 'DELETE'
    } as const;
    export type T4cRepositoriesEnum = typeof T4cRepositoriesEnum[keyof typeof T4cRepositoriesEnum];
    export const PvConfigurationEnum = {
        Get: 'GET',
        Update: 'UPDATE',
        Delete: 'DELETE'
    } as const;
    export type PvConfigurationEnum = typeof PvConfigurationEnum[keyof typeof PvConfigurationEnum];
    export const EventsEnum = {
        Get: 'GET'
    } as const;
    export type EventsEnum = typeof EventsEnum[keyof typeof EventsEnum];
    export const SessionsEnum = {
        Get: 'GET'
    } as const;
    export type SessionsEnum = typeof SessionsEnum[keyof typeof SessionsEnum];
    export const WorkspacesEnum = {
        Get: 'GET',
        Delete: 'DELETE'
    } as const;
    export type WorkspacesEnum = typeof WorkspacesEnum[keyof typeof WorkspacesEnum];
    export const PersonalAccessTokensEnum = {
        Get: 'GET',
        Delete: 'DELETE'
    } as const;
    export type PersonalAccessTokensEnum = typeof PersonalAccessTokensEnum[keyof typeof PersonalAccessTokensEnum];
    export const TagsEnum = {
        Create: 'CREATE',
        Update: 'UPDATE',
        Delete: 'DELETE'
    } as const;
    export type TagsEnum = typeof TagsEnum[keyof typeof TagsEnum];
    export const PipelinesEnum = {
        Get: 'GET'
    } as const;
    export type PipelinesEnum = typeof PipelinesEnum[keyof typeof PipelinesEnum];
}


