/*
 * SPDX-FileCopyrightText: Copyright DB InfraGO AG and contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * Capella Collaboration
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 + To generate a new version, run `make openapi` in the root directory of this repository.
 */

import { SessionToolConfigurationOutput } from './session-tool-configuration-output';
import { ToolBackupConfigurationOutput } from './tool-backup-configuration-output';


export interface ToolVersionConfigurationOutput { 
    /**
     * Version will be displayed as recommended.
     */
    is_recommended: boolean;
    /**
     * Version will be displayed as deprecated.
     */
    is_deprecated: boolean;
    /**
     * Configuration for sessions.
     */
    sessions: SessionToolConfigurationOutput;
    /**
     * Configuration for the backup pipelines.
     */
    backups: ToolBackupConfigurationOutput;
    /**
     * <html><div>A list of tool version ids which are compatible with this tool. You can provide version ids of the same tool or other tools. When registering a tool version as compatible, the following behaviour will change: <ul><li>Models of compatible tool versions are available when requesting a provisioned session. Let\'s illustrate this with an example: We have two tool versions A and B. We add the tool version id of tool A to the compatible_versions list of tool B. Now we can request a provisioned session of tool version B using a model of tool version A.</li><li>TeamForCapella repositories will be loaded for all compatible tools. </li></ul>Some examples of what this option can be used for: <ul><li>Define minor versions of a tool as compatible, e.g. Capella 7.0.0 and 7.0.1. A provisioned Capella 7.0.1 can also load Capella 7.0.0 models.</li><li>Define py-capellambse based tools as compatible with multiple versions of Capella. py-capellambse can load multiple versions of Capella models. </li><li>Define individual versions of Capella + pure::variants as compatible with corresponding Capella versions. In this case, TeamForCapella repositories will also be injected into Capella + pure::variants sessions. </li><li>Restrict a tool extensions to specific versions of another tool. A tool extension might not be compatible with all versions of the tool it extends. </li></ul></div></html>
     */
    compatible_versions: Array<number>;
}

